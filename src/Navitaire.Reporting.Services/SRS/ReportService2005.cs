//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version:2.0.40607.11
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 2.0.40607.11.
// 

namespace Microsoft.SqlServer.ReportingServices.ReportService2005
{
    using System.Diagnostics;
    using System.Web.Services;
    using System.ComponentModel;
    using System.Web.Services.Protocols;
    using System;
    using System.Xml.Serialization;


    /// <remarks/>
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute( "code" )]
    [System.Web.Services.WebServiceBindingAttribute( Name = "ReportingService2005Soap", Namespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices" )]
    [System.Xml.Serialization.XmlIncludeAttribute( typeof( DataSourceDefinitionOrReference ) )]
    [System.Xml.Serialization.XmlIncludeAttribute( typeof( ExpirationDefinition ) )]
    [System.Xml.Serialization.XmlIncludeAttribute( typeof( RecurrencePattern ) )]
    [System.Xml.Serialization.XmlIncludeAttribute( typeof( ScheduleDefinitionOrReference ) )]
    public partial class ReportingService2005 : System.Web.Services.Protocols.SoapHttpClientProtocol
    {

        private ServerInfoHeader serverInfoHeaderValueField;

        private System.Threading.SendOrPostCallback ListSecureMethodsOperationCompleted;

        private System.Threading.SendOrPostCallback CreateBatchOperationCompleted;

        private BatchHeader batchHeaderValueField;

        private System.Threading.SendOrPostCallback CancelBatchOperationCompleted;

        private System.Threading.SendOrPostCallback ExecuteBatchOperationCompleted;

        private System.Threading.SendOrPostCallback GetSystemPropertiesOperationCompleted;

        private System.Threading.SendOrPostCallback SetSystemPropertiesOperationCompleted;

        private System.Threading.SendOrPostCallback DeleteItemOperationCompleted;

        private System.Threading.SendOrPostCallback MoveItemOperationCompleted;

        private System.Threading.SendOrPostCallback ListChildrenOperationCompleted;

        private System.Threading.SendOrPostCallback ListDependentItemsOperationCompleted;

        private ItemNamespaceHeader itemNamespaceHeaderValueField;

        private System.Threading.SendOrPostCallback GetPropertiesOperationCompleted;

        private System.Threading.SendOrPostCallback SetPropertiesOperationCompleted;

        private System.Threading.SendOrPostCallback GetItemTypeOperationCompleted;

        private System.Threading.SendOrPostCallback CreateFolderOperationCompleted;

        private System.Threading.SendOrPostCallback CreateReportOperationCompleted;

        private System.Threading.SendOrPostCallback GetReportDefinitionOperationCompleted;

        private System.Threading.SendOrPostCallback SetReportDefinitionOperationCompleted;

        private System.Threading.SendOrPostCallback CreateResourceOperationCompleted;

        private System.Threading.SendOrPostCallback SetResourceContentsOperationCompleted;

        private System.Threading.SendOrPostCallback GetResourceContentsOperationCompleted;

        private System.Threading.SendOrPostCallback GetReportParametersOperationCompleted;

        private System.Threading.SendOrPostCallback SetReportParametersOperationCompleted;

        private System.Threading.SendOrPostCallback CreateLinkedReportOperationCompleted;

        private System.Threading.SendOrPostCallback GetReportLinkOperationCompleted;

        private System.Threading.SendOrPostCallback SetReportLinkOperationCompleted;

        private System.Threading.SendOrPostCallback GetRenderResourceOperationCompleted;

        private System.Threading.SendOrPostCallback SetExecutionOptionsOperationCompleted;

        private System.Threading.SendOrPostCallback GetExecutionOptionsOperationCompleted;

        private System.Threading.SendOrPostCallback SetCacheOptionsOperationCompleted;

        private System.Threading.SendOrPostCallback GetCacheOptionsOperationCompleted;

        private System.Threading.SendOrPostCallback UpdateReportExecutionSnapshotOperationCompleted;

        private System.Threading.SendOrPostCallback FlushCacheOperationCompleted;

        private System.Threading.SendOrPostCallback ListJobsOperationCompleted;

        private System.Threading.SendOrPostCallback CancelJobOperationCompleted;

        private System.Threading.SendOrPostCallback CreateDataSourceOperationCompleted;

        private System.Threading.SendOrPostCallback GetDataSourceContentsOperationCompleted;

        private System.Threading.SendOrPostCallback SetDataSourceContentsOperationCompleted;

        private System.Threading.SendOrPostCallback EnableDataSourceOperationCompleted;

        private System.Threading.SendOrPostCallback DisableDataSourceOperationCompleted;

        private System.Threading.SendOrPostCallback SetItemDataSourcesOperationCompleted;

        private System.Threading.SendOrPostCallback GetItemDataSourcesOperationCompleted;

        private System.Threading.SendOrPostCallback GetItemDataSourcePromptsOperationCompleted;

        private System.Threading.SendOrPostCallback CreateReportHistorySnapshotOperationCompleted;

        private System.Threading.SendOrPostCallback SetReportHistoryOptionsOperationCompleted;

        private System.Threading.SendOrPostCallback GetReportHistoryOptionsOperationCompleted;

        private System.Threading.SendOrPostCallback SetReportHistoryLimitOperationCompleted;

        private System.Threading.SendOrPostCallback GetReportHistoryLimitOperationCompleted;

        private System.Threading.SendOrPostCallback ListReportHistoryOperationCompleted;

        private System.Threading.SendOrPostCallback DeleteReportHistorySnapshotOperationCompleted;

        private System.Threading.SendOrPostCallback FindItemsOperationCompleted;

        private System.Threading.SendOrPostCallback CreateScheduleOperationCompleted;

        private System.Threading.SendOrPostCallback DeleteScheduleOperationCompleted;

        private System.Threading.SendOrPostCallback SetSchedulePropertiesOperationCompleted;

        private System.Threading.SendOrPostCallback GetSchedulePropertiesOperationCompleted;

        private System.Threading.SendOrPostCallback ListScheduledReportsOperationCompleted;

        private System.Threading.SendOrPostCallback ListSchedulesOperationCompleted;

        private System.Threading.SendOrPostCallback PauseScheduleOperationCompleted;

        private System.Threading.SendOrPostCallback ResumeScheduleOperationCompleted;

        private System.Threading.SendOrPostCallback CreateSubscriptionOperationCompleted;

        private System.Threading.SendOrPostCallback CreateDataDrivenSubscriptionOperationCompleted;

        private System.Threading.SendOrPostCallback SetSubscriptionPropertiesOperationCompleted;

        private System.Threading.SendOrPostCallback SetDataDrivenSubscriptionPropertiesOperationCompleted;

        private System.Threading.SendOrPostCallback GetSubscriptionPropertiesOperationCompleted;

        private System.Threading.SendOrPostCallback GetDataDrivenSubscriptionPropertiesOperationCompleted;

        private System.Threading.SendOrPostCallback DeleteSubscriptionOperationCompleted;

        private System.Threading.SendOrPostCallback PrepareQueryOperationCompleted;

        private System.Threading.SendOrPostCallback GetExtensionSettingsOperationCompleted;

        private System.Threading.SendOrPostCallback ValidateExtensionSettingsOperationCompleted;

        private System.Threading.SendOrPostCallback ListSubscriptionsOperationCompleted;

        private System.Threading.SendOrPostCallback ListSubscriptionsUsingDataSourceOperationCompleted;

        private System.Threading.SendOrPostCallback ListExtensionsOperationCompleted;

        private System.Threading.SendOrPostCallback ListEventsOperationCompleted;

        private System.Threading.SendOrPostCallback FireEventOperationCompleted;

        private System.Threading.SendOrPostCallback ListTasksOperationCompleted;

        private System.Threading.SendOrPostCallback ListRolesOperationCompleted;

        private System.Threading.SendOrPostCallback CreateRoleOperationCompleted;

        private System.Threading.SendOrPostCallback DeleteRoleOperationCompleted;

        private System.Threading.SendOrPostCallback GetRolePropertiesOperationCompleted;

        private System.Threading.SendOrPostCallback SetRolePropertiesOperationCompleted;

        private System.Threading.SendOrPostCallback GetSystemPoliciesOperationCompleted;

        private System.Threading.SendOrPostCallback SetSystemPoliciesOperationCompleted;

        private System.Threading.SendOrPostCallback GetPoliciesOperationCompleted;

        private System.Threading.SendOrPostCallback SetPoliciesOperationCompleted;

        private System.Threading.SendOrPostCallback InheritParentSecurityOperationCompleted;

        private System.Threading.SendOrPostCallback GetSystemPermissionsOperationCompleted;

        private System.Threading.SendOrPostCallback GetPermissionsOperationCompleted;

        private System.Threading.SendOrPostCallback LogonUserOperationCompleted;

        private System.Threading.SendOrPostCallback LogoffOperationCompleted;

        private System.Threading.SendOrPostCallback CreateModelOperationCompleted;

        private System.Threading.SendOrPostCallback GetModelDefinitionOperationCompleted;

        private System.Threading.SendOrPostCallback SetModelDefinitionOperationCompleted;

        private System.Threading.SendOrPostCallback ListModelPerspectivesOperationCompleted;

        private System.Threading.SendOrPostCallback GetUserModelOperationCompleted;

        private System.Threading.SendOrPostCallback ListModelItemChildrenOperationCompleted;

        private System.Threading.SendOrPostCallback GetModelItemPermissionsOperationCompleted;

        private System.Threading.SendOrPostCallback GetModelItemPoliciesOperationCompleted;

        private System.Threading.SendOrPostCallback SetModelItemPoliciesOperationCompleted;

        private System.Threading.SendOrPostCallback InheritModelItemParentSecurityOperationCompleted;

        private System.Threading.SendOrPostCallback RemoveAllModelItemPoliciesOperationCompleted;

        private System.Threading.SendOrPostCallback SetModelDrillthroughReportsOperationCompleted;

        private System.Threading.SendOrPostCallback ListModelDrillthroughReportsOperationCompleted;

        private System.Threading.SendOrPostCallback GenerateModelOperationCompleted;

        private System.Threading.SendOrPostCallback RegenerateModelOperationCompleted;

        private bool useDefaultCredentialsSetExplicitly;

        /// <remarks/>
        public ReportingService2005()
        {
            if ( ( this.IsLocalFileSystemWebService( this.Url ) == true ) )
            {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else
            {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }

        public ServerInfoHeader ServerInfoHeaderValue
        {
            get
            {
                return this.serverInfoHeaderValueField;
            }
            set
            {
                this.serverInfoHeaderValueField = value;
            }
        }

        public BatchHeader BatchHeaderValue
        {
            get
            {
                return this.batchHeaderValueField;
            }
            set
            {
                this.batchHeaderValueField = value;
            }
        }

        public ItemNamespaceHeader ItemNamespaceHeaderValue
        {
            get
            {
                return this.itemNamespaceHeaderValueField;
            }
            set
            {
                this.itemNamespaceHeaderValueField = value;
            }
        }

        [System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Design", "CA1056:UriPropertiesShouldNotBeStrings" )]
        public new string Url
        {
            get
            {
                return base.Url;
            }
            set
            {
                if ( ( ( ( this.IsLocalFileSystemWebService( base.Url ) == true )
                            && ( this.useDefaultCredentialsSetExplicitly == false ) )
                            && ( this.IsLocalFileSystemWebService( value ) == false ) ) )
                {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }

        public new bool UseDefaultCredentials
        {
            get
            {
                return base.UseDefaultCredentials;
            }
            set
            {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }

        /// <remarks/>
        public event ListSecureMethodsCompletedEventHandler ListSecureMethodsCompleted;

        /// <remarks/>
        public event CreateBatchCompletedEventHandler CreateBatchCompleted;

        /// <remarks/>
        public event CancelBatchCompletedEventHandler CancelBatchCompleted;

        /// <remarks/>
        public event ExecuteBatchCompletedEventHandler ExecuteBatchCompleted;

        /// <remarks/>
        public event GetSystemPropertiesCompletedEventHandler GetSystemPropertiesCompleted;

        /// <remarks/>
        public event SetSystemPropertiesCompletedEventHandler SetSystemPropertiesCompleted;

        /// <remarks/>
        public event DeleteItemCompletedEventHandler DeleteItemCompleted;

        /// <remarks/>
        public event MoveItemCompletedEventHandler MoveItemCompleted;

        /// <remarks/>
        public event ListChildrenCompletedEventHandler ListChildrenCompleted;

        /// <remarks/>
        public event ListDependentItemsCompletedEventHandler ListDependentItemsCompleted;

        /// <remarks/>
        public event GetPropertiesCompletedEventHandler GetPropertiesCompleted;

        /// <remarks/>
        public event SetPropertiesCompletedEventHandler SetPropertiesCompleted;

        /// <remarks/>
        public event GetItemTypeCompletedEventHandler GetItemTypeCompleted;

        /// <remarks/>
        public event CreateFolderCompletedEventHandler CreateFolderCompleted;

        /// <remarks/>
        public event CreateReportCompletedEventHandler CreateReportCompleted;

        /// <remarks/>
        public event GetReportDefinitionCompletedEventHandler GetReportDefinitionCompleted;

        /// <remarks/>
        public event SetReportDefinitionCompletedEventHandler SetReportDefinitionCompleted;

        /// <remarks/>
        public event CreateResourceCompletedEventHandler CreateResourceCompleted;

        /// <remarks/>
        public event SetResourceContentsCompletedEventHandler SetResourceContentsCompleted;

        /// <remarks/>
        public event GetResourceContentsCompletedEventHandler GetResourceContentsCompleted;

        /// <remarks/>
        public event GetReportParametersCompletedEventHandler GetReportParametersCompleted;

        /// <remarks/>
        public event SetReportParametersCompletedEventHandler SetReportParametersCompleted;

        /// <remarks/>
        public event CreateLinkedReportCompletedEventHandler CreateLinkedReportCompleted;

        /// <remarks/>
        public event GetReportLinkCompletedEventHandler GetReportLinkCompleted;

        /// <remarks/>
        public event SetReportLinkCompletedEventHandler SetReportLinkCompleted;

        /// <remarks/>
        public event GetRenderResourceCompletedEventHandler GetRenderResourceCompleted;

        /// <remarks/>
        public event SetExecutionOptionsCompletedEventHandler SetExecutionOptionsCompleted;

        /// <remarks/>
        public event GetExecutionOptionsCompletedEventHandler GetExecutionOptionsCompleted;

        /// <remarks/>
        public event SetCacheOptionsCompletedEventHandler SetCacheOptionsCompleted;

        /// <remarks/>
        public event GetCacheOptionsCompletedEventHandler GetCacheOptionsCompleted;

        /// <remarks/>
        public event UpdateReportExecutionSnapshotCompletedEventHandler UpdateReportExecutionSnapshotCompleted;

        /// <remarks/>
        public event FlushCacheCompletedEventHandler FlushCacheCompleted;

        /// <remarks/>
        public event ListJobsCompletedEventHandler ListJobsCompleted;

        /// <remarks/>
        public event CancelJobCompletedEventHandler CancelJobCompleted;

        /// <remarks/>
        public event CreateDataSourceCompletedEventHandler CreateDataSourceCompleted;

        /// <remarks/>
        public event GetDataSourceContentsCompletedEventHandler GetDataSourceContentsCompleted;

        /// <remarks/>
        public event SetDataSourceContentsCompletedEventHandler SetDataSourceContentsCompleted;

        /// <remarks/>
        public event EnableDataSourceCompletedEventHandler EnableDataSourceCompleted;

        /// <remarks/>
        public event DisableDataSourceCompletedEventHandler DisableDataSourceCompleted;

        /// <remarks/>
        public event SetItemDataSourcesCompletedEventHandler SetItemDataSourcesCompleted;

        /// <remarks/>
        public event GetItemDataSourcesCompletedEventHandler GetItemDataSourcesCompleted;

        /// <remarks/>
        public event GetItemDataSourcePromptsCompletedEventHandler GetItemDataSourcePromptsCompleted;

        /// <remarks/>
        public event CreateReportHistorySnapshotCompletedEventHandler CreateReportHistorySnapshotCompleted;

        /// <remarks/>
        public event SetReportHistoryOptionsCompletedEventHandler SetReportHistoryOptionsCompleted;

        /// <remarks/>
        public event GetReportHistoryOptionsCompletedEventHandler GetReportHistoryOptionsCompleted;

        /// <remarks/>
        public event SetReportHistoryLimitCompletedEventHandler SetReportHistoryLimitCompleted;

        /// <remarks/>
        public event GetReportHistoryLimitCompletedEventHandler GetReportHistoryLimitCompleted;

        /// <remarks/>
        public event ListReportHistoryCompletedEventHandler ListReportHistoryCompleted;

        /// <remarks/>
        public event DeleteReportHistorySnapshotCompletedEventHandler DeleteReportHistorySnapshotCompleted;

        /// <remarks/>
        public event FindItemsCompletedEventHandler FindItemsCompleted;

        /// <remarks/>
        public event CreateScheduleCompletedEventHandler CreateScheduleCompleted;

        /// <remarks/>
        public event DeleteScheduleCompletedEventHandler DeleteScheduleCompleted;

        /// <remarks/>
        public event SetSchedulePropertiesCompletedEventHandler SetSchedulePropertiesCompleted;

        /// <remarks/>
        public event GetSchedulePropertiesCompletedEventHandler GetSchedulePropertiesCompleted;

        /// <remarks/>
        public event ListScheduledReportsCompletedEventHandler ListScheduledReportsCompleted;

        /// <remarks/>
        public event ListSchedulesCompletedEventHandler ListSchedulesCompleted;

        /// <remarks/>
        public event PauseScheduleCompletedEventHandler PauseScheduleCompleted;

        /// <remarks/>
        public event ResumeScheduleCompletedEventHandler ResumeScheduleCompleted;

        /// <remarks/>
        public event CreateSubscriptionCompletedEventHandler CreateSubscriptionCompleted;

        /// <remarks/>
        public event CreateDataDrivenSubscriptionCompletedEventHandler CreateDataDrivenSubscriptionCompleted;

        /// <remarks/>
        public event SetSubscriptionPropertiesCompletedEventHandler SetSubscriptionPropertiesCompleted;

        /// <remarks/>
        public event SetDataDrivenSubscriptionPropertiesCompletedEventHandler SetDataDrivenSubscriptionPropertiesCompleted;

        /// <remarks/>
        public event GetSubscriptionPropertiesCompletedEventHandler GetSubscriptionPropertiesCompleted;

        /// <remarks/>
        public event GetDataDrivenSubscriptionPropertiesCompletedEventHandler GetDataDrivenSubscriptionPropertiesCompleted;

        /// <remarks/>
        public event DeleteSubscriptionCompletedEventHandler DeleteSubscriptionCompleted;

        /// <remarks/>
        public event PrepareQueryCompletedEventHandler PrepareQueryCompleted;

        /// <remarks/>
        public event GetExtensionSettingsCompletedEventHandler GetExtensionSettingsCompleted;

        /// <remarks/>
        public event ValidateExtensionSettingsCompletedEventHandler ValidateExtensionSettingsCompleted;

        /// <remarks/>
        public event ListSubscriptionsCompletedEventHandler ListSubscriptionsCompleted;

        /// <remarks/>
        public event ListSubscriptionsUsingDataSourceCompletedEventHandler ListSubscriptionsUsingDataSourceCompleted;

        /// <remarks/>
        public event ListExtensionsCompletedEventHandler ListExtensionsCompleted;

        /// <remarks/>
        public event ListEventsCompletedEventHandler ListEventsCompleted;

        /// <remarks/>
        public event FireEventCompletedEventHandler FireEventCompleted;

        /// <remarks/>
        public event ListTasksCompletedEventHandler ListTasksCompleted;

        /// <remarks/>
        public event ListRolesCompletedEventHandler ListRolesCompleted;

        /// <remarks/>
        public event CreateRoleCompletedEventHandler CreateRoleCompleted;

        /// <remarks/>
        public event DeleteRoleCompletedEventHandler DeleteRoleCompleted;

        /// <remarks/>
        public event GetRolePropertiesCompletedEventHandler GetRolePropertiesCompleted;

        /// <remarks/>
        public event SetRolePropertiesCompletedEventHandler SetRolePropertiesCompleted;

        /// <remarks/>
        public event GetSystemPoliciesCompletedEventHandler GetSystemPoliciesCompleted;

        /// <remarks/>
        public event SetSystemPoliciesCompletedEventHandler SetSystemPoliciesCompleted;

        /// <remarks/>
        public event GetPoliciesCompletedEventHandler GetPoliciesCompleted;

        /// <remarks/>
        public event SetPoliciesCompletedEventHandler SetPoliciesCompleted;

        /// <remarks/>
        public event InheritParentSecurityCompletedEventHandler InheritParentSecurityCompleted;

        /// <remarks/>
        public event GetSystemPermissionsCompletedEventHandler GetSystemPermissionsCompleted;

        /// <remarks/>
        public event GetPermissionsCompletedEventHandler GetPermissionsCompleted;

        /// <remarks/>
        public event LogonUserCompletedEventHandler LogonUserCompleted;

        /// <remarks/>
        public event LogoffCompletedEventHandler LogoffCompleted;

        /// <remarks/>
        public event CreateModelCompletedEventHandler CreateModelCompleted;

        /// <remarks/>
        public event GetModelDefinitionCompletedEventHandler GetModelDefinitionCompleted;

        /// <remarks/>
        public event SetModelDefinitionCompletedEventHandler SetModelDefinitionCompleted;

        /// <remarks/>
        public event ListModelPerspectivesCompletedEventHandler ListModelPerspectivesCompleted;

        /// <remarks/>
        public event GetUserModelCompletedEventHandler GetUserModelCompleted;

        /// <remarks/>
        public event ListModelItemChildrenCompletedEventHandler ListModelItemChildrenCompleted;

        /// <remarks/>
        public event GetModelItemPermissionsCompletedEventHandler GetModelItemPermissionsCompleted;

        /// <remarks/>
        public event GetModelItemPoliciesCompletedEventHandler GetModelItemPoliciesCompleted;

        /// <remarks/>
        public event SetModelItemPoliciesCompletedEventHandler SetModelItemPoliciesCompleted;

        /// <remarks/>
        public event InheritModelItemParentSecurityCompletedEventHandler InheritModelItemParentSecurityCompleted;

        /// <remarks/>
        public event RemoveAllModelItemPoliciesCompletedEventHandler RemoveAllModelItemPoliciesCompleted;

        /// <remarks/>
        public event SetModelDrillthroughReportsCompletedEventHandler SetModelDrillthroughReportsCompleted;

        /// <remarks/>
        public event ListModelDrillthroughReportsCompletedEventHandler ListModelDrillthroughReportsCompleted;

        /// <remarks/>
        public event GenerateModelCompletedEventHandler GenerateModelCompleted;

        /// <remarks/>
        public event RegenerateModelCompletedEventHandler RegenerateModelCompleted;

        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute( "ServerInfoHeaderValue", Direction = System.Web.Services.Protocols.SoapHeaderDirection.Out )]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute( "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices/Lis" +
            "tSecureMethods", RequestNamespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices", ResponseNamespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped )]
        public string[] ListSecureMethods()
        {
            object[] results = this.Invoke( "ListSecureMethods", new object[ 0 ] );
            return ( (string[])( results[ 0 ] ) );
        }

        /// <remarks/>
        public void ListSecureMethodsAsync()
        {
            this.ListSecureMethodsAsync( null );
        }

        /// <remarks/>
        public void ListSecureMethodsAsync( object userState )
        {
            if ( ( this.ListSecureMethodsOperationCompleted == null ) )
            {
                this.ListSecureMethodsOperationCompleted = new System.Threading.SendOrPostCallback( this.OnListSecureMethodsOperationCompleted );
            }
            this.InvokeAsync( "ListSecureMethods", new object[ 0 ], this.ListSecureMethodsOperationCompleted, userState );
        }

        private void OnListSecureMethodsOperationCompleted( object arg )
        {
            if ( ( this.ListSecureMethodsCompleted != null ) )
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ( (System.Web.Services.Protocols.InvokeCompletedEventArgs)( arg ) );
                this.ListSecureMethodsCompleted( this, new ListSecureMethodsCompletedEventArgs( invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState ) );
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute( "ServerInfoHeaderValue", Direction = System.Web.Services.Protocols.SoapHeaderDirection.Out )]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute( "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices/Cre" +
            "ateBatch", RequestNamespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices", ResponseNamespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped )]
        [return: System.Xml.Serialization.XmlElementAttribute( "BatchID" )]
        public string CreateBatch()
        {
            object[] results = this.Invoke( "CreateBatch", new object[ 0 ] );
            return ( (string)( results[ 0 ] ) );
        }

        /// <remarks/>
        public void CreateBatchAsync()
        {
            this.CreateBatchAsync( null );
        }

        /// <remarks/>
        public void CreateBatchAsync( object userState )
        {
            if ( ( this.CreateBatchOperationCompleted == null ) )
            {
                this.CreateBatchOperationCompleted = new System.Threading.SendOrPostCallback( this.OnCreateBatchOperationCompleted );
            }
            this.InvokeAsync( "CreateBatch", new object[ 0 ], this.CreateBatchOperationCompleted, userState );
        }

        private void OnCreateBatchOperationCompleted( object arg )
        {
            if ( ( this.CreateBatchCompleted != null ) )
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ( (System.Web.Services.Protocols.InvokeCompletedEventArgs)( arg ) );
                this.CreateBatchCompleted( this, new CreateBatchCompletedEventArgs( invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState ) );
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute( "ServerInfoHeaderValue", Direction = System.Web.Services.Protocols.SoapHeaderDirection.Out )]
        [System.Web.Services.Protocols.SoapHeaderAttribute( "BatchHeaderValue" )]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute( "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices/Can" +
            "celBatch", RequestNamespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices", ResponseNamespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped )]
        public void CancelBatch()
        {
            this.Invoke( "CancelBatch", new object[ 0 ] );
        }

        /// <remarks/>
        public void CancelBatchAsync()
        {
            this.CancelBatchAsync( null );
        }

        /// <remarks/>
        public void CancelBatchAsync( object userState )
        {
            if ( ( this.CancelBatchOperationCompleted == null ) )
            {
                this.CancelBatchOperationCompleted = new System.Threading.SendOrPostCallback( this.OnCancelBatchOperationCompleted );
            }
            this.InvokeAsync( "CancelBatch", new object[ 0 ], this.CancelBatchOperationCompleted, userState );
        }

        private void OnCancelBatchOperationCompleted( object arg )
        {
            if ( ( this.CancelBatchCompleted != null ) )
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ( (System.Web.Services.Protocols.InvokeCompletedEventArgs)( arg ) );
                this.CancelBatchCompleted( this, new System.ComponentModel.AsyncCompletedEventArgs( invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState ) );
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute( "ServerInfoHeaderValue", Direction = System.Web.Services.Protocols.SoapHeaderDirection.Out )]
        [System.Web.Services.Protocols.SoapHeaderAttribute( "BatchHeaderValue" )]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute( "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices/Exe" +
            "cuteBatch", RequestNamespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices", ResponseNamespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped )]
        public void ExecuteBatch()
        {
            this.Invoke( "ExecuteBatch", new object[ 0 ] );
        }

        /// <remarks/>
        public void ExecuteBatchAsync()
        {
            this.ExecuteBatchAsync( null );
        }

        /// <remarks/>
        public void ExecuteBatchAsync( object userState )
        {
            if ( ( this.ExecuteBatchOperationCompleted == null ) )
            {
                this.ExecuteBatchOperationCompleted = new System.Threading.SendOrPostCallback( this.OnExecuteBatchOperationCompleted );
            }
            this.InvokeAsync( "ExecuteBatch", new object[ 0 ], this.ExecuteBatchOperationCompleted, userState );
        }

        private void OnExecuteBatchOperationCompleted( object arg )
        {
            if ( ( this.ExecuteBatchCompleted != null ) )
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ( (System.Web.Services.Protocols.InvokeCompletedEventArgs)( arg ) );
                this.ExecuteBatchCompleted( this, new System.ComponentModel.AsyncCompletedEventArgs( invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState ) );
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute( "ServerInfoHeaderValue", Direction = System.Web.Services.Protocols.SoapHeaderDirection.Out )]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute( "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices/Get" +
            "SystemProperties", RequestNamespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices", ResponseNamespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped )]
        [return: System.Xml.Serialization.XmlArrayAttribute( "Values" )]
        public Property[] GetSystemProperties( Property[] Properties )
        {
            object[] results = this.Invoke( "GetSystemProperties", new object[] {
                        Properties} );
            return ( (Property[])( results[ 0 ] ) );
        }

        /// <remarks/>
        public void GetSystemPropertiesAsync( Property[] Properties )
        {
            this.GetSystemPropertiesAsync( Properties, null );
        }

        /// <remarks/>
        public void GetSystemPropertiesAsync( Property[] Properties, object userState )
        {
            if ( ( this.GetSystemPropertiesOperationCompleted == null ) )
            {
                this.GetSystemPropertiesOperationCompleted = new System.Threading.SendOrPostCallback( this.OnGetSystemPropertiesOperationCompleted );
            }
            this.InvokeAsync( "GetSystemProperties", new object[] {
                        Properties}, this.GetSystemPropertiesOperationCompleted, userState );
        }

        private void OnGetSystemPropertiesOperationCompleted( object arg )
        {
            if ( ( this.GetSystemPropertiesCompleted != null ) )
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ( (System.Web.Services.Protocols.InvokeCompletedEventArgs)( arg ) );
                this.GetSystemPropertiesCompleted( this, new GetSystemPropertiesCompletedEventArgs( invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState ) );
            }
        }

        /// <remarks/>
        [System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Design", "CA1024:UsePropertiesWhereAppropriate" ), System.Web.Services.Protocols.SoapHeaderAttribute( "ServerInfoHeaderValue", Direction = System.Web.Services.Protocols.SoapHeaderDirection.Out )]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute( "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices/Set" +
            "SystemProperties", RequestNamespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices", ResponseNamespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped )]
        public void SetSystemProperties( Property[] Properties )
        {
            this.Invoke( "SetSystemProperties", new object[] {
                        Properties} );
        }

        /// <remarks/>
        public void SetSystemPropertiesAsync( Property[] Properties )
        {
            this.SetSystemPropertiesAsync( Properties, null );
        }

        /// <remarks/>
        public void SetSystemPropertiesAsync( Property[] Properties, object userState )
        {
            if ( ( this.SetSystemPropertiesOperationCompleted == null ) )
            {
                this.SetSystemPropertiesOperationCompleted = new System.Threading.SendOrPostCallback( this.OnSetSystemPropertiesOperationCompleted );
            }
            this.InvokeAsync( "SetSystemProperties", new object[] {
                        Properties}, this.SetSystemPropertiesOperationCompleted, userState );
        }

        private void OnSetSystemPropertiesOperationCompleted( object arg )
        {
            if ( ( this.SetSystemPropertiesCompleted != null ) )
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ( (System.Web.Services.Protocols.InvokeCompletedEventArgs)( arg ) );
                this.SetSystemPropertiesCompleted( this, new System.ComponentModel.AsyncCompletedEventArgs( invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState ) );
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute( "ServerInfoHeaderValue", Direction = System.Web.Services.Protocols.SoapHeaderDirection.Out )]
        [System.Web.Services.Protocols.SoapHeaderAttribute( "BatchHeaderValue" )]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute( "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices/Del" +
            "eteItem", RequestNamespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices", ResponseNamespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped )]
        public void DeleteItem( string Item )
        {
            this.Invoke( "DeleteItem", new object[] {
                        Item} );
        }

        /// <remarks/>
        public void DeleteItemAsync( string Item )
        {
            this.DeleteItemAsync( Item, null );
        }

        /// <remarks/>
        public void DeleteItemAsync( string Item, object userState )
        {
            if ( ( this.DeleteItemOperationCompleted == null ) )
            {
                this.DeleteItemOperationCompleted = new System.Threading.SendOrPostCallback( this.OnDeleteItemOperationCompleted );
            }
            this.InvokeAsync( "DeleteItem", new object[] {
                        Item}, this.DeleteItemOperationCompleted, userState );
        }

        private void OnDeleteItemOperationCompleted( object arg )
        {
            if ( ( this.DeleteItemCompleted != null ) )
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ( (System.Web.Services.Protocols.InvokeCompletedEventArgs)( arg ) );
                this.DeleteItemCompleted( this, new System.ComponentModel.AsyncCompletedEventArgs( invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState ) );
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute( "ServerInfoHeaderValue", Direction = System.Web.Services.Protocols.SoapHeaderDirection.Out )]
        [System.Web.Services.Protocols.SoapHeaderAttribute( "BatchHeaderValue" )]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute( "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices/Mov" +
            "eItem", RequestNamespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices", ResponseNamespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped )]
        public void MoveItem( string Item, string Target )
        {
            this.Invoke( "MoveItem", new object[] {
                        Item,
                        Target} );
        }

        /// <remarks/>
        public void MoveItemAsync( string Item, string Target )
        {
            this.MoveItemAsync( Item, Target, null );
        }

        /// <remarks/>
        public void MoveItemAsync( string Item, string Target, object userState )
        {
            if ( ( this.MoveItemOperationCompleted == null ) )
            {
                this.MoveItemOperationCompleted = new System.Threading.SendOrPostCallback( this.OnMoveItemOperationCompleted );
            }
            this.InvokeAsync( "MoveItem", new object[] {
                        Item,
                        Target}, this.MoveItemOperationCompleted, userState );
        }

        private void OnMoveItemOperationCompleted( object arg )
        {
            if ( ( this.MoveItemCompleted != null ) )
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ( (System.Web.Services.Protocols.InvokeCompletedEventArgs)( arg ) );
                this.MoveItemCompleted( this, new System.ComponentModel.AsyncCompletedEventArgs( invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState ) );
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute( "ServerInfoHeaderValue", Direction = System.Web.Services.Protocols.SoapHeaderDirection.Out )]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute( "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices/Lis" +
            "tChildren", RequestNamespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices", ResponseNamespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped )]
        [return: System.Xml.Serialization.XmlArrayAttribute( "CatalogItems" )]
        public CatalogItem[] ListChildren( string Item, bool Recursive )
        {
            object[] results = this.Invoke( "ListChildren", new object[] {
                        Item,
                        Recursive} );
            return ( (CatalogItem[])( results[ 0 ] ) );
        }

        /// <remarks/>
        public void ListChildrenAsync( string Item, bool Recursive )
        {
            this.ListChildrenAsync( Item, Recursive, null );
        }

        /// <remarks/>
        public void ListChildrenAsync( string Item, bool Recursive, object userState )
        {
            if ( ( this.ListChildrenOperationCompleted == null ) )
            {
                this.ListChildrenOperationCompleted = new System.Threading.SendOrPostCallback( this.OnListChildrenOperationCompleted );
            }
            this.InvokeAsync( "ListChildren", new object[] {
                        Item,
                        Recursive}, this.ListChildrenOperationCompleted, userState );
        }

        private void OnListChildrenOperationCompleted( object arg )
        {
            if ( ( this.ListChildrenCompleted != null ) )
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ( (System.Web.Services.Protocols.InvokeCompletedEventArgs)( arg ) );
                this.ListChildrenCompleted( this, new ListChildrenCompletedEventArgs( invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState ) );
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute( "ServerInfoHeaderValue", Direction = System.Web.Services.Protocols.SoapHeaderDirection.Out )]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute( "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices/Lis" +
            "tDependentItems", RequestNamespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices", ResponseNamespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped )]
        [return: System.Xml.Serialization.XmlArrayAttribute( "CatalogItems" )]
        public CatalogItem[] ListDependentItems( string Item )
        {
            object[] results = this.Invoke( "ListDependentItems", new object[] {
                        Item} );
            return ( (CatalogItem[])( results[ 0 ] ) );
        }

        /// <remarks/>
        public void ListDependentItemsAsync( string Item )
        {
            this.ListDependentItemsAsync( Item, null );
        }

        /// <remarks/>
        public void ListDependentItemsAsync( string Item, object userState )
        {
            if ( ( this.ListDependentItemsOperationCompleted == null ) )
            {
                this.ListDependentItemsOperationCompleted = new System.Threading.SendOrPostCallback( this.OnListDependentItemsOperationCompleted );
            }
            this.InvokeAsync( "ListDependentItems", new object[] {
                        Item}, this.ListDependentItemsOperationCompleted, userState );
        }

        private void OnListDependentItemsOperationCompleted( object arg )
        {
            if ( ( this.ListDependentItemsCompleted != null ) )
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ( (System.Web.Services.Protocols.InvokeCompletedEventArgs)( arg ) );
                this.ListDependentItemsCompleted( this, new ListDependentItemsCompletedEventArgs( invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState ) );
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute( "ServerInfoHeaderValue", Direction = System.Web.Services.Protocols.SoapHeaderDirection.Out )]
        [System.Web.Services.Protocols.SoapHeaderAttribute( "ItemNamespaceHeaderValue" )]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute( "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices/Get" +
            "Properties", RequestNamespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices", ResponseNamespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped )]
        [return: System.Xml.Serialization.XmlArrayAttribute( "Values" )]
        public Property[] GetProperties( string Item, Property[] Properties )
        {
            object[] results = this.Invoke( "GetProperties", new object[] {
                        Item,
                        Properties} );
            return ( (Property[])( results[ 0 ] ) );
        }

        /// <remarks/>
        public void GetPropertiesAsync( string Item, Property[] Properties )
        {
            this.GetPropertiesAsync( Item, Properties, null );
        }

        /// <remarks/>
        public void GetPropertiesAsync( string Item, Property[] Properties, object userState )
        {
            if ( ( this.GetPropertiesOperationCompleted == null ) )
            {
                this.GetPropertiesOperationCompleted = new System.Threading.SendOrPostCallback( this.OnGetPropertiesOperationCompleted );
            }
            this.InvokeAsync( "GetProperties", new object[] {
                        Item,
                        Properties}, this.GetPropertiesOperationCompleted, userState );
        }

        private void OnGetPropertiesOperationCompleted( object arg )
        {
            if ( ( this.GetPropertiesCompleted != null ) )
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ( (System.Web.Services.Protocols.InvokeCompletedEventArgs)( arg ) );
                this.GetPropertiesCompleted( this, new GetPropertiesCompletedEventArgs( invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState ) );
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute( "ServerInfoHeaderValue", Direction = System.Web.Services.Protocols.SoapHeaderDirection.Out )]
        [System.Web.Services.Protocols.SoapHeaderAttribute( "BatchHeaderValue" )]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute( "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices/Set" +
            "Properties", RequestNamespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices", ResponseNamespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped )]
        public void SetProperties( string Item, Property[] Properties )
        {
            this.Invoke( "SetProperties", new object[] {
                        Item,
                        Properties} );
        }

        /// <remarks/>
        public void SetPropertiesAsync( string Item, Property[] Properties )
        {
            this.SetPropertiesAsync( Item, Properties, null );
        }

        /// <remarks/>
        public void SetPropertiesAsync( string Item, Property[] Properties, object userState )
        {
            if ( ( this.SetPropertiesOperationCompleted == null ) )
            {
                this.SetPropertiesOperationCompleted = new System.Threading.SendOrPostCallback( this.OnSetPropertiesOperationCompleted );
            }
            this.InvokeAsync( "SetProperties", new object[] {
                        Item,
                        Properties}, this.SetPropertiesOperationCompleted, userState );
        }

        private void OnSetPropertiesOperationCompleted( object arg )
        {
            if ( ( this.SetPropertiesCompleted != null ) )
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ( (System.Web.Services.Protocols.InvokeCompletedEventArgs)( arg ) );
                this.SetPropertiesCompleted( this, new System.ComponentModel.AsyncCompletedEventArgs( invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState ) );
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute( "ServerInfoHeaderValue", Direction = System.Web.Services.Protocols.SoapHeaderDirection.Out )]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute( "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices/Get" +
            "ItemType", RequestNamespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices", ResponseNamespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped )]
        [return: System.Xml.Serialization.XmlElementAttribute( "Type" )]
        public ItemTypeEnum GetItemType( string Item )
        {
            object[] results = this.Invoke( "GetItemType", new object[] {
                        Item} );
            return ( (ItemTypeEnum)( results[ 0 ] ) );
        }

        /// <remarks/>
        public void GetItemTypeAsync( string Item )
        {
            this.GetItemTypeAsync( Item, null );
        }

        /// <remarks/>
        public void GetItemTypeAsync( string Item, object userState )
        {
            if ( ( this.GetItemTypeOperationCompleted == null ) )
            {
                this.GetItemTypeOperationCompleted = new System.Threading.SendOrPostCallback( this.OnGetItemTypeOperationCompleted );
            }
            this.InvokeAsync( "GetItemType", new object[] {
                        Item}, this.GetItemTypeOperationCompleted, userState );
        }

        private void OnGetItemTypeOperationCompleted( object arg )
        {
            if ( ( this.GetItemTypeCompleted != null ) )
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ( (System.Web.Services.Protocols.InvokeCompletedEventArgs)( arg ) );
                this.GetItemTypeCompleted( this, new GetItemTypeCompletedEventArgs( invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState ) );
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute( "ServerInfoHeaderValue", Direction = System.Web.Services.Protocols.SoapHeaderDirection.Out )]
        [System.Web.Services.Protocols.SoapHeaderAttribute( "BatchHeaderValue" )]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute( "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices/Cre" +
            "ateFolder", RequestNamespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices", ResponseNamespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped )]
        public void CreateFolder( string Folder, string Parent, Property[] Properties )
        {
            this.Invoke( "CreateFolder", new object[] {
                        Folder,
                        Parent,
                        Properties} );
        }

        /// <remarks/>
        public void CreateFolderAsync( string Folder, string Parent, Property[] Properties )
        {
            this.CreateFolderAsync( Folder, Parent, Properties, null );
        }

        /// <remarks/>
        public void CreateFolderAsync( string Folder, string Parent, Property[] Properties, object userState )
        {
            if ( ( this.CreateFolderOperationCompleted == null ) )
            {
                this.CreateFolderOperationCompleted = new System.Threading.SendOrPostCallback( this.OnCreateFolderOperationCompleted );
            }
            this.InvokeAsync( "CreateFolder", new object[] {
                        Folder,
                        Parent,
                        Properties}, this.CreateFolderOperationCompleted, userState );
        }

        private void OnCreateFolderOperationCompleted( object arg )
        {
            if ( ( this.CreateFolderCompleted != null ) )
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ( (System.Web.Services.Protocols.InvokeCompletedEventArgs)( arg ) );
                this.CreateFolderCompleted( this, new System.ComponentModel.AsyncCompletedEventArgs( invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState ) );
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute( "ServerInfoHeaderValue", Direction = System.Web.Services.Protocols.SoapHeaderDirection.Out )]
        [System.Web.Services.Protocols.SoapHeaderAttribute( "BatchHeaderValue" )]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute( "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices/Cre" +
            "ateReport", RequestNamespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices", ResponseNamespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped )]
        [return: System.Xml.Serialization.XmlArrayAttribute( "Warnings" )]
        public Warning[] CreateReport( string Report, string Parent, bool Overwrite, [System.Xml.Serialization.XmlElementAttribute( DataType = "base64Binary" )] byte[] Definition, Property[] Properties )
        {
            object[] results = this.Invoke( "CreateReport", new object[] {
                        Report,
                        Parent,
                        Overwrite,
                        Definition,
                        Properties} );
            return ( (Warning[])( results[ 0 ] ) );
        }

        /// <remarks/>
        public void CreateReportAsync( string Report, string Parent, bool Overwrite, byte[] Definition, Property[] Properties )
        {
            this.CreateReportAsync( Report, Parent, Overwrite, Definition, Properties, null );
        }

        /// <remarks/>
        public void CreateReportAsync( string Report, string Parent, bool Overwrite, byte[] Definition, Property[] Properties, object userState )
        {
            if ( ( this.CreateReportOperationCompleted == null ) )
            {
                this.CreateReportOperationCompleted = new System.Threading.SendOrPostCallback( this.OnCreateReportOperationCompleted );
            }
            this.InvokeAsync( "CreateReport", new object[] {
                        Report,
                        Parent,
                        Overwrite,
                        Definition,
                        Properties}, this.CreateReportOperationCompleted, userState );
        }

        private void OnCreateReportOperationCompleted( object arg )
        {
            if ( ( this.CreateReportCompleted != null ) )
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ( (System.Web.Services.Protocols.InvokeCompletedEventArgs)( arg ) );
                this.CreateReportCompleted( this, new CreateReportCompletedEventArgs( invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState ) );
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute( "ServerInfoHeaderValue", Direction = System.Web.Services.Protocols.SoapHeaderDirection.Out )]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute( "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices/Get" +
            "ReportDefinition", RequestNamespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices", ResponseNamespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped )]
        [return: System.Xml.Serialization.XmlElementAttribute( "Definition", DataType = "base64Binary" )]
        public byte[] GetReportDefinition( string Report )
        {
            object[] results = this.Invoke( "GetReportDefinition", new object[] {
                        Report} );
            return ( (byte[])( results[ 0 ] ) );
        }

        /// <remarks/>
        public void GetReportDefinitionAsync( string Report )
        {
            this.GetReportDefinitionAsync( Report, null );
        }

        /// <remarks/>
        public void GetReportDefinitionAsync( string Report, object userState )
        {
            if ( ( this.GetReportDefinitionOperationCompleted == null ) )
            {
                this.GetReportDefinitionOperationCompleted = new System.Threading.SendOrPostCallback( this.OnGetReportDefinitionOperationCompleted );
            }
            this.InvokeAsync( "GetReportDefinition", new object[] {
                        Report}, this.GetReportDefinitionOperationCompleted, userState );
        }

        private void OnGetReportDefinitionOperationCompleted( object arg )
        {
            if ( ( this.GetReportDefinitionCompleted != null ) )
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ( (System.Web.Services.Protocols.InvokeCompletedEventArgs)( arg ) );
                this.GetReportDefinitionCompleted( this, new GetReportDefinitionCompletedEventArgs( invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState ) );
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute( "ServerInfoHeaderValue", Direction = System.Web.Services.Protocols.SoapHeaderDirection.Out )]
        [System.Web.Services.Protocols.SoapHeaderAttribute( "BatchHeaderValue" )]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute( "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices/Set" +
            "ReportDefinition", RequestNamespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices", ResponseNamespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped )]
        [return: System.Xml.Serialization.XmlArrayAttribute( "Warnings" )]
        public Warning[] SetReportDefinition( string Report, [System.Xml.Serialization.XmlElementAttribute( DataType = "base64Binary" )] byte[] Definition )
        {
            object[] results = this.Invoke( "SetReportDefinition", new object[] {
                        Report,
                        Definition} );
            return ( (Warning[])( results[ 0 ] ) );
        }

        /// <remarks/>
        public void SetReportDefinitionAsync( string Report, byte[] Definition )
        {
            this.SetReportDefinitionAsync( Report, Definition, null );
        }

        /// <remarks/>
        public void SetReportDefinitionAsync( string Report, byte[] Definition, object userState )
        {
            if ( ( this.SetReportDefinitionOperationCompleted == null ) )
            {
                this.SetReportDefinitionOperationCompleted = new System.Threading.SendOrPostCallback( this.OnSetReportDefinitionOperationCompleted );
            }
            this.InvokeAsync( "SetReportDefinition", new object[] {
                        Report,
                        Definition}, this.SetReportDefinitionOperationCompleted, userState );
        }

        private void OnSetReportDefinitionOperationCompleted( object arg )
        {
            if ( ( this.SetReportDefinitionCompleted != null ) )
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ( (System.Web.Services.Protocols.InvokeCompletedEventArgs)( arg ) );
                this.SetReportDefinitionCompleted( this, new SetReportDefinitionCompletedEventArgs( invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState ) );
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute( "ServerInfoHeaderValue", Direction = System.Web.Services.Protocols.SoapHeaderDirection.Out )]
        [System.Web.Services.Protocols.SoapHeaderAttribute( "BatchHeaderValue" )]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute( "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices/Cre" +
            "ateResource", RequestNamespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices", ResponseNamespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped )]
        public void CreateResource( string Resource, string Parent, bool Overwrite, [System.Xml.Serialization.XmlElementAttribute( DataType = "base64Binary" )] byte[] Contents, string MimeType, Property[] Properties )
        {
            this.Invoke( "CreateResource", new object[] {
                        Resource,
                        Parent,
                        Overwrite,
                        Contents,
                        MimeType,
                        Properties} );
        }

        /// <remarks/>
        public void CreateResourceAsync( string Resource, string Parent, bool Overwrite, byte[] Contents, string MimeType, Property[] Properties )
        {
            this.CreateResourceAsync( Resource, Parent, Overwrite, Contents, MimeType, Properties, null );
        }

        /// <remarks/>
        public void CreateResourceAsync( string Resource, string Parent, bool Overwrite, byte[] Contents, string MimeType, Property[] Properties, object userState )
        {
            if ( ( this.CreateResourceOperationCompleted == null ) )
            {
                this.CreateResourceOperationCompleted = new System.Threading.SendOrPostCallback( this.OnCreateResourceOperationCompleted );
            }
            this.InvokeAsync( "CreateResource", new object[] {
                        Resource,
                        Parent,
                        Overwrite,
                        Contents,
                        MimeType,
                        Properties}, this.CreateResourceOperationCompleted, userState );
        }

        private void OnCreateResourceOperationCompleted( object arg )
        {
            if ( ( this.CreateResourceCompleted != null ) )
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ( (System.Web.Services.Protocols.InvokeCompletedEventArgs)( arg ) );
                this.CreateResourceCompleted( this, new System.ComponentModel.AsyncCompletedEventArgs( invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState ) );
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute( "ServerInfoHeaderValue", Direction = System.Web.Services.Protocols.SoapHeaderDirection.Out )]
        [System.Web.Services.Protocols.SoapHeaderAttribute( "BatchHeaderValue" )]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute( "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices/Set" +
            "ResourceContents", RequestNamespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices", ResponseNamespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped )]
        public void SetResourceContents( string Resource, [System.Xml.Serialization.XmlElementAttribute( DataType = "base64Binary" )] byte[] Contents, string MimeType )
        {
            this.Invoke( "SetResourceContents", new object[] {
                        Resource,
                        Contents,
                        MimeType} );
        }

        /// <remarks/>
        public void SetResourceContentsAsync( string Resource, byte[] Contents, string MimeType )
        {
            this.SetResourceContentsAsync( Resource, Contents, MimeType, null );
        }

        /// <remarks/>
        public void SetResourceContentsAsync( string Resource, byte[] Contents, string MimeType, object userState )
        {
            if ( ( this.SetResourceContentsOperationCompleted == null ) )
            {
                this.SetResourceContentsOperationCompleted = new System.Threading.SendOrPostCallback( this.OnSetResourceContentsOperationCompleted );
            }
            this.InvokeAsync( "SetResourceContents", new object[] {
                        Resource,
                        Contents,
                        MimeType}, this.SetResourceContentsOperationCompleted, userState );
        }

        private void OnSetResourceContentsOperationCompleted( object arg )
        {
            if ( ( this.SetResourceContentsCompleted != null ) )
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ( (System.Web.Services.Protocols.InvokeCompletedEventArgs)( arg ) );
                this.SetResourceContentsCompleted( this, new System.ComponentModel.AsyncCompletedEventArgs( invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState ) );
            }
        }

        /// <remarks/>
        [System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Design", "CA1021:AvoidOutParameters", MessageId = "1#" ), System.Web.Services.Protocols.SoapHeaderAttribute( "ServerInfoHeaderValue", Direction = System.Web.Services.Protocols.SoapHeaderDirection.Out )]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute( "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices/Get" +
            "ResourceContents", RequestNamespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices", ResponseNamespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped )]
        [return: System.Xml.Serialization.XmlElementAttribute( "Contents", DataType = "base64Binary" )]
        public byte[] GetResourceContents( string Resource, out string MimeType )
        {
            object[] results = this.Invoke( "GetResourceContents", new object[] {
                        Resource} );
            MimeType = ( (string)( results[ 1 ] ) );
            return ( (byte[])( results[ 0 ] ) );
        }

        /// <remarks/>
        public void GetResourceContentsAsync( string Resource )
        {
            this.GetResourceContentsAsync( Resource, null );
        }

        /// <remarks/>
        public void GetResourceContentsAsync( string Resource, object userState )
        {
            if ( ( this.GetResourceContentsOperationCompleted == null ) )
            {
                this.GetResourceContentsOperationCompleted = new System.Threading.SendOrPostCallback( this.OnGetResourceContentsOperationCompleted );
            }
            this.InvokeAsync( "GetResourceContents", new object[] {
                        Resource}, this.GetResourceContentsOperationCompleted, userState );
        }

        private void OnGetResourceContentsOperationCompleted( object arg )
        {
            if ( ( this.GetResourceContentsCompleted != null ) )
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ( (System.Web.Services.Protocols.InvokeCompletedEventArgs)( arg ) );
                this.GetResourceContentsCompleted( this, new GetResourceContentsCompletedEventArgs( invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState ) );
            }
        }

        /// <remarks/>
        [System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Naming", "CA1706:ShortAcronymsShouldBeUppercase", MessageId = "1#" ), System.Web.Services.Protocols.SoapHeaderAttribute( "ServerInfoHeaderValue", Direction = System.Web.Services.Protocols.SoapHeaderDirection.Out )]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute( "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices/Get" +
            "ReportParameters", RequestNamespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices", ResponseNamespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped )]
        [return: System.Xml.Serialization.XmlArrayAttribute( "Parameters" )]
        public ReportParameter[] GetReportParameters( string Report, string HistoryID, bool ForRendering, ParameterValue[] Values, DataSourceCredentials[] Credentials )
        {
            object[] results = this.Invoke( "GetReportParameters", new object[] {
                        Report,
                        HistoryID,
                        ForRendering,
                        Values,
                        Credentials} );
            return ( (ReportParameter[])( results[ 0 ] ) );
        }

        /// <remarks/>
        public void GetReportParametersAsync( string Report, string HistoryID, bool ForRendering, ParameterValue[] Values, DataSourceCredentials[] Credentials )
        {
            this.GetReportParametersAsync( Report, HistoryID, ForRendering, Values, Credentials, null );
        }

        /// <remarks/>
        public void GetReportParametersAsync( string Report, string HistoryID, bool ForRendering, ParameterValue[] Values, DataSourceCredentials[] Credentials, object userState )
        {
            if ( ( this.GetReportParametersOperationCompleted == null ) )
            {
                this.GetReportParametersOperationCompleted = new System.Threading.SendOrPostCallback( this.OnGetReportParametersOperationCompleted );
            }
            this.InvokeAsync( "GetReportParameters", new object[] {
                        Report,
                        HistoryID,
                        ForRendering,
                        Values,
                        Credentials}, this.GetReportParametersOperationCompleted, userState );
        }

        private void OnGetReportParametersOperationCompleted( object arg )
        {
            if ( ( this.GetReportParametersCompleted != null ) )
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ( (System.Web.Services.Protocols.InvokeCompletedEventArgs)( arg ) );
                this.GetReportParametersCompleted( this, new GetReportParametersCompletedEventArgs( invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState ) );
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute( "ServerInfoHeaderValue", Direction = System.Web.Services.Protocols.SoapHeaderDirection.Out )]
        [System.Web.Services.Protocols.SoapHeaderAttribute( "BatchHeaderValue" )]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute( "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices/Set" +
            "ReportParameters", RequestNamespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices", ResponseNamespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped )]
        public void SetReportParameters( string Report, ReportParameter[] Parameters )
        {
            this.Invoke( "SetReportParameters", new object[] {
                        Report,
                        Parameters} );
        }

        /// <remarks/>
        public void SetReportParametersAsync( string Report, ReportParameter[] Parameters )
        {
            this.SetReportParametersAsync( Report, Parameters, null );
        }

        /// <remarks/>
        public void SetReportParametersAsync( string Report, ReportParameter[] Parameters, object userState )
        {
            if ( ( this.SetReportParametersOperationCompleted == null ) )
            {
                this.SetReportParametersOperationCompleted = new System.Threading.SendOrPostCallback( this.OnSetReportParametersOperationCompleted );
            }
            this.InvokeAsync( "SetReportParameters", new object[] {
                        Report,
                        Parameters}, this.SetReportParametersOperationCompleted, userState );
        }

        private void OnSetReportParametersOperationCompleted( object arg )
        {
            if ( ( this.SetReportParametersCompleted != null ) )
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ( (System.Web.Services.Protocols.InvokeCompletedEventArgs)( arg ) );
                this.SetReportParametersCompleted( this, new System.ComponentModel.AsyncCompletedEventArgs( invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState ) );
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute( "ServerInfoHeaderValue", Direction = System.Web.Services.Protocols.SoapHeaderDirection.Out )]
        [System.Web.Services.Protocols.SoapHeaderAttribute( "BatchHeaderValue" )]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute( "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices/Cre" +
            "ateLinkedReport", RequestNamespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices", ResponseNamespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped )]
        public void CreateLinkedReport( string Report, string Parent, string Link, Property[] Properties )
        {
            this.Invoke( "CreateLinkedReport", new object[] {
                        Report,
                        Parent,
                        Link,
                        Properties} );
        }

        /// <remarks/>
        public void CreateLinkedReportAsync( string Report, string Parent, string Link, Property[] Properties )
        {
            this.CreateLinkedReportAsync( Report, Parent, Link, Properties, null );
        }

        /// <remarks/>
        public void CreateLinkedReportAsync( string Report, string Parent, string Link, Property[] Properties, object userState )
        {
            if ( ( this.CreateLinkedReportOperationCompleted == null ) )
            {
                this.CreateLinkedReportOperationCompleted = new System.Threading.SendOrPostCallback( this.OnCreateLinkedReportOperationCompleted );
            }
            this.InvokeAsync( "CreateLinkedReport", new object[] {
                        Report,
                        Parent,
                        Link,
                        Properties}, this.CreateLinkedReportOperationCompleted, userState );
        }

        private void OnCreateLinkedReportOperationCompleted( object arg )
        {
            if ( ( this.CreateLinkedReportCompleted != null ) )
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ( (System.Web.Services.Protocols.InvokeCompletedEventArgs)( arg ) );
                this.CreateLinkedReportCompleted( this, new System.ComponentModel.AsyncCompletedEventArgs( invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState ) );
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute( "ServerInfoHeaderValue", Direction = System.Web.Services.Protocols.SoapHeaderDirection.Out )]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute( "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices/Get" +
            "ReportLink", RequestNamespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices", ResponseNamespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped )]
        [return: System.Xml.Serialization.XmlElementAttribute( "Link" )]
        public string GetReportLink( string Report )
        {
            object[] results = this.Invoke( "GetReportLink", new object[] {
                        Report} );
            return ( (string)( results[ 0 ] ) );
        }

        /// <remarks/>
        public void GetReportLinkAsync( string Report )
        {
            this.GetReportLinkAsync( Report, null );
        }

        /// <remarks/>
        public void GetReportLinkAsync( string Report, object userState )
        {
            if ( ( this.GetReportLinkOperationCompleted == null ) )
            {
                this.GetReportLinkOperationCompleted = new System.Threading.SendOrPostCallback( this.OnGetReportLinkOperationCompleted );
            }
            this.InvokeAsync( "GetReportLink", new object[] {
                        Report}, this.GetReportLinkOperationCompleted, userState );
        }

        private void OnGetReportLinkOperationCompleted( object arg )
        {
            if ( ( this.GetReportLinkCompleted != null ) )
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ( (System.Web.Services.Protocols.InvokeCompletedEventArgs)( arg ) );
                this.GetReportLinkCompleted( this, new GetReportLinkCompletedEventArgs( invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState ) );
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute( "ServerInfoHeaderValue", Direction = System.Web.Services.Protocols.SoapHeaderDirection.Out )]
        [System.Web.Services.Protocols.SoapHeaderAttribute( "BatchHeaderValue" )]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute( "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices/Set" +
            "ReportLink", RequestNamespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices", ResponseNamespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped )]
        public void SetReportLink( string Report, string Link )
        {
            this.Invoke( "SetReportLink", new object[] {
                        Report,
                        Link} );
        }

        /// <remarks/>
        public void SetReportLinkAsync( string Report, string Link )
        {
            this.SetReportLinkAsync( Report, Link, null );
        }

        /// <remarks/>
        public void SetReportLinkAsync( string Report, string Link, object userState )
        {
            if ( ( this.SetReportLinkOperationCompleted == null ) )
            {
                this.SetReportLinkOperationCompleted = new System.Threading.SendOrPostCallback( this.OnSetReportLinkOperationCompleted );
            }
            this.InvokeAsync( "SetReportLink", new object[] {
                        Report,
                        Link}, this.SetReportLinkOperationCompleted, userState );
        }

        private void OnSetReportLinkOperationCompleted( object arg )
        {
            if ( ( this.SetReportLinkCompleted != null ) )
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ( (System.Web.Services.Protocols.InvokeCompletedEventArgs)( arg ) );
                this.SetReportLinkCompleted( this, new System.ComponentModel.AsyncCompletedEventArgs( invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState ) );
            }
        }

        /// <remarks/>
        [System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Design", "CA1021:AvoidOutParameters", MessageId = "2#" ), System.Web.Services.Protocols.SoapHeaderAttribute( "ServerInfoHeaderValue", Direction = System.Web.Services.Protocols.SoapHeaderDirection.Out )]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute( "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices/Get" +
            "RenderResource", RequestNamespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices", ResponseNamespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped )]
        [return: System.Xml.Serialization.XmlElementAttribute( "Result", DataType = "base64Binary" )]
        public byte[] GetRenderResource( string Format, string DeviceInfo, out string MimeType )
        {
            object[] results = this.Invoke( "GetRenderResource", new object[] {
                        Format,
                        DeviceInfo} );
            MimeType = ( (string)( results[ 1 ] ) );
            return ( (byte[])( results[ 0 ] ) );
        }

        /// <remarks/>
        public void GetRenderResourceAsync( string Format, string DeviceInfo )
        {
            this.GetRenderResourceAsync( Format, DeviceInfo, null );
        }

        /// <remarks/>
        public void GetRenderResourceAsync( string Format, string DeviceInfo, object userState )
        {
            if ( ( this.GetRenderResourceOperationCompleted == null ) )
            {
                this.GetRenderResourceOperationCompleted = new System.Threading.SendOrPostCallback( this.OnGetRenderResourceOperationCompleted );
            }
            this.InvokeAsync( "GetRenderResource", new object[] {
                        Format,
                        DeviceInfo}, this.GetRenderResourceOperationCompleted, userState );
        }

        private void OnGetRenderResourceOperationCompleted( object arg )
        {
            if ( ( this.GetRenderResourceCompleted != null ) )
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ( (System.Web.Services.Protocols.InvokeCompletedEventArgs)( arg ) );
                this.GetRenderResourceCompleted( this, new GetRenderResourceCompletedEventArgs( invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState ) );
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute( "ServerInfoHeaderValue", Direction = System.Web.Services.Protocols.SoapHeaderDirection.Out )]
        [System.Web.Services.Protocols.SoapHeaderAttribute( "BatchHeaderValue" )]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute( "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices/Set" +
            "ExecutionOptions", RequestNamespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices", ResponseNamespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped )]
        public void SetExecutionOptions( string Report, ExecutionSettingEnum ExecutionSetting, [System.Xml.Serialization.XmlElementAttribute( "ScheduleReference", typeof( ScheduleReference ) )] [System.Xml.Serialization.XmlElementAttribute( "ScheduleDefinition", typeof( ScheduleDefinition ) )] [System.Xml.Serialization.XmlElementAttribute( "NoSchedule", typeof( NoSchedule ) )] ScheduleDefinitionOrReference Item )
        {
            this.Invoke( "SetExecutionOptions", new object[] {
                        Report,
                        ExecutionSetting,
                        Item} );
        }

        /// <remarks/>
        public void SetExecutionOptionsAsync( string Report, ExecutionSettingEnum ExecutionSetting, ScheduleDefinitionOrReference Item )
        {
            this.SetExecutionOptionsAsync( Report, ExecutionSetting, Item, null );
        }

        /// <remarks/>
        public void SetExecutionOptionsAsync( string Report, ExecutionSettingEnum ExecutionSetting, ScheduleDefinitionOrReference Item, object userState )
        {
            if ( ( this.SetExecutionOptionsOperationCompleted == null ) )
            {
                this.SetExecutionOptionsOperationCompleted = new System.Threading.SendOrPostCallback( this.OnSetExecutionOptionsOperationCompleted );
            }
            this.InvokeAsync( "SetExecutionOptions", new object[] {
                        Report,
                        ExecutionSetting,
                        Item}, this.SetExecutionOptionsOperationCompleted, userState );
        }

        private void OnSetExecutionOptionsOperationCompleted( object arg )
        {
            if ( ( this.SetExecutionOptionsCompleted != null ) )
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ( (System.Web.Services.Protocols.InvokeCompletedEventArgs)( arg ) );
                this.SetExecutionOptionsCompleted( this, new System.ComponentModel.AsyncCompletedEventArgs( invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState ) );
            }
        }

        /// <remarks/>
        [System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Design", "CA1021:AvoidOutParameters", MessageId = "1#" ), System.Web.Services.Protocols.SoapHeaderAttribute( "ServerInfoHeaderValue", Direction = System.Web.Services.Protocols.SoapHeaderDirection.Out )]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute( "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices/Get" +
            "ExecutionOptions", RequestNamespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices", ResponseNamespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped )]
        [return: System.Xml.Serialization.XmlElementAttribute( "ExecutionSetting" )]
        public ExecutionSettingEnum GetExecutionOptions( string Report, [System.Xml.Serialization.XmlElementAttribute( "ScheduleReference", typeof( ScheduleReference ) )] [System.Xml.Serialization.XmlElementAttribute( "ScheduleDefinition", typeof( ScheduleDefinition ) )] [System.Xml.Serialization.XmlElementAttribute( "NoSchedule", typeof( NoSchedule ) )] out ScheduleDefinitionOrReference Item )
        {
            object[] results = this.Invoke( "GetExecutionOptions", new object[] {
                        Report} );
            Item = ( (ScheduleDefinitionOrReference)( results[ 1 ] ) );
            return ( (ExecutionSettingEnum)( results[ 0 ] ) );
        }

        /// <remarks/>
        public void GetExecutionOptionsAsync( string Report )
        {
            this.GetExecutionOptionsAsync( Report, null );
        }

        /// <remarks/>
        public void GetExecutionOptionsAsync( string Report, object userState )
        {
            if ( ( this.GetExecutionOptionsOperationCompleted == null ) )
            {
                this.GetExecutionOptionsOperationCompleted = new System.Threading.SendOrPostCallback( this.OnGetExecutionOptionsOperationCompleted );
            }
            this.InvokeAsync( "GetExecutionOptions", new object[] {
                        Report}, this.GetExecutionOptionsOperationCompleted, userState );
        }

        private void OnGetExecutionOptionsOperationCompleted( object arg )
        {
            if ( ( this.GetExecutionOptionsCompleted != null ) )
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ( (System.Web.Services.Protocols.InvokeCompletedEventArgs)( arg ) );
                this.GetExecutionOptionsCompleted( this, new GetExecutionOptionsCompletedEventArgs( invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState ) );
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute( "ServerInfoHeaderValue", Direction = System.Web.Services.Protocols.SoapHeaderDirection.Out )]
        [System.Web.Services.Protocols.SoapHeaderAttribute( "BatchHeaderValue" )]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute( "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices/Set" +
            "CacheOptions", RequestNamespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices", ResponseNamespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped )]
        public void SetCacheOptions( string Report, bool CacheReport, [System.Xml.Serialization.XmlElementAttribute( "TimeExpiration", typeof( TimeExpiration ) )] [System.Xml.Serialization.XmlElementAttribute( "ScheduleExpiration", typeof( ScheduleExpiration ) )] ExpirationDefinition Item )
        {
            this.Invoke( "SetCacheOptions", new object[] {
                        Report,
                        CacheReport,
                        Item} );
        }

        /// <remarks/>
        public void SetCacheOptionsAsync( string Report, bool CacheReport, ExpirationDefinition Item )
        {
            this.SetCacheOptionsAsync( Report, CacheReport, Item, null );
        }

        /// <remarks/>
        public void SetCacheOptionsAsync( string Report, bool CacheReport, ExpirationDefinition Item, object userState )
        {
            if ( ( this.SetCacheOptionsOperationCompleted == null ) )
            {
                this.SetCacheOptionsOperationCompleted = new System.Threading.SendOrPostCallback( this.OnSetCacheOptionsOperationCompleted );
            }
            this.InvokeAsync( "SetCacheOptions", new object[] {
                        Report,
                        CacheReport,
                        Item}, this.SetCacheOptionsOperationCompleted, userState );
        }

        private void OnSetCacheOptionsOperationCompleted( object arg )
        {
            if ( ( this.SetCacheOptionsCompleted != null ) )
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ( (System.Web.Services.Protocols.InvokeCompletedEventArgs)( arg ) );
                this.SetCacheOptionsCompleted( this, new System.ComponentModel.AsyncCompletedEventArgs( invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState ) );
            }
        }

        /// <remarks/>
        [System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Design", "CA1021:AvoidOutParameters", MessageId = "1#" ), System.Web.Services.Protocols.SoapHeaderAttribute( "ServerInfoHeaderValue", Direction = System.Web.Services.Protocols.SoapHeaderDirection.Out )]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute( "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices/Get" +
            "CacheOptions", RequestNamespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices", ResponseNamespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped )]
        [return: System.Xml.Serialization.XmlElementAttribute( "CacheReport" )]
        public bool GetCacheOptions( string Report, [System.Xml.Serialization.XmlElementAttribute( "TimeExpiration", typeof( TimeExpiration ) )] [System.Xml.Serialization.XmlElementAttribute( "ScheduleExpiration", typeof( ScheduleExpiration ) )] out ExpirationDefinition Item )
        {
            object[] results = this.Invoke( "GetCacheOptions", new object[] {
                        Report} );
            Item = ( (ExpirationDefinition)( results[ 1 ] ) );
            return ( (bool)( results[ 0 ] ) );
        }

        /// <remarks/>
        public void GetCacheOptionsAsync( string Report )
        {
            this.GetCacheOptionsAsync( Report, null );
        }

        /// <remarks/>
        public void GetCacheOptionsAsync( string Report, object userState )
        {
            if ( ( this.GetCacheOptionsOperationCompleted == null ) )
            {
                this.GetCacheOptionsOperationCompleted = new System.Threading.SendOrPostCallback( this.OnGetCacheOptionsOperationCompleted );
            }
            this.InvokeAsync( "GetCacheOptions", new object[] {
                        Report}, this.GetCacheOptionsOperationCompleted, userState );
        }

        private void OnGetCacheOptionsOperationCompleted( object arg )
        {
            if ( ( this.GetCacheOptionsCompleted != null ) )
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ( (System.Web.Services.Protocols.InvokeCompletedEventArgs)( arg ) );
                this.GetCacheOptionsCompleted( this, new GetCacheOptionsCompletedEventArgs( invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState ) );
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute( "ServerInfoHeaderValue", Direction = System.Web.Services.Protocols.SoapHeaderDirection.Out )]
        [System.Web.Services.Protocols.SoapHeaderAttribute( "BatchHeaderValue" )]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute( "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices/Upd" +
            "ateReportExecutionSnapshot", RequestNamespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices", ResponseNamespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped )]
        public void UpdateReportExecutionSnapshot( string Report )
        {
            this.Invoke( "UpdateReportExecutionSnapshot", new object[] {
                        Report} );
        }

        /// <remarks/>
        public void UpdateReportExecutionSnapshotAsync( string Report )
        {
            this.UpdateReportExecutionSnapshotAsync( Report, null );
        }

        /// <remarks/>
        public void UpdateReportExecutionSnapshotAsync( string Report, object userState )
        {
            if ( ( this.UpdateReportExecutionSnapshotOperationCompleted == null ) )
            {
                this.UpdateReportExecutionSnapshotOperationCompleted = new System.Threading.SendOrPostCallback( this.OnUpdateReportExecutionSnapshotOperationCompleted );
            }
            this.InvokeAsync( "UpdateReportExecutionSnapshot", new object[] {
                        Report}, this.UpdateReportExecutionSnapshotOperationCompleted, userState );
        }

        private void OnUpdateReportExecutionSnapshotOperationCompleted( object arg )
        {
            if ( ( this.UpdateReportExecutionSnapshotCompleted != null ) )
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ( (System.Web.Services.Protocols.InvokeCompletedEventArgs)( arg ) );
                this.UpdateReportExecutionSnapshotCompleted( this, new System.ComponentModel.AsyncCompletedEventArgs( invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState ) );
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute( "ServerInfoHeaderValue", Direction = System.Web.Services.Protocols.SoapHeaderDirection.Out )]
        [System.Web.Services.Protocols.SoapHeaderAttribute( "BatchHeaderValue" )]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute( "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices/Flu" +
            "shCache", RequestNamespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices", ResponseNamespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped )]
        public void FlushCache( string Report )
        {
            this.Invoke( "FlushCache", new object[] {
                        Report} );
        }

        /// <remarks/>
        public void FlushCacheAsync( string Report )
        {
            this.FlushCacheAsync( Report, null );
        }

        /// <remarks/>
        public void FlushCacheAsync( string Report, object userState )
        {
            if ( ( this.FlushCacheOperationCompleted == null ) )
            {
                this.FlushCacheOperationCompleted = new System.Threading.SendOrPostCallback( this.OnFlushCacheOperationCompleted );
            }
            this.InvokeAsync( "FlushCache", new object[] {
                        Report}, this.FlushCacheOperationCompleted, userState );
        }

        private void OnFlushCacheOperationCompleted( object arg )
        {
            if ( ( this.FlushCacheCompleted != null ) )
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ( (System.Web.Services.Protocols.InvokeCompletedEventArgs)( arg ) );
                this.FlushCacheCompleted( this, new System.ComponentModel.AsyncCompletedEventArgs( invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState ) );
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute( "ServerInfoHeaderValue", Direction = System.Web.Services.Protocols.SoapHeaderDirection.Out )]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute( "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices/Lis" +
            "tJobs", RequestNamespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices", ResponseNamespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped )]
        [return: System.Xml.Serialization.XmlArrayAttribute( "Jobs" )]
        public Job[] ListJobs()
        {
            object[] results = this.Invoke( "ListJobs", new object[ 0 ] );
            return ( (Job[])( results[ 0 ] ) );
        }

        /// <remarks/>
        public void ListJobsAsync()
        {
            this.ListJobsAsync( null );
        }

        /// <remarks/>
        public void ListJobsAsync( object userState )
        {
            if ( ( this.ListJobsOperationCompleted == null ) )
            {
                this.ListJobsOperationCompleted = new System.Threading.SendOrPostCallback( this.OnListJobsOperationCompleted );
            }
            this.InvokeAsync( "ListJobs", new object[ 0 ], this.ListJobsOperationCompleted, userState );
        }

        private void OnListJobsOperationCompleted( object arg )
        {
            if ( ( this.ListJobsCompleted != null ) )
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ( (System.Web.Services.Protocols.InvokeCompletedEventArgs)( arg ) );
                this.ListJobsCompleted( this, new ListJobsCompletedEventArgs( invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState ) );
            }
        }

        /// <remarks/>
        [System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Naming", "CA1706:ShortAcronymsShouldBeUppercase", MessageId = "0#" ), System.Web.Services.Protocols.SoapHeaderAttribute( "ServerInfoHeaderValue", Direction = System.Web.Services.Protocols.SoapHeaderDirection.Out )]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute( "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices/Can" +
            "celJob", RequestNamespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices", ResponseNamespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped )]
        public bool CancelJob( string JobID )
        {
            object[] results = this.Invoke( "CancelJob", new object[] {
                        JobID} );
            return ( (bool)( results[ 0 ] ) );
        }

        /// <remarks/>
        [System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Naming", "CA1706:ShortAcronymsShouldBeUppercase", MessageId = "0#" )]
        public void CancelJobAsync( string JobID )
        {
            this.CancelJobAsync( JobID, null );
        }

        /// <remarks/>
        public void CancelJobAsync( string JobID, object userState )
        {
            if ( ( this.CancelJobOperationCompleted == null ) )
            {
                this.CancelJobOperationCompleted = new System.Threading.SendOrPostCallback( this.OnCancelJobOperationCompleted );
            }
            this.InvokeAsync( "CancelJob", new object[] {
                        JobID}, this.CancelJobOperationCompleted, userState );
        }

        private void OnCancelJobOperationCompleted( object arg )
        {
            if ( ( this.CancelJobCompleted != null ) )
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ( (System.Web.Services.Protocols.InvokeCompletedEventArgs)( arg ) );
                this.CancelJobCompleted( this, new CancelJobCompletedEventArgs( invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState ) );
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute( "ServerInfoHeaderValue", Direction = System.Web.Services.Protocols.SoapHeaderDirection.Out )]
        [System.Web.Services.Protocols.SoapHeaderAttribute( "BatchHeaderValue" )]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute( "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices/Cre" +
            "ateDataSource", RequestNamespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices", ResponseNamespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped )]
        public void CreateDataSource( string DataSource, string Parent, bool Overwrite, DataSourceDefinition Definition, Property[] Properties )
        {
            this.Invoke( "CreateDataSource", new object[] {
                        DataSource,
                        Parent,
                        Overwrite,
                        Definition,
                        Properties} );
        }

        /// <remarks/>
        public void CreateDataSourceAsync( string DataSource, string Parent, bool Overwrite, DataSourceDefinition Definition, Property[] Properties )
        {
            this.CreateDataSourceAsync( DataSource, Parent, Overwrite, Definition, Properties, null );
        }

        /// <remarks/>
        public void CreateDataSourceAsync( string DataSource, string Parent, bool Overwrite, DataSourceDefinition Definition, Property[] Properties, object userState )
        {
            if ( ( this.CreateDataSourceOperationCompleted == null ) )
            {
                this.CreateDataSourceOperationCompleted = new System.Threading.SendOrPostCallback( this.OnCreateDataSourceOperationCompleted );
            }
            this.InvokeAsync( "CreateDataSource", new object[] {
                        DataSource,
                        Parent,
                        Overwrite,
                        Definition,
                        Properties}, this.CreateDataSourceOperationCompleted, userState );
        }

        private void OnCreateDataSourceOperationCompleted( object arg )
        {
            if ( ( this.CreateDataSourceCompleted != null ) )
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ( (System.Web.Services.Protocols.InvokeCompletedEventArgs)( arg ) );
                this.CreateDataSourceCompleted( this, new System.ComponentModel.AsyncCompletedEventArgs( invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState ) );
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute( "ServerInfoHeaderValue", Direction = System.Web.Services.Protocols.SoapHeaderDirection.Out )]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute( "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices/Get" +
            "DataSourceContents", RequestNamespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices", ResponseNamespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped )]
        [return: System.Xml.Serialization.XmlElementAttribute( "Definition" )]
        public DataSourceDefinition GetDataSourceContents( string DataSource )
        {
            object[] results = this.Invoke( "GetDataSourceContents", new object[] {
                        DataSource} );
            return ( (DataSourceDefinition)( results[ 0 ] ) );
        }

        /// <remarks/>
        public void GetDataSourceContentsAsync( string DataSource )
        {
            this.GetDataSourceContentsAsync( DataSource, null );
        }

        /// <remarks/>
        public void GetDataSourceContentsAsync( string DataSource, object userState )
        {
            if ( ( this.GetDataSourceContentsOperationCompleted == null ) )
            {
                this.GetDataSourceContentsOperationCompleted = new System.Threading.SendOrPostCallback( this.OnGetDataSourceContentsOperationCompleted );
            }
            this.InvokeAsync( "GetDataSourceContents", new object[] {
                        DataSource}, this.GetDataSourceContentsOperationCompleted, userState );
        }

        private void OnGetDataSourceContentsOperationCompleted( object arg )
        {
            if ( ( this.GetDataSourceContentsCompleted != null ) )
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ( (System.Web.Services.Protocols.InvokeCompletedEventArgs)( arg ) );
                this.GetDataSourceContentsCompleted( this, new GetDataSourceContentsCompletedEventArgs( invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState ) );
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute( "ServerInfoHeaderValue", Direction = System.Web.Services.Protocols.SoapHeaderDirection.Out )]
        [System.Web.Services.Protocols.SoapHeaderAttribute( "BatchHeaderValue" )]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute( "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices/Set" +
            "DataSourceContents", RequestNamespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices", ResponseNamespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped )]
        public void SetDataSourceContents( string DataSource, DataSourceDefinition Definition )
        {
            this.Invoke( "SetDataSourceContents", new object[] {
                        DataSource,
                        Definition} );
        }

        /// <remarks/>
        public void SetDataSourceContentsAsync( string DataSource, DataSourceDefinition Definition )
        {
            this.SetDataSourceContentsAsync( DataSource, Definition, null );
        }

        /// <remarks/>
        public void SetDataSourceContentsAsync( string DataSource, DataSourceDefinition Definition, object userState )
        {
            if ( ( this.SetDataSourceContentsOperationCompleted == null ) )
            {
                this.SetDataSourceContentsOperationCompleted = new System.Threading.SendOrPostCallback( this.OnSetDataSourceContentsOperationCompleted );
            }
            this.InvokeAsync( "SetDataSourceContents", new object[] {
                        DataSource,
                        Definition}, this.SetDataSourceContentsOperationCompleted, userState );
        }

        private void OnSetDataSourceContentsOperationCompleted( object arg )
        {
            if ( ( this.SetDataSourceContentsCompleted != null ) )
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ( (System.Web.Services.Protocols.InvokeCompletedEventArgs)( arg ) );
                this.SetDataSourceContentsCompleted( this, new System.ComponentModel.AsyncCompletedEventArgs( invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState ) );
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute( "ServerInfoHeaderValue", Direction = System.Web.Services.Protocols.SoapHeaderDirection.Out )]
        [System.Web.Services.Protocols.SoapHeaderAttribute( "BatchHeaderValue" )]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute( "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices/Ena" +
            "bleDataSource", RequestNamespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices", ResponseNamespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped )]
        public void EnableDataSource( string DataSource )
        {
            this.Invoke( "EnableDataSource", new object[] {
                        DataSource} );
        }

        /// <remarks/>
        public void EnableDataSourceAsync( string DataSource )
        {
            this.EnableDataSourceAsync( DataSource, null );
        }

        /// <remarks/>
        public void EnableDataSourceAsync( string DataSource, object userState )
        {
            if ( ( this.EnableDataSourceOperationCompleted == null ) )
            {
                this.EnableDataSourceOperationCompleted = new System.Threading.SendOrPostCallback( this.OnEnableDataSourceOperationCompleted );
            }
            this.InvokeAsync( "EnableDataSource", new object[] {
                        DataSource}, this.EnableDataSourceOperationCompleted, userState );
        }

        private void OnEnableDataSourceOperationCompleted( object arg )
        {
            if ( ( this.EnableDataSourceCompleted != null ) )
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ( (System.Web.Services.Protocols.InvokeCompletedEventArgs)( arg ) );
                this.EnableDataSourceCompleted( this, new System.ComponentModel.AsyncCompletedEventArgs( invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState ) );
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute( "ServerInfoHeaderValue", Direction = System.Web.Services.Protocols.SoapHeaderDirection.Out )]
        [System.Web.Services.Protocols.SoapHeaderAttribute( "BatchHeaderValue" )]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute( "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices/Dis" +
            "ableDataSource", RequestNamespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices", ResponseNamespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped )]
        public void DisableDataSource( string DataSource )
        {
            this.Invoke( "DisableDataSource", new object[] {
                        DataSource} );
        }

        /// <remarks/>
        public void DisableDataSourceAsync( string DataSource )
        {
            this.DisableDataSourceAsync( DataSource, null );
        }

        /// <remarks/>
        public void DisableDataSourceAsync( string DataSource, object userState )
        {
            if ( ( this.DisableDataSourceOperationCompleted == null ) )
            {
                this.DisableDataSourceOperationCompleted = new System.Threading.SendOrPostCallback( this.OnDisableDataSourceOperationCompleted );
            }
            this.InvokeAsync( "DisableDataSource", new object[] {
                        DataSource}, this.DisableDataSourceOperationCompleted, userState );
        }

        private void OnDisableDataSourceOperationCompleted( object arg )
        {
            if ( ( this.DisableDataSourceCompleted != null ) )
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ( (System.Web.Services.Protocols.InvokeCompletedEventArgs)( arg ) );
                this.DisableDataSourceCompleted( this, new System.ComponentModel.AsyncCompletedEventArgs( invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState ) );
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute( "ServerInfoHeaderValue", Direction = System.Web.Services.Protocols.SoapHeaderDirection.Out )]
        [System.Web.Services.Protocols.SoapHeaderAttribute( "BatchHeaderValue" )]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute( "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices/Set" +
            "ItemDataSources", RequestNamespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices", ResponseNamespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped )]
        public void SetItemDataSources( string Item, DataSource[] DataSources )
        {
            this.Invoke( "SetItemDataSources", new object[] {
                        Item,
                        DataSources} );
        }

        /// <remarks/>
        public void SetItemDataSourcesAsync( string Item, DataSource[] DataSources )
        {
            this.SetItemDataSourcesAsync( Item, DataSources, null );
        }

        /// <remarks/>
        public void SetItemDataSourcesAsync( string Item, DataSource[] DataSources, object userState )
        {
            if ( ( this.SetItemDataSourcesOperationCompleted == null ) )
            {
                this.SetItemDataSourcesOperationCompleted = new System.Threading.SendOrPostCallback( this.OnSetItemDataSourcesOperationCompleted );
            }
            this.InvokeAsync( "SetItemDataSources", new object[] {
                        Item,
                        DataSources}, this.SetItemDataSourcesOperationCompleted, userState );
        }

        private void OnSetItemDataSourcesOperationCompleted( object arg )
        {
            if ( ( this.SetItemDataSourcesCompleted != null ) )
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ( (System.Web.Services.Protocols.InvokeCompletedEventArgs)( arg ) );
                this.SetItemDataSourcesCompleted( this, new System.ComponentModel.AsyncCompletedEventArgs( invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState ) );
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute( "ServerInfoHeaderValue", Direction = System.Web.Services.Protocols.SoapHeaderDirection.Out )]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute( "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices/Get" +
            "ItemDataSources", RequestNamespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices", ResponseNamespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped )]
        [return: System.Xml.Serialization.XmlArrayAttribute( "DataSources" )]
        public DataSource[] GetItemDataSources( string Item )
        {
            object[] results = this.Invoke( "GetItemDataSources", new object[] {
                        Item} );
            return ( (DataSource[])( results[ 0 ] ) );
        }

        /// <remarks/>
        public void GetItemDataSourcesAsync( string Item )
        {
            this.GetItemDataSourcesAsync( Item, null );
        }

        /// <remarks/>
        public void GetItemDataSourcesAsync( string Item, object userState )
        {
            if ( ( this.GetItemDataSourcesOperationCompleted == null ) )
            {
                this.GetItemDataSourcesOperationCompleted = new System.Threading.SendOrPostCallback( this.OnGetItemDataSourcesOperationCompleted );
            }
            this.InvokeAsync( "GetItemDataSources", new object[] {
                        Item}, this.GetItemDataSourcesOperationCompleted, userState );
        }

        private void OnGetItemDataSourcesOperationCompleted( object arg )
        {
            if ( ( this.GetItemDataSourcesCompleted != null ) )
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ( (System.Web.Services.Protocols.InvokeCompletedEventArgs)( arg ) );
                this.GetItemDataSourcesCompleted( this, new GetItemDataSourcesCompletedEventArgs( invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState ) );
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute( "ServerInfoHeaderValue", Direction = System.Web.Services.Protocols.SoapHeaderDirection.Out )]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute( "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices/Get" +
            "ItemDataSourcePrompts", RequestNamespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices", ResponseNamespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped )]
        [return: System.Xml.Serialization.XmlArrayAttribute( "DataSourcePrompts" )]
        public DataSourcePrompt[] GetItemDataSourcePrompts( string Item )
        {
            object[] results = this.Invoke( "GetItemDataSourcePrompts", new object[] {
                        Item} );
            return ( (DataSourcePrompt[])( results[ 0 ] ) );
        }

        /// <remarks/>
        public void GetItemDataSourcePromptsAsync( string Item )
        {
            this.GetItemDataSourcePromptsAsync( Item, null );
        }

        /// <remarks/>
        public void GetItemDataSourcePromptsAsync( string Item, object userState )
        {
            if ( ( this.GetItemDataSourcePromptsOperationCompleted == null ) )
            {
                this.GetItemDataSourcePromptsOperationCompleted = new System.Threading.SendOrPostCallback( this.OnGetItemDataSourcePromptsOperationCompleted );
            }
            this.InvokeAsync( "GetItemDataSourcePrompts", new object[] {
                        Item}, this.GetItemDataSourcePromptsOperationCompleted, userState );
        }

        private void OnGetItemDataSourcePromptsOperationCompleted( object arg )
        {
            if ( ( this.GetItemDataSourcePromptsCompleted != null ) )
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ( (System.Web.Services.Protocols.InvokeCompletedEventArgs)( arg ) );
                this.GetItemDataSourcePromptsCompleted( this, new GetItemDataSourcePromptsCompletedEventArgs( invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState ) );
            }
        }

        /// <remarks/>
        [System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Design", "CA1021:AvoidOutParameters", MessageId = "1#" ), System.Web.Services.Protocols.SoapHeaderAttribute( "ServerInfoHeaderValue", Direction = System.Web.Services.Protocols.SoapHeaderDirection.Out )]
        [System.Web.Services.Protocols.SoapHeaderAttribute( "BatchHeaderValue" )]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute( "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices/Cre" +
            "ateReportHistorySnapshot", RequestNamespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices", ResponseNamespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped )]
        [return: System.Xml.Serialization.XmlElementAttribute( "HistoryID" )]
        public string CreateReportHistorySnapshot( string Report, out Warning[] Warnings )
        {
            object[] results = this.Invoke( "CreateReportHistorySnapshot", new object[] {
                        Report} );
            Warnings = ( (Warning[])( results[ 1 ] ) );
            return ( (string)( results[ 0 ] ) );
        }

        /// <remarks/>
        public void CreateReportHistorySnapshotAsync( string Report )
        {
            this.CreateReportHistorySnapshotAsync( Report, null );
        }

        /// <remarks/>
        public void CreateReportHistorySnapshotAsync( string Report, object userState )
        {
            if ( ( this.CreateReportHistorySnapshotOperationCompleted == null ) )
            {
                this.CreateReportHistorySnapshotOperationCompleted = new System.Threading.SendOrPostCallback( this.OnCreateReportHistorySnapshotOperationCompleted );
            }
            this.InvokeAsync( "CreateReportHistorySnapshot", new object[] {
                        Report}, this.CreateReportHistorySnapshotOperationCompleted, userState );
        }

        private void OnCreateReportHistorySnapshotOperationCompleted( object arg )
        {
            if ( ( this.CreateReportHistorySnapshotCompleted != null ) )
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ( (System.Web.Services.Protocols.InvokeCompletedEventArgs)( arg ) );
                this.CreateReportHistorySnapshotCompleted( this, new CreateReportHistorySnapshotCompletedEventArgs( invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState ) );
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute( "ServerInfoHeaderValue", Direction = System.Web.Services.Protocols.SoapHeaderDirection.Out )]
        [System.Web.Services.Protocols.SoapHeaderAttribute( "BatchHeaderValue" )]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute( "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices/Set" +
            "ReportHistoryOptions", RequestNamespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices", ResponseNamespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped )]
        public void SetReportHistoryOptions( string Report, bool EnableManualSnapshotCreation, bool KeepExecutionSnapshots, [System.Xml.Serialization.XmlElementAttribute( "ScheduleReference", typeof( ScheduleReference ) )] [System.Xml.Serialization.XmlElementAttribute( "ScheduleDefinition", typeof( ScheduleDefinition ) )] [System.Xml.Serialization.XmlElementAttribute( "NoSchedule", typeof( NoSchedule ) )] ScheduleDefinitionOrReference Item )
        {
            this.Invoke( "SetReportHistoryOptions", new object[] {
                        Report,
                        EnableManualSnapshotCreation,
                        KeepExecutionSnapshots,
                        Item} );
        }

        /// <remarks/>
        public void SetReportHistoryOptionsAsync( string Report, bool EnableManualSnapshotCreation, bool KeepExecutionSnapshots, ScheduleDefinitionOrReference Item )
        {
            this.SetReportHistoryOptionsAsync( Report, EnableManualSnapshotCreation, KeepExecutionSnapshots, Item, null );
        }

        /// <remarks/>
        public void SetReportHistoryOptionsAsync( string Report, bool EnableManualSnapshotCreation, bool KeepExecutionSnapshots, ScheduleDefinitionOrReference Item, object userState )
        {
            if ( ( this.SetReportHistoryOptionsOperationCompleted == null ) )
            {
                this.SetReportHistoryOptionsOperationCompleted = new System.Threading.SendOrPostCallback( this.OnSetReportHistoryOptionsOperationCompleted );
            }
            this.InvokeAsync( "SetReportHistoryOptions", new object[] {
                        Report,
                        EnableManualSnapshotCreation,
                        KeepExecutionSnapshots,
                        Item}, this.SetReportHistoryOptionsOperationCompleted, userState );
        }

        private void OnSetReportHistoryOptionsOperationCompleted( object arg )
        {
            if ( ( this.SetReportHistoryOptionsCompleted != null ) )
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ( (System.Web.Services.Protocols.InvokeCompletedEventArgs)( arg ) );
                this.SetReportHistoryOptionsCompleted( this, new System.ComponentModel.AsyncCompletedEventArgs( invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState ) );
            }
        }

        /// <remarks/>
        [System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Design", "CA1021:AvoidOutParameters", MessageId = "2#" ), System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Design", "CA1021:AvoidOutParameters", MessageId = "1#" ), System.Web.Services.Protocols.SoapHeaderAttribute( "ServerInfoHeaderValue", Direction = System.Web.Services.Protocols.SoapHeaderDirection.Out )]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute( "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices/Get" +
            "ReportHistoryOptions", RequestNamespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices", ResponseNamespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped )]
        [return: System.Xml.Serialization.XmlElementAttribute( "EnableManualSnapshotCreation" )]
        public bool GetReportHistoryOptions( string Report, out bool KeepExecutionSnapshots, [System.Xml.Serialization.XmlElementAttribute( "ScheduleReference", typeof( ScheduleReference ) )] [System.Xml.Serialization.XmlElementAttribute( "ScheduleDefinition", typeof( ScheduleDefinition ) )] [System.Xml.Serialization.XmlElementAttribute( "NoSchedule", typeof( NoSchedule ) )] out ScheduleDefinitionOrReference Item )
        {
            object[] results = this.Invoke( "GetReportHistoryOptions", new object[] {
                        Report} );
            KeepExecutionSnapshots = ( (bool)( results[ 1 ] ) );
            Item = ( (ScheduleDefinitionOrReference)( results[ 2 ] ) );
            return ( (bool)( results[ 0 ] ) );
        }

        /// <remarks/>
        public void GetReportHistoryOptionsAsync( string Report )
        {
            this.GetReportHistoryOptionsAsync( Report, null );
        }

        /// <remarks/>
        public void GetReportHistoryOptionsAsync( string Report, object userState )
        {
            if ( ( this.GetReportHistoryOptionsOperationCompleted == null ) )
            {
                this.GetReportHistoryOptionsOperationCompleted = new System.Threading.SendOrPostCallback( this.OnGetReportHistoryOptionsOperationCompleted );
            }
            this.InvokeAsync( "GetReportHistoryOptions", new object[] {
                        Report}, this.GetReportHistoryOptionsOperationCompleted, userState );
        }

        private void OnGetReportHistoryOptionsOperationCompleted( object arg )
        {
            if ( ( this.GetReportHistoryOptionsCompleted != null ) )
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ( (System.Web.Services.Protocols.InvokeCompletedEventArgs)( arg ) );
                this.GetReportHistoryOptionsCompleted( this, new GetReportHistoryOptionsCompletedEventArgs( invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState ) );
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute( "ServerInfoHeaderValue", Direction = System.Web.Services.Protocols.SoapHeaderDirection.Out )]
        [System.Web.Services.Protocols.SoapHeaderAttribute( "BatchHeaderValue" )]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute( "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices/Set" +
            "ReportHistoryLimit", RequestNamespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices", ResponseNamespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped )]
        public void SetReportHistoryLimit( string Report, bool UseSystem, int HistoryLimit )
        {
            this.Invoke( "SetReportHistoryLimit", new object[] {
                        Report,
                        UseSystem,
                        HistoryLimit} );
        }

        /// <remarks/>
        public void SetReportHistoryLimitAsync( string Report, bool UseSystem, int HistoryLimit )
        {
            this.SetReportHistoryLimitAsync( Report, UseSystem, HistoryLimit, null );
        }

        /// <remarks/>
        public void SetReportHistoryLimitAsync( string Report, bool UseSystem, int HistoryLimit, object userState )
        {
            if ( ( this.SetReportHistoryLimitOperationCompleted == null ) )
            {
                this.SetReportHistoryLimitOperationCompleted = new System.Threading.SendOrPostCallback( this.OnSetReportHistoryLimitOperationCompleted );
            }
            this.InvokeAsync( "SetReportHistoryLimit", new object[] {
                        Report,
                        UseSystem,
                        HistoryLimit}, this.SetReportHistoryLimitOperationCompleted, userState );
        }

        private void OnSetReportHistoryLimitOperationCompleted( object arg )
        {
            if ( ( this.SetReportHistoryLimitCompleted != null ) )
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ( (System.Web.Services.Protocols.InvokeCompletedEventArgs)( arg ) );
                this.SetReportHistoryLimitCompleted( this, new System.ComponentModel.AsyncCompletedEventArgs( invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState ) );
            }
        }

        /// <remarks/>
        [System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Design", "CA1021:AvoidOutParameters", MessageId = "2#" ), System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Design", "CA1021:AvoidOutParameters", MessageId = "1#" ), System.Web.Services.Protocols.SoapHeaderAttribute( "ServerInfoHeaderValue", Direction = System.Web.Services.Protocols.SoapHeaderDirection.Out )]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute( "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices/Get" +
            "ReportHistoryLimit", RequestNamespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices", ResponseNamespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped )]
        [return: System.Xml.Serialization.XmlElementAttribute( "HistoryLimit" )]
        public int GetReportHistoryLimit( string Report, out bool IsSystem, out int SystemLimit )
        {
            object[] results = this.Invoke( "GetReportHistoryLimit", new object[] {
                        Report} );
            IsSystem = ( (bool)( results[ 1 ] ) );
            SystemLimit = ( (int)( results[ 2 ] ) );
            return ( (int)( results[ 0 ] ) );
        }

        /// <remarks/>
        public void GetReportHistoryLimitAsync( string Report )
        {
            this.GetReportHistoryLimitAsync( Report, null );
        }

        /// <remarks/>
        public void GetReportHistoryLimitAsync( string Report, object userState )
        {
            if ( ( this.GetReportHistoryLimitOperationCompleted == null ) )
            {
                this.GetReportHistoryLimitOperationCompleted = new System.Threading.SendOrPostCallback( this.OnGetReportHistoryLimitOperationCompleted );
            }
            this.InvokeAsync( "GetReportHistoryLimit", new object[] {
                        Report}, this.GetReportHistoryLimitOperationCompleted, userState );
        }

        private void OnGetReportHistoryLimitOperationCompleted( object arg )
        {
            if ( ( this.GetReportHistoryLimitCompleted != null ) )
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ( (System.Web.Services.Protocols.InvokeCompletedEventArgs)( arg ) );
                this.GetReportHistoryLimitCompleted( this, new GetReportHistoryLimitCompletedEventArgs( invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState ) );
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute( "ServerInfoHeaderValue", Direction = System.Web.Services.Protocols.SoapHeaderDirection.Out )]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute( "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices/Lis" +
            "tReportHistory", RequestNamespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices", ResponseNamespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped )]
        [return: System.Xml.Serialization.XmlArrayAttribute( "ReportHistory" )]
        public ReportHistorySnapshot[] ListReportHistory( string Report )
        {
            object[] results = this.Invoke( "ListReportHistory", new object[] {
                        Report} );
            return ( (ReportHistorySnapshot[])( results[ 0 ] ) );
        }

        /// <remarks/>
        public void ListReportHistoryAsync( string Report )
        {
            this.ListReportHistoryAsync( Report, null );
        }

        /// <remarks/>
        public void ListReportHistoryAsync( string Report, object userState )
        {
            if ( ( this.ListReportHistoryOperationCompleted == null ) )
            {
                this.ListReportHistoryOperationCompleted = new System.Threading.SendOrPostCallback( this.OnListReportHistoryOperationCompleted );
            }
            this.InvokeAsync( "ListReportHistory", new object[] {
                        Report}, this.ListReportHistoryOperationCompleted, userState );
        }

        private void OnListReportHistoryOperationCompleted( object arg )
        {
            if ( ( this.ListReportHistoryCompleted != null ) )
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ( (System.Web.Services.Protocols.InvokeCompletedEventArgs)( arg ) );
                this.ListReportHistoryCompleted( this, new ListReportHistoryCompletedEventArgs( invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState ) );
            }
        }

        /// <remarks/>
        [System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Naming", "CA1706:ShortAcronymsShouldBeUppercase", MessageId = "1#" ), System.Web.Services.Protocols.SoapHeaderAttribute( "ServerInfoHeaderValue", Direction = System.Web.Services.Protocols.SoapHeaderDirection.Out )]
        [System.Web.Services.Protocols.SoapHeaderAttribute( "BatchHeaderValue" )]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute( "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices/Del" +
            "eteReportHistorySnapshot", RequestNamespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices", ResponseNamespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped )]
        public void DeleteReportHistorySnapshot( string Report, string HistoryID )
        {
            this.Invoke( "DeleteReportHistorySnapshot", new object[] {
                        Report,
                        HistoryID} );
        }

        /// <remarks/>
        public void DeleteReportHistorySnapshotAsync( string Report, string HistoryID )
        {
            this.DeleteReportHistorySnapshotAsync( Report, HistoryID, null );
        }

        /// <remarks/>
        public void DeleteReportHistorySnapshotAsync( string Report, string HistoryID, object userState )
        {
            if ( ( this.DeleteReportHistorySnapshotOperationCompleted == null ) )
            {
                this.DeleteReportHistorySnapshotOperationCompleted = new System.Threading.SendOrPostCallback( this.OnDeleteReportHistorySnapshotOperationCompleted );
            }
            this.InvokeAsync( "DeleteReportHistorySnapshot", new object[] {
                        Report,
                        HistoryID}, this.DeleteReportHistorySnapshotOperationCompleted, userState );
        }

        private void OnDeleteReportHistorySnapshotOperationCompleted( object arg )
        {
            if ( ( this.DeleteReportHistorySnapshotCompleted != null ) )
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ( (System.Web.Services.Protocols.InvokeCompletedEventArgs)( arg ) );
                this.DeleteReportHistorySnapshotCompleted( this, new System.ComponentModel.AsyncCompletedEventArgs( invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState ) );
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute( "ServerInfoHeaderValue", Direction = System.Web.Services.Protocols.SoapHeaderDirection.Out )]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute( "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices/Fin" +
            "dItems", RequestNamespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices", ResponseNamespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped )]
        [return: System.Xml.Serialization.XmlArrayAttribute( "Items" )]
        public CatalogItem[] FindItems( string Folder, BooleanOperatorEnum BooleanOperator, SearchCondition[] Conditions )
        {
            object[] results = this.Invoke( "FindItems", new object[] {
                        Folder,
                        BooleanOperator,
                        Conditions} );
            return ( (CatalogItem[])( results[ 0 ] ) );
        }

        /// <remarks/>
        public void FindItemsAsync( string Folder, BooleanOperatorEnum BooleanOperator, SearchCondition[] Conditions )
        {
            this.FindItemsAsync( Folder, BooleanOperator, Conditions, null );
        }

        /// <remarks/>
        public void FindItemsAsync( string Folder, BooleanOperatorEnum BooleanOperator, SearchCondition[] Conditions, object userState )
        {
            if ( ( this.FindItemsOperationCompleted == null ) )
            {
                this.FindItemsOperationCompleted = new System.Threading.SendOrPostCallback( this.OnFindItemsOperationCompleted );
            }
            this.InvokeAsync( "FindItems", new object[] {
                        Folder,
                        BooleanOperator,
                        Conditions}, this.FindItemsOperationCompleted, userState );
        }

        private void OnFindItemsOperationCompleted( object arg )
        {
            if ( ( this.FindItemsCompleted != null ) )
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ( (System.Web.Services.Protocols.InvokeCompletedEventArgs)( arg ) );
                this.FindItemsCompleted( this, new FindItemsCompletedEventArgs( invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState ) );
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute( "ServerInfoHeaderValue", Direction = System.Web.Services.Protocols.SoapHeaderDirection.Out )]
        [System.Web.Services.Protocols.SoapHeaderAttribute( "BatchHeaderValue" )]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute( "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices/Cre" +
            "ateSchedule", RequestNamespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices", ResponseNamespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped )]
        [return: System.Xml.Serialization.XmlElementAttribute( "ScheduleID" )]
        public string CreateSchedule( string Name, ScheduleDefinition ScheduleDefinition )
        {
            object[] results = this.Invoke( "CreateSchedule", new object[] {
                        Name,
                        ScheduleDefinition} );
            return ( (string)( results[ 0 ] ) );
        }

        /// <remarks/>
        public void CreateScheduleAsync( string Name, ScheduleDefinition ScheduleDefinition )
        {
            this.CreateScheduleAsync( Name, ScheduleDefinition, null );
        }

        /// <remarks/>
        public void CreateScheduleAsync( string Name, ScheduleDefinition ScheduleDefinition, object userState )
        {
            if ( ( this.CreateScheduleOperationCompleted == null ) )
            {
                this.CreateScheduleOperationCompleted = new System.Threading.SendOrPostCallback( this.OnCreateScheduleOperationCompleted );
            }
            this.InvokeAsync( "CreateSchedule", new object[] {
                        Name,
                        ScheduleDefinition}, this.CreateScheduleOperationCompleted, userState );
        }

        private void OnCreateScheduleOperationCompleted( object arg )
        {
            if ( ( this.CreateScheduleCompleted != null ) )
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ( (System.Web.Services.Protocols.InvokeCompletedEventArgs)( arg ) );
                this.CreateScheduleCompleted( this, new CreateScheduleCompletedEventArgs( invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState ) );
            }
        }

        /// <remarks/>
        [System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Naming", "CA1706:ShortAcronymsShouldBeUppercase", MessageId = "0#" ), System.Web.Services.Protocols.SoapHeaderAttribute( "ServerInfoHeaderValue", Direction = System.Web.Services.Protocols.SoapHeaderDirection.Out )]
        [System.Web.Services.Protocols.SoapHeaderAttribute( "BatchHeaderValue" )]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute( "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices/Del" +
            "eteSchedule", RequestNamespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices", ResponseNamespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped )]
        public void DeleteSchedule( string ScheduleID )
        {
            this.Invoke( "DeleteSchedule", new object[] {
                        ScheduleID} );
        }

        /// <remarks/>
        [System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Naming", "CA1706:ShortAcronymsShouldBeUppercase", MessageId = "0#" )]
        public void DeleteScheduleAsync( string ScheduleID )
        {
            this.DeleteScheduleAsync( ScheduleID, null );
        }

        /// <remarks/>
        public void DeleteScheduleAsync( string ScheduleID, object userState )
        {
            if ( ( this.DeleteScheduleOperationCompleted == null ) )
            {
                this.DeleteScheduleOperationCompleted = new System.Threading.SendOrPostCallback( this.OnDeleteScheduleOperationCompleted );
            }
            this.InvokeAsync( "DeleteSchedule", new object[] {
                        ScheduleID}, this.DeleteScheduleOperationCompleted, userState );
        }

        private void OnDeleteScheduleOperationCompleted( object arg )
        {
            if ( ( this.DeleteScheduleCompleted != null ) )
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ( (System.Web.Services.Protocols.InvokeCompletedEventArgs)( arg ) );
                this.DeleteScheduleCompleted( this, new System.ComponentModel.AsyncCompletedEventArgs( invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState ) );
            }
        }

        /// <remarks/>
        [System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Naming", "CA1706:ShortAcronymsShouldBeUppercase", MessageId = "1#" ), System.Web.Services.Protocols.SoapHeaderAttribute( "ServerInfoHeaderValue", Direction = System.Web.Services.Protocols.SoapHeaderDirection.Out )]
        [System.Web.Services.Protocols.SoapHeaderAttribute( "BatchHeaderValue" )]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute( "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices/Set" +
            "ScheduleProperties", RequestNamespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices", ResponseNamespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped )]
        public void SetScheduleProperties( string Name, string ScheduleID, ScheduleDefinition ScheduleDefinition )
        {
            this.Invoke( "SetScheduleProperties", new object[] {
                        Name,
                        ScheduleID,
                        ScheduleDefinition} );
        }

        /// <remarks/>
        public void SetSchedulePropertiesAsync( string Name, string ScheduleID, ScheduleDefinition ScheduleDefinition )
        {
            this.SetSchedulePropertiesAsync( Name, ScheduleID, ScheduleDefinition, null );
        }

        /// <remarks/>
        public void SetSchedulePropertiesAsync( string Name, string ScheduleID, ScheduleDefinition ScheduleDefinition, object userState )
        {
            if ( ( this.SetSchedulePropertiesOperationCompleted == null ) )
            {
                this.SetSchedulePropertiesOperationCompleted = new System.Threading.SendOrPostCallback( this.OnSetSchedulePropertiesOperationCompleted );
            }
            this.InvokeAsync( "SetScheduleProperties", new object[] {
                        Name,
                        ScheduleID,
                        ScheduleDefinition}, this.SetSchedulePropertiesOperationCompleted, userState );
        }

        private void OnSetSchedulePropertiesOperationCompleted( object arg )
        {
            if ( ( this.SetSchedulePropertiesCompleted != null ) )
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ( (System.Web.Services.Protocols.InvokeCompletedEventArgs)( arg ) );
                this.SetSchedulePropertiesCompleted( this, new System.ComponentModel.AsyncCompletedEventArgs( invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState ) );
            }
        }

        /// <remarks/>
        [System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Naming", "CA1706:ShortAcronymsShouldBeUppercase", MessageId = "0#" ), System.Web.Services.Protocols.SoapHeaderAttribute( "ServerInfoHeaderValue", Direction = System.Web.Services.Protocols.SoapHeaderDirection.Out )]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute( "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices/Get" +
            "ScheduleProperties", RequestNamespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices", ResponseNamespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped )]
        [return: System.Xml.Serialization.XmlElementAttribute( "Schedule" )]
        public Schedule GetScheduleProperties( string ScheduleID )
        {
            object[] results = this.Invoke( "GetScheduleProperties", new object[] {
                        ScheduleID} );
            return ( (Schedule)( results[ 0 ] ) );
        }

        /// <remarks/>
        [System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Naming", "CA1706:ShortAcronymsShouldBeUppercase", MessageId = "0#" )]
        public void GetSchedulePropertiesAsync( string ScheduleID )
        {
            this.GetSchedulePropertiesAsync( ScheduleID, null );
        }

        /// <remarks/>
        public void GetSchedulePropertiesAsync( string ScheduleID, object userState )
        {
            if ( ( this.GetSchedulePropertiesOperationCompleted == null ) )
            {
                this.GetSchedulePropertiesOperationCompleted = new System.Threading.SendOrPostCallback( this.OnGetSchedulePropertiesOperationCompleted );
            }
            this.InvokeAsync( "GetScheduleProperties", new object[] {
                        ScheduleID}, this.GetSchedulePropertiesOperationCompleted, userState );
        }

        private void OnGetSchedulePropertiesOperationCompleted( object arg )
        {
            if ( ( this.GetSchedulePropertiesCompleted != null ) )
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ( (System.Web.Services.Protocols.InvokeCompletedEventArgs)( arg ) );
                this.GetSchedulePropertiesCompleted( this, new GetSchedulePropertiesCompletedEventArgs( invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState ) );
            }
        }

        /// <remarks/>
        [System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Naming", "CA1706:ShortAcronymsShouldBeUppercase", MessageId = "0#" ), System.Web.Services.Protocols.SoapHeaderAttribute( "ServerInfoHeaderValue", Direction = System.Web.Services.Protocols.SoapHeaderDirection.Out )]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute( "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices/Lis" +
            "tScheduledReports", RequestNamespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices", ResponseNamespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped )]
        [return: System.Xml.Serialization.XmlArrayAttribute( "Reports" )]
        public CatalogItem[] ListScheduledReports( string ScheduleID )
        {
            object[] results = this.Invoke( "ListScheduledReports", new object[] {
                        ScheduleID} );
            return ( (CatalogItem[])( results[ 0 ] ) );
        }

        /// <remarks/>
        [System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Naming", "CA1706:ShortAcronymsShouldBeUppercase", MessageId = "0#" )]
        public void ListScheduledReportsAsync( string ScheduleID )
        {
            this.ListScheduledReportsAsync( ScheduleID, null );
        }

        /// <remarks/>
        public void ListScheduledReportsAsync( string ScheduleID, object userState )
        {
            if ( ( this.ListScheduledReportsOperationCompleted == null ) )
            {
                this.ListScheduledReportsOperationCompleted = new System.Threading.SendOrPostCallback( this.OnListScheduledReportsOperationCompleted );
            }
            this.InvokeAsync( "ListScheduledReports", new object[] {
                        ScheduleID}, this.ListScheduledReportsOperationCompleted, userState );
        }

        private void OnListScheduledReportsOperationCompleted( object arg )
        {
            if ( ( this.ListScheduledReportsCompleted != null ) )
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ( (System.Web.Services.Protocols.InvokeCompletedEventArgs)( arg ) );
                this.ListScheduledReportsCompleted( this, new ListScheduledReportsCompletedEventArgs( invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState ) );
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute( "ServerInfoHeaderValue", Direction = System.Web.Services.Protocols.SoapHeaderDirection.Out )]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute( "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices/Lis" +
            "tSchedules", RequestNamespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices", ResponseNamespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped )]
        [return: System.Xml.Serialization.XmlArrayAttribute( "Schedules" )]
        public Schedule[] ListSchedules()
        {
            object[] results = this.Invoke( "ListSchedules", new object[ 0 ] );
            return ( (Schedule[])( results[ 0 ] ) );
        }

        /// <remarks/>
        public void ListSchedulesAsync()
        {
            this.ListSchedulesAsync( null );
        }

        /// <remarks/>
        public void ListSchedulesAsync( object userState )
        {
            if ( ( this.ListSchedulesOperationCompleted == null ) )
            {
                this.ListSchedulesOperationCompleted = new System.Threading.SendOrPostCallback( this.OnListSchedulesOperationCompleted );
            }
            this.InvokeAsync( "ListSchedules", new object[ 0 ], this.ListSchedulesOperationCompleted, userState );
        }

        private void OnListSchedulesOperationCompleted( object arg )
        {
            if ( ( this.ListSchedulesCompleted != null ) )
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ( (System.Web.Services.Protocols.InvokeCompletedEventArgs)( arg ) );
                this.ListSchedulesCompleted( this, new ListSchedulesCompletedEventArgs( invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState ) );
            }
        }

        /// <remarks/>
        [System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Naming", "CA1706:ShortAcronymsShouldBeUppercase", MessageId = "0#" ), System.Web.Services.Protocols.SoapHeaderAttribute( "ServerInfoHeaderValue", Direction = System.Web.Services.Protocols.SoapHeaderDirection.Out )]
        [System.Web.Services.Protocols.SoapHeaderAttribute( "BatchHeaderValue" )]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute( "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices/Pau" +
            "seSchedule", RequestNamespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices", ResponseNamespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped )]
        public void PauseSchedule( string ScheduleID )
        {
            this.Invoke( "PauseSchedule", new object[] {
                        ScheduleID} );
        }

        /// <remarks/>
        [System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Naming", "CA1706:ShortAcronymsShouldBeUppercase", MessageId = "0#" )]
        public void PauseScheduleAsync( string ScheduleID )
        {
            this.PauseScheduleAsync( ScheduleID, null );
        }

        /// <remarks/>
        public void PauseScheduleAsync( string ScheduleID, object userState )
        {
            if ( ( this.PauseScheduleOperationCompleted == null ) )
            {
                this.PauseScheduleOperationCompleted = new System.Threading.SendOrPostCallback( this.OnPauseScheduleOperationCompleted );
            }
            this.InvokeAsync( "PauseSchedule", new object[] {
                        ScheduleID}, this.PauseScheduleOperationCompleted, userState );
        }

        private void OnPauseScheduleOperationCompleted( object arg )
        {
            if ( ( this.PauseScheduleCompleted != null ) )
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ( (System.Web.Services.Protocols.InvokeCompletedEventArgs)( arg ) );
                this.PauseScheduleCompleted( this, new System.ComponentModel.AsyncCompletedEventArgs( invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState ) );
            }
        }

        /// <remarks/>
        [System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Naming", "CA1706:ShortAcronymsShouldBeUppercase", MessageId = "0#" ), System.Web.Services.Protocols.SoapHeaderAttribute( "ServerInfoHeaderValue", Direction = System.Web.Services.Protocols.SoapHeaderDirection.Out )]
        [System.Web.Services.Protocols.SoapHeaderAttribute( "BatchHeaderValue" )]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute( "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices/Res" +
            "umeSchedule", RequestNamespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices", ResponseNamespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped )]
        public void ResumeSchedule( string ScheduleID )
        {
            this.Invoke( "ResumeSchedule", new object[] {
                        ScheduleID} );
        }

        /// <remarks/>
        [System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Naming", "CA1706:ShortAcronymsShouldBeUppercase", MessageId = "0#" )]
        public void ResumeScheduleAsync( string ScheduleID )
        {
            this.ResumeScheduleAsync( ScheduleID, null );
        }

        /// <remarks/>
        public void ResumeScheduleAsync( string ScheduleID, object userState )
        {
            if ( ( this.ResumeScheduleOperationCompleted == null ) )
            {
                this.ResumeScheduleOperationCompleted = new System.Threading.SendOrPostCallback( this.OnResumeScheduleOperationCompleted );
            }
            this.InvokeAsync( "ResumeSchedule", new object[] {
                        ScheduleID}, this.ResumeScheduleOperationCompleted, userState );
        }

        private void OnResumeScheduleOperationCompleted( object arg )
        {
            if ( ( this.ResumeScheduleCompleted != null ) )
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ( (System.Web.Services.Protocols.InvokeCompletedEventArgs)( arg ) );
                this.ResumeScheduleCompleted( this, new System.ComponentModel.AsyncCompletedEventArgs( invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState ) );
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute( "ServerInfoHeaderValue", Direction = System.Web.Services.Protocols.SoapHeaderDirection.Out )]
        [System.Web.Services.Protocols.SoapHeaderAttribute( "BatchHeaderValue" )]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute( "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices/Cre" +
            "ateSubscription", RequestNamespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices", ResponseNamespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped )]
        [return: System.Xml.Serialization.XmlElementAttribute( "SubscriptionID" )]
        public string CreateSubscription( string Report, ExtensionSettings ExtensionSettings, string Description, string EventType, string MatchData, ParameterValue[] Parameters )
        {
            object[] results = this.Invoke( "CreateSubscription", new object[] {
                        Report,
                        ExtensionSettings,
                        Description,
                        EventType,
                        MatchData,
                        Parameters} );
            return ( (string)( results[ 0 ] ) );
        }

        /// <remarks/>
        public void CreateSubscriptionAsync( string Report, ExtensionSettings ExtensionSettings, string Description, string EventType, string MatchData, ParameterValue[] Parameters )
        {
            this.CreateSubscriptionAsync( Report, ExtensionSettings, Description, EventType, MatchData, Parameters, null );
        }

        /// <remarks/>
        public void CreateSubscriptionAsync( string Report, ExtensionSettings ExtensionSettings, string Description, string EventType, string MatchData, ParameterValue[] Parameters, object userState )
        {
            if ( ( this.CreateSubscriptionOperationCompleted == null ) )
            {
                this.CreateSubscriptionOperationCompleted = new System.Threading.SendOrPostCallback( this.OnCreateSubscriptionOperationCompleted );
            }
            this.InvokeAsync( "CreateSubscription", new object[] {
                        Report,
                        ExtensionSettings,
                        Description,
                        EventType,
                        MatchData,
                        Parameters}, this.CreateSubscriptionOperationCompleted, userState );
        }

        private void OnCreateSubscriptionOperationCompleted( object arg )
        {
            if ( ( this.CreateSubscriptionCompleted != null ) )
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ( (System.Web.Services.Protocols.InvokeCompletedEventArgs)( arg ) );
                this.CreateSubscriptionCompleted( this, new CreateSubscriptionCompletedEventArgs( invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState ) );
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute( "ServerInfoHeaderValue", Direction = System.Web.Services.Protocols.SoapHeaderDirection.Out )]
        [System.Web.Services.Protocols.SoapHeaderAttribute( "BatchHeaderValue" )]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute( "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices/Cre" +
            "ateDataDrivenSubscription", RequestNamespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices", ResponseNamespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped )]
        [return: System.Xml.Serialization.XmlElementAttribute( "SubscriptionID" )]
        public string CreateDataDrivenSubscription( string Report, ExtensionSettings ExtensionSettings, DataRetrievalPlan DataRetrievalPlan, string Description, string EventType, string MatchData, ParameterValueOrFieldReference[] Parameters )
        {
            object[] results = this.Invoke( "CreateDataDrivenSubscription", new object[] {
                        Report,
                        ExtensionSettings,
                        DataRetrievalPlan,
                        Description,
                        EventType,
                        MatchData,
                        Parameters} );
            return ( (string)( results[ 0 ] ) );
        }

        /// <remarks/>
        public void CreateDataDrivenSubscriptionAsync( string Report, ExtensionSettings ExtensionSettings, DataRetrievalPlan DataRetrievalPlan, string Description, string EventType, string MatchData, ParameterValueOrFieldReference[] Parameters )
        {
            this.CreateDataDrivenSubscriptionAsync( Report, ExtensionSettings, DataRetrievalPlan, Description, EventType, MatchData, Parameters, null );
        }

        /// <remarks/>
        public void CreateDataDrivenSubscriptionAsync( string Report, ExtensionSettings ExtensionSettings, DataRetrievalPlan DataRetrievalPlan, string Description, string EventType, string MatchData, ParameterValueOrFieldReference[] Parameters, object userState )
        {
            if ( ( this.CreateDataDrivenSubscriptionOperationCompleted == null ) )
            {
                this.CreateDataDrivenSubscriptionOperationCompleted = new System.Threading.SendOrPostCallback( this.OnCreateDataDrivenSubscriptionOperationCompleted );
            }
            this.InvokeAsync( "CreateDataDrivenSubscription", new object[] {
                        Report,
                        ExtensionSettings,
                        DataRetrievalPlan,
                        Description,
                        EventType,
                        MatchData,
                        Parameters}, this.CreateDataDrivenSubscriptionOperationCompleted, userState );
        }

        private void OnCreateDataDrivenSubscriptionOperationCompleted( object arg )
        {
            if ( ( this.CreateDataDrivenSubscriptionCompleted != null ) )
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ( (System.Web.Services.Protocols.InvokeCompletedEventArgs)( arg ) );
                this.CreateDataDrivenSubscriptionCompleted( this, new CreateDataDrivenSubscriptionCompletedEventArgs( invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState ) );
            }
        }

        /// <remarks/>
        [System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Naming", "CA1706:ShortAcronymsShouldBeUppercase", MessageId = "0#" ), System.Web.Services.Protocols.SoapHeaderAttribute( "ServerInfoHeaderValue", Direction = System.Web.Services.Protocols.SoapHeaderDirection.Out )]
        [System.Web.Services.Protocols.SoapHeaderAttribute( "BatchHeaderValue" )]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute( "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices/Set" +
            "SubscriptionProperties", RequestNamespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices", ResponseNamespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped )]
        public void SetSubscriptionProperties( string SubscriptionID, ExtensionSettings ExtensionSettings, string Description, string EventType, string MatchData, ParameterValue[] Parameters )
        {
            this.Invoke( "SetSubscriptionProperties", new object[] {
                        SubscriptionID,
                        ExtensionSettings,
                        Description,
                        EventType,
                        MatchData,
                        Parameters} );
        }

        /// <remarks/>
        public void SetSubscriptionPropertiesAsync( string SubscriptionID, ExtensionSettings ExtensionSettings, string Description, string EventType, string MatchData, ParameterValue[] Parameters )
        {
            this.SetSubscriptionPropertiesAsync( SubscriptionID, ExtensionSettings, Description, EventType, MatchData, Parameters, null );
        }

        /// <remarks/>
        public void SetSubscriptionPropertiesAsync( string SubscriptionID, ExtensionSettings ExtensionSettings, string Description, string EventType, string MatchData, ParameterValue[] Parameters, object userState )
        {
            if ( ( this.SetSubscriptionPropertiesOperationCompleted == null ) )
            {
                this.SetSubscriptionPropertiesOperationCompleted = new System.Threading.SendOrPostCallback( this.OnSetSubscriptionPropertiesOperationCompleted );
            }
            this.InvokeAsync( "SetSubscriptionProperties", new object[] {
                        SubscriptionID,
                        ExtensionSettings,
                        Description,
                        EventType,
                        MatchData,
                        Parameters}, this.SetSubscriptionPropertiesOperationCompleted, userState );
        }

        private void OnSetSubscriptionPropertiesOperationCompleted( object arg )
        {
            if ( ( this.SetSubscriptionPropertiesCompleted != null ) )
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ( (System.Web.Services.Protocols.InvokeCompletedEventArgs)( arg ) );
                this.SetSubscriptionPropertiesCompleted( this, new System.ComponentModel.AsyncCompletedEventArgs( invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState ) );
            }
        }

        /// <remarks/>
        [System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Naming", "CA1706:ShortAcronymsShouldBeUppercase", MessageId = "0#" ), System.Web.Services.Protocols.SoapHeaderAttribute( "ServerInfoHeaderValue", Direction = System.Web.Services.Protocols.SoapHeaderDirection.Out )]
        [System.Web.Services.Protocols.SoapHeaderAttribute( "BatchHeaderValue" )]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute( "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices/Set" +
            "DataDrivenSubscriptionProperties", RequestNamespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices", ResponseNamespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped )]
        public void SetDataDrivenSubscriptionProperties( string DataDrivenSubscriptionID, ExtensionSettings ExtensionSettings, DataRetrievalPlan DataRetrievalPlan, string Description, string EventType, string MatchData, ParameterValueOrFieldReference[] Parameters )
        {
            this.Invoke( "SetDataDrivenSubscriptionProperties", new object[] {
                        DataDrivenSubscriptionID,
                        ExtensionSettings,
                        DataRetrievalPlan,
                        Description,
                        EventType,
                        MatchData,
                        Parameters} );
        }

        /// <remarks/>
        public void SetDataDrivenSubscriptionPropertiesAsync( string DataDrivenSubscriptionID, ExtensionSettings ExtensionSettings, DataRetrievalPlan DataRetrievalPlan, string Description, string EventType, string MatchData, ParameterValueOrFieldReference[] Parameters )
        {
            this.SetDataDrivenSubscriptionPropertiesAsync( DataDrivenSubscriptionID, ExtensionSettings, DataRetrievalPlan, Description, EventType, MatchData, Parameters, null );
        }

        /// <remarks/>
        public void SetDataDrivenSubscriptionPropertiesAsync( string DataDrivenSubscriptionID, ExtensionSettings ExtensionSettings, DataRetrievalPlan DataRetrievalPlan, string Description, string EventType, string MatchData, ParameterValueOrFieldReference[] Parameters, object userState )
        {
            if ( ( this.SetDataDrivenSubscriptionPropertiesOperationCompleted == null ) )
            {
                this.SetDataDrivenSubscriptionPropertiesOperationCompleted = new System.Threading.SendOrPostCallback( this.OnSetDataDrivenSubscriptionPropertiesOperationCompleted );
            }
            this.InvokeAsync( "SetDataDrivenSubscriptionProperties", new object[] {
                        DataDrivenSubscriptionID,
                        ExtensionSettings,
                        DataRetrievalPlan,
                        Description,
                        EventType,
                        MatchData,
                        Parameters}, this.SetDataDrivenSubscriptionPropertiesOperationCompleted, userState );
        }

        private void OnSetDataDrivenSubscriptionPropertiesOperationCompleted( object arg )
        {
            if ( ( this.SetDataDrivenSubscriptionPropertiesCompleted != null ) )
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ( (System.Web.Services.Protocols.InvokeCompletedEventArgs)( arg ) );
                this.SetDataDrivenSubscriptionPropertiesCompleted( this, new System.ComponentModel.AsyncCompletedEventArgs( invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState ) );
            }
        }

        /// <remarks/>
        [System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Naming", "CA1706:ShortAcronymsShouldBeUppercase", MessageId = "0#" ), System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Design", "CA1021:AvoidOutParameters", MessageId = "7#" ), System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Design", "CA1021:AvoidOutParameters", MessageId = "6#" ), System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Design", "CA1021:AvoidOutParameters", MessageId = "5#" ), System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Design", "CA1021:AvoidOutParameters", MessageId = "4#" ), System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Design", "CA1021:AvoidOutParameters", MessageId = "3#" ), System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Design", "CA1021:AvoidOutParameters", MessageId = "2#" ), System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Design", "CA1021:AvoidOutParameters", MessageId = "1#" ), System.Web.Services.Protocols.SoapHeaderAttribute( "ServerInfoHeaderValue", Direction = System.Web.Services.Protocols.SoapHeaderDirection.Out )]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute( "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices/Get" +
            "SubscriptionProperties", RequestNamespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices", ResponseNamespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped )]
        [return: System.Xml.Serialization.XmlElementAttribute( "Owner" )]
        public string GetSubscriptionProperties( string SubscriptionID, out ExtensionSettings ExtensionSettings, out string Description, out ActiveState Active, out string Status, out string EventType, out string MatchData, out ParameterValue[] Parameters )
        {
            object[] results = this.Invoke( "GetSubscriptionProperties", new object[] {
                        SubscriptionID} );
            ExtensionSettings = ( (ExtensionSettings)( results[ 1 ] ) );
            Description = ( (string)( results[ 2 ] ) );
            Active = ( (ActiveState)( results[ 3 ] ) );
            Status = ( (string)( results[ 4 ] ) );
            EventType = ( (string)( results[ 5 ] ) );
            MatchData = ( (string)( results[ 6 ] ) );
            Parameters = ( (ParameterValue[])( results[ 7 ] ) );
            return ( (string)( results[ 0 ] ) );
        }

        /// <remarks/>
        [System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Naming", "CA1706:ShortAcronymsShouldBeUppercase", MessageId = "0#" )]
        public void GetSubscriptionPropertiesAsync( string SubscriptionID )
        {
            this.GetSubscriptionPropertiesAsync( SubscriptionID, null );
        }

        /// <remarks/>
        public void GetSubscriptionPropertiesAsync( string SubscriptionID, object userState )
        {
            if ( ( this.GetSubscriptionPropertiesOperationCompleted == null ) )
            {
                this.GetSubscriptionPropertiesOperationCompleted = new System.Threading.SendOrPostCallback( this.OnGetSubscriptionPropertiesOperationCompleted );
            }
            this.InvokeAsync( "GetSubscriptionProperties", new object[] {
                        SubscriptionID}, this.GetSubscriptionPropertiesOperationCompleted, userState );
        }

        private void OnGetSubscriptionPropertiesOperationCompleted( object arg )
        {
            if ( ( this.GetSubscriptionPropertiesCompleted != null ) )
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ( (System.Web.Services.Protocols.InvokeCompletedEventArgs)( arg ) );
                this.GetSubscriptionPropertiesCompleted( this, new GetSubscriptionPropertiesCompletedEventArgs( invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState ) );
            }
        }

        /// <remarks/>
        [System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Naming", "CA1706:ShortAcronymsShouldBeUppercase", MessageId = "0#" ), System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Design", "CA1021:AvoidOutParameters", MessageId = "8#" ), System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Design", "CA1021:AvoidOutParameters", MessageId = "7#" ), System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Design", "CA1021:AvoidOutParameters", MessageId = "6#" ), System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Design", "CA1021:AvoidOutParameters", MessageId = "5#" ), System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Design", "CA1021:AvoidOutParameters", MessageId = "4#" ), System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Design", "CA1021:AvoidOutParameters", MessageId = "3#" ), System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Design", "CA1021:AvoidOutParameters", MessageId = "2#" ), System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Design", "CA1021:AvoidOutParameters", MessageId = "1#" ), System.Web.Services.Protocols.SoapHeaderAttribute( "ServerInfoHeaderValue", Direction = System.Web.Services.Protocols.SoapHeaderDirection.Out )]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute( "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices/Get" +
            "DataDrivenSubscriptionProperties", RequestNamespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices", ResponseNamespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped )]
        [return: System.Xml.Serialization.XmlElementAttribute( "Owner" )]
        public string GetDataDrivenSubscriptionProperties( string DataDrivenSubscriptionID, out ExtensionSettings ExtensionSettings, out DataRetrievalPlan DataRetrievalPlan, out string Description, out ActiveState Active, out string Status, out string EventType, out string MatchData, out ParameterValueOrFieldReference[] Parameters )
        {
            object[] results = this.Invoke( "GetDataDrivenSubscriptionProperties", new object[] {
                        DataDrivenSubscriptionID} );
            ExtensionSettings = ( (ExtensionSettings)( results[ 1 ] ) );
            DataRetrievalPlan = ( (DataRetrievalPlan)( results[ 2 ] ) );
            Description = ( (string)( results[ 3 ] ) );
            Active = ( (ActiveState)( results[ 4 ] ) );
            Status = ( (string)( results[ 5 ] ) );
            EventType = ( (string)( results[ 6 ] ) );
            MatchData = ( (string)( results[ 7 ] ) );
            Parameters = ( (ParameterValueOrFieldReference[])( results[ 8 ] ) );
            return ( (string)( results[ 0 ] ) );
        }

        /// <remarks/>
        [System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Naming", "CA1706:ShortAcronymsShouldBeUppercase", MessageId = "0#" )]
        public void GetDataDrivenSubscriptionPropertiesAsync( string DataDrivenSubscriptionID )
        {
            this.GetDataDrivenSubscriptionPropertiesAsync( DataDrivenSubscriptionID, null );
        }

        /// <remarks/>
        public void GetDataDrivenSubscriptionPropertiesAsync( string DataDrivenSubscriptionID, object userState )
        {
            if ( ( this.GetDataDrivenSubscriptionPropertiesOperationCompleted == null ) )
            {
                this.GetDataDrivenSubscriptionPropertiesOperationCompleted = new System.Threading.SendOrPostCallback( this.OnGetDataDrivenSubscriptionPropertiesOperationCompleted );
            }
            this.InvokeAsync( "GetDataDrivenSubscriptionProperties", new object[] {
                        DataDrivenSubscriptionID}, this.GetDataDrivenSubscriptionPropertiesOperationCompleted, userState );
        }

        private void OnGetDataDrivenSubscriptionPropertiesOperationCompleted( object arg )
        {
            if ( ( this.GetDataDrivenSubscriptionPropertiesCompleted != null ) )
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ( (System.Web.Services.Protocols.InvokeCompletedEventArgs)( arg ) );
                this.GetDataDrivenSubscriptionPropertiesCompleted( this, new GetDataDrivenSubscriptionPropertiesCompletedEventArgs( invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState ) );
            }
        }

        /// <remarks/>
        [System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Naming", "CA1706:ShortAcronymsShouldBeUppercase", MessageId = "0#" ), System.Web.Services.Protocols.SoapHeaderAttribute( "ServerInfoHeaderValue", Direction = System.Web.Services.Protocols.SoapHeaderDirection.Out )]
        [System.Web.Services.Protocols.SoapHeaderAttribute( "BatchHeaderValue" )]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute( "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices/Del" +
            "eteSubscription", RequestNamespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices", ResponseNamespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped )]
        public void DeleteSubscription( string SubscriptionID )
        {
            this.Invoke( "DeleteSubscription", new object[] {
                        SubscriptionID} );
        }

        /// <remarks/>
        [System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Naming", "CA1706:ShortAcronymsShouldBeUppercase", MessageId = "0#" )]
        public void DeleteSubscriptionAsync( string SubscriptionID )
        {
            this.DeleteSubscriptionAsync( SubscriptionID, null );
        }

        /// <remarks/>
        public void DeleteSubscriptionAsync( string SubscriptionID, object userState )
        {
            if ( ( this.DeleteSubscriptionOperationCompleted == null ) )
            {
                this.DeleteSubscriptionOperationCompleted = new System.Threading.SendOrPostCallback( this.OnDeleteSubscriptionOperationCompleted );
            }
            this.InvokeAsync( "DeleteSubscription", new object[] {
                        SubscriptionID}, this.DeleteSubscriptionOperationCompleted, userState );
        }

        private void OnDeleteSubscriptionOperationCompleted( object arg )
        {
            if ( ( this.DeleteSubscriptionCompleted != null ) )
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ( (System.Web.Services.Protocols.InvokeCompletedEventArgs)( arg ) );
                this.DeleteSubscriptionCompleted( this, new System.ComponentModel.AsyncCompletedEventArgs( invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState ) );
            }
        }

        /// <remarks/>
        [System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Design", "CA1021:AvoidOutParameters", MessageId = "3#" ), System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Design", "CA1021:AvoidOutParameters", MessageId = "2#" ), System.Web.Services.Protocols.SoapHeaderAttribute( "ServerInfoHeaderValue", Direction = System.Web.Services.Protocols.SoapHeaderDirection.Out )]
        [System.Web.Services.Protocols.SoapHeaderAttribute( "BatchHeaderValue" )]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute( "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices/Pre" +
            "pareQuery", RequestNamespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices", ResponseNamespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped )]
        [return: System.Xml.Serialization.XmlElementAttribute( "DataSettings" )]
        public DataSetDefinition PrepareQuery( DataSource DataSource, DataSetDefinition DataSet, out bool Changed, out string[] ParameterNames )
        {
            object[] results = this.Invoke( "PrepareQuery", new object[] {
                        DataSource,
                        DataSet} );
            Changed = ( (bool)( results[ 1 ] ) );
            ParameterNames = ( (string[])( results[ 2 ] ) );
            return ( (DataSetDefinition)( results[ 0 ] ) );
        }

        /// <remarks/>
        public void PrepareQueryAsync( DataSource DataSource, DataSetDefinition DataSet )
        {
            this.PrepareQueryAsync( DataSource, DataSet, null );
        }

        /// <remarks/>
        public void PrepareQueryAsync( DataSource DataSource, DataSetDefinition DataSet, object userState )
        {
            if ( ( this.PrepareQueryOperationCompleted == null ) )
            {
                this.PrepareQueryOperationCompleted = new System.Threading.SendOrPostCallback( this.OnPrepareQueryOperationCompleted );
            }
            this.InvokeAsync( "PrepareQuery", new object[] {
                        DataSource,
                        DataSet}, this.PrepareQueryOperationCompleted, userState );
        }

        private void OnPrepareQueryOperationCompleted( object arg )
        {
            if ( ( this.PrepareQueryCompleted != null ) )
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ( (System.Web.Services.Protocols.InvokeCompletedEventArgs)( arg ) );
                this.PrepareQueryCompleted( this, new PrepareQueryCompletedEventArgs( invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState ) );
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute( "ServerInfoHeaderValue", Direction = System.Web.Services.Protocols.SoapHeaderDirection.Out )]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute( "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices/Get" +
            "ExtensionSettings", RequestNamespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices", ResponseNamespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped )]
        [return: System.Xml.Serialization.XmlArrayAttribute( "ExtensionParameters" )]
        public ExtensionParameter[] GetExtensionSettings( string Extension )
        {
            object[] results = this.Invoke( "GetExtensionSettings", new object[] {
                        Extension} );
            return ( (ExtensionParameter[])( results[ 0 ] ) );
        }

        /// <remarks/>
        public void GetExtensionSettingsAsync( string Extension )
        {
            this.GetExtensionSettingsAsync( Extension, null );
        }

        /// <remarks/>
        public void GetExtensionSettingsAsync( string Extension, object userState )
        {
            if ( ( this.GetExtensionSettingsOperationCompleted == null ) )
            {
                this.GetExtensionSettingsOperationCompleted = new System.Threading.SendOrPostCallback( this.OnGetExtensionSettingsOperationCompleted );
            }
            this.InvokeAsync( "GetExtensionSettings", new object[] {
                        Extension}, this.GetExtensionSettingsOperationCompleted, userState );
        }

        private void OnGetExtensionSettingsOperationCompleted( object arg )
        {
            if ( ( this.GetExtensionSettingsCompleted != null ) )
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ( (System.Web.Services.Protocols.InvokeCompletedEventArgs)( arg ) );
                this.GetExtensionSettingsCompleted( this, new GetExtensionSettingsCompletedEventArgs( invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState ) );
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute( "ServerInfoHeaderValue", Direction = System.Web.Services.Protocols.SoapHeaderDirection.Out )]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute( "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices/Val" +
            "idateExtensionSettings", RequestNamespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices", ResponseNamespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped )]
        [return: System.Xml.Serialization.XmlArrayAttribute( "ParameterErrors" )]
        public ExtensionParameter[] ValidateExtensionSettings( string Extension, ParameterValueOrFieldReference[] ParameterValues )
        {
            object[] results = this.Invoke( "ValidateExtensionSettings", new object[] {
                        Extension,
                        ParameterValues} );
            return ( (ExtensionParameter[])( results[ 0 ] ) );
        }

        /// <remarks/>
        public void ValidateExtensionSettingsAsync( string Extension, ParameterValueOrFieldReference[] ParameterValues )
        {
            this.ValidateExtensionSettingsAsync( Extension, ParameterValues, null );
        }

        /// <remarks/>
        public void ValidateExtensionSettingsAsync( string Extension, ParameterValueOrFieldReference[] ParameterValues, object userState )
        {
            if ( ( this.ValidateExtensionSettingsOperationCompleted == null ) )
            {
                this.ValidateExtensionSettingsOperationCompleted = new System.Threading.SendOrPostCallback( this.OnValidateExtensionSettingsOperationCompleted );
            }
            this.InvokeAsync( "ValidateExtensionSettings", new object[] {
                        Extension,
                        ParameterValues}, this.ValidateExtensionSettingsOperationCompleted, userState );
        }

        private void OnValidateExtensionSettingsOperationCompleted( object arg )
        {
            if ( ( this.ValidateExtensionSettingsCompleted != null ) )
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ( (System.Web.Services.Protocols.InvokeCompletedEventArgs)( arg ) );
                this.ValidateExtensionSettingsCompleted( this, new ValidateExtensionSettingsCompletedEventArgs( invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState ) );
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute( "ServerInfoHeaderValue", Direction = System.Web.Services.Protocols.SoapHeaderDirection.Out )]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute( "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices/Lis" +
            "tSubscriptions", RequestNamespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices", ResponseNamespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped )]
        [return: System.Xml.Serialization.XmlArrayAttribute( "SubscriptionItems" )]
        public Subscription[] ListSubscriptions( string Report, string Owner )
        {
            object[] results = this.Invoke( "ListSubscriptions", new object[] {
                        Report,
                        Owner} );
            return ( (Subscription[])( results[ 0 ] ) );
        }

        /// <remarks/>
        public void ListSubscriptionsAsync( string Report, string Owner )
        {
            this.ListSubscriptionsAsync( Report, Owner, null );
        }

        /// <remarks/>
        public void ListSubscriptionsAsync( string Report, string Owner, object userState )
        {
            if ( ( this.ListSubscriptionsOperationCompleted == null ) )
            {
                this.ListSubscriptionsOperationCompleted = new System.Threading.SendOrPostCallback( this.OnListSubscriptionsOperationCompleted );
            }
            this.InvokeAsync( "ListSubscriptions", new object[] {
                        Report,
                        Owner}, this.ListSubscriptionsOperationCompleted, userState );
        }

        private void OnListSubscriptionsOperationCompleted( object arg )
        {
            if ( ( this.ListSubscriptionsCompleted != null ) )
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ( (System.Web.Services.Protocols.InvokeCompletedEventArgs)( arg ) );
                this.ListSubscriptionsCompleted( this, new ListSubscriptionsCompletedEventArgs( invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState ) );
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute( "ServerInfoHeaderValue", Direction = System.Web.Services.Protocols.SoapHeaderDirection.Out )]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute( "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices/Lis" +
            "tSubscriptionsUsingDataSource", RequestNamespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices", ResponseNamespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped )]
        [return: System.Xml.Serialization.XmlArrayAttribute( "SubscriptionItems" )]
        public Subscription[] ListSubscriptionsUsingDataSource( string DataSource )
        {
            object[] results = this.Invoke( "ListSubscriptionsUsingDataSource", new object[] {
                        DataSource} );
            return ( (Subscription[])( results[ 0 ] ) );
        }

        /// <remarks/>
        public void ListSubscriptionsUsingDataSourceAsync( string DataSource )
        {
            this.ListSubscriptionsUsingDataSourceAsync( DataSource, null );
        }

        /// <remarks/>
        public void ListSubscriptionsUsingDataSourceAsync( string DataSource, object userState )
        {
            if ( ( this.ListSubscriptionsUsingDataSourceOperationCompleted == null ) )
            {
                this.ListSubscriptionsUsingDataSourceOperationCompleted = new System.Threading.SendOrPostCallback( this.OnListSubscriptionsUsingDataSourceOperationCompleted );
            }
            this.InvokeAsync( "ListSubscriptionsUsingDataSource", new object[] {
                        DataSource}, this.ListSubscriptionsUsingDataSourceOperationCompleted, userState );
        }

        private void OnListSubscriptionsUsingDataSourceOperationCompleted( object arg )
        {
            if ( ( this.ListSubscriptionsUsingDataSourceCompleted != null ) )
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ( (System.Web.Services.Protocols.InvokeCompletedEventArgs)( arg ) );
                this.ListSubscriptionsUsingDataSourceCompleted( this, new ListSubscriptionsUsingDataSourceCompletedEventArgs( invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState ) );
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute( "ServerInfoHeaderValue", Direction = System.Web.Services.Protocols.SoapHeaderDirection.Out )]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute( "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices/Lis" +
            "tExtensions", RequestNamespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices", ResponseNamespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped )]
        [return: System.Xml.Serialization.XmlArrayAttribute( "Extensions" )]
        public Extension[] ListExtensions( ExtensionTypeEnum ExtensionType )
        {
            object[] results = this.Invoke( "ListExtensions", new object[] {
                        ExtensionType} );
            return ( (Extension[])( results[ 0 ] ) );
        }

        /// <remarks/>
        public void ListExtensionsAsync( ExtensionTypeEnum ExtensionType )
        {
            this.ListExtensionsAsync( ExtensionType, null );
        }

        /// <remarks/>
        public void ListExtensionsAsync( ExtensionTypeEnum ExtensionType, object userState )
        {
            if ( ( this.ListExtensionsOperationCompleted == null ) )
            {
                this.ListExtensionsOperationCompleted = new System.Threading.SendOrPostCallback( this.OnListExtensionsOperationCompleted );
            }
            this.InvokeAsync( "ListExtensions", new object[] {
                        ExtensionType}, this.ListExtensionsOperationCompleted, userState );
        }

        private void OnListExtensionsOperationCompleted( object arg )
        {
            if ( ( this.ListExtensionsCompleted != null ) )
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ( (System.Web.Services.Protocols.InvokeCompletedEventArgs)( arg ) );
                this.ListExtensionsCompleted( this, new ListExtensionsCompletedEventArgs( invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState ) );
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute( "ServerInfoHeaderValue", Direction = System.Web.Services.Protocols.SoapHeaderDirection.Out )]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute( "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices/Lis" +
            "tEvents", RequestNamespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices", ResponseNamespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped )]
        [return: System.Xml.Serialization.XmlArrayAttribute( "Events" )]
        public Event[] ListEvents()
        {
            object[] results = this.Invoke( "ListEvents", new object[ 0 ] );
            return ( (Event[])( results[ 0 ] ) );
        }

        /// <remarks/>
        public void ListEventsAsync()
        {
            this.ListEventsAsync( null );
        }

        /// <remarks/>
        public void ListEventsAsync( object userState )
        {
            if ( ( this.ListEventsOperationCompleted == null ) )
            {
                this.ListEventsOperationCompleted = new System.Threading.SendOrPostCallback( this.OnListEventsOperationCompleted );
            }
            this.InvokeAsync( "ListEvents", new object[ 0 ], this.ListEventsOperationCompleted, userState );
        }

        private void OnListEventsOperationCompleted( object arg )
        {
            if ( ( this.ListEventsCompleted != null ) )
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ( (System.Web.Services.Protocols.InvokeCompletedEventArgs)( arg ) );
                this.ListEventsCompleted( this, new ListEventsCompletedEventArgs( invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState ) );
            }
        }

        /// <remarks/>
        [System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Design", "CA1030:UseEventsWhereAppropriate" ), System.Web.Services.Protocols.SoapHeaderAttribute( "ServerInfoHeaderValue", Direction = System.Web.Services.Protocols.SoapHeaderDirection.Out )]
        [System.Web.Services.Protocols.SoapHeaderAttribute( "BatchHeaderValue" )]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute( "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices/Fir" +
            "eEvent", RequestNamespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices", ResponseNamespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped )]
        public void FireEvent( string EventType, string EventData )
        {
            this.Invoke( "FireEvent", new object[] {
                        EventType,
                        EventData} );
        }

        /// <remarks/>
        public void FireEventAsync( string EventType, string EventData )
        {
            this.FireEventAsync( EventType, EventData, null );
        }

        /// <remarks/>
        public void FireEventAsync( string EventType, string EventData, object userState )
        {
            if ( ( this.FireEventOperationCompleted == null ) )
            {
                this.FireEventOperationCompleted = new System.Threading.SendOrPostCallback( this.OnFireEventOperationCompleted );
            }
            this.InvokeAsync( "FireEvent", new object[] {
                        EventType,
                        EventData}, this.FireEventOperationCompleted, userState );
        }

        private void OnFireEventOperationCompleted( object arg )
        {
            if ( ( this.FireEventCompleted != null ) )
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ( (System.Web.Services.Protocols.InvokeCompletedEventArgs)( arg ) );
                this.FireEventCompleted( this, new System.ComponentModel.AsyncCompletedEventArgs( invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState ) );
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute( "ServerInfoHeaderValue", Direction = System.Web.Services.Protocols.SoapHeaderDirection.Out )]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute( "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices/Lis" +
            "tTasks", RequestNamespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices", ResponseNamespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped )]
        [return: System.Xml.Serialization.XmlArrayAttribute( "Tasks" )]
        public Task[] ListTasks( SecurityScopeEnum SecurityScope )
        {
            object[] results = this.Invoke( "ListTasks", new object[] {
                        SecurityScope} );
            return ( (Task[])( results[ 0 ] ) );
        }

        /// <remarks/>
        public void ListTasksAsync( SecurityScopeEnum SecurityScope )
        {
            this.ListTasksAsync( SecurityScope, null );
        }

        /// <remarks/>
        public void ListTasksAsync( SecurityScopeEnum SecurityScope, object userState )
        {
            if ( ( this.ListTasksOperationCompleted == null ) )
            {
                this.ListTasksOperationCompleted = new System.Threading.SendOrPostCallback( this.OnListTasksOperationCompleted );
            }
            this.InvokeAsync( "ListTasks", new object[] {
                        SecurityScope}, this.ListTasksOperationCompleted, userState );
        }

        private void OnListTasksOperationCompleted( object arg )
        {
            if ( ( this.ListTasksCompleted != null ) )
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ( (System.Web.Services.Protocols.InvokeCompletedEventArgs)( arg ) );
                this.ListTasksCompleted( this, new ListTasksCompletedEventArgs( invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState ) );
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute( "ServerInfoHeaderValue", Direction = System.Web.Services.Protocols.SoapHeaderDirection.Out )]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute( "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices/Lis" +
            "tRoles", RequestNamespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices", ResponseNamespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped )]
        [return: System.Xml.Serialization.XmlArrayAttribute( "Roles" )]
        public Role[] ListRoles( SecurityScopeEnum SecurityScope )
        {
            object[] results = this.Invoke( "ListRoles", new object[] {
                        SecurityScope} );
            return ( (Role[])( results[ 0 ] ) );
        }

        /// <remarks/>
        public void ListRolesAsync( SecurityScopeEnum SecurityScope )
        {
            this.ListRolesAsync( SecurityScope, null );
        }

        /// <remarks/>
        public void ListRolesAsync( SecurityScopeEnum SecurityScope, object userState )
        {
            if ( ( this.ListRolesOperationCompleted == null ) )
            {
                this.ListRolesOperationCompleted = new System.Threading.SendOrPostCallback( this.OnListRolesOperationCompleted );
            }
            this.InvokeAsync( "ListRoles", new object[] {
                        SecurityScope}, this.ListRolesOperationCompleted, userState );
        }

        private void OnListRolesOperationCompleted( object arg )
        {
            if ( ( this.ListRolesCompleted != null ) )
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ( (System.Web.Services.Protocols.InvokeCompletedEventArgs)( arg ) );
                this.ListRolesCompleted( this, new ListRolesCompletedEventArgs( invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState ) );
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute( "ServerInfoHeaderValue", Direction = System.Web.Services.Protocols.SoapHeaderDirection.Out )]
        [System.Web.Services.Protocols.SoapHeaderAttribute( "BatchHeaderValue" )]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute( "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices/Cre" +
            "ateRole", RequestNamespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices", ResponseNamespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped )]
        public void CreateRole( string Name, string Description, Task[] Tasks )
        {
            this.Invoke( "CreateRole", new object[] {
                        Name,
                        Description,
                        Tasks} );
        }

        /// <remarks/>
        public void CreateRoleAsync( string Name, string Description, Task[] Tasks )
        {
            this.CreateRoleAsync( Name, Description, Tasks, null );
        }

        /// <remarks/>
        public void CreateRoleAsync( string Name, string Description, Task[] Tasks, object userState )
        {
            if ( ( this.CreateRoleOperationCompleted == null ) )
            {
                this.CreateRoleOperationCompleted = new System.Threading.SendOrPostCallback( this.OnCreateRoleOperationCompleted );
            }
            this.InvokeAsync( "CreateRole", new object[] {
                        Name,
                        Description,
                        Tasks}, this.CreateRoleOperationCompleted, userState );
        }

        private void OnCreateRoleOperationCompleted( object arg )
        {
            if ( ( this.CreateRoleCompleted != null ) )
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ( (System.Web.Services.Protocols.InvokeCompletedEventArgs)( arg ) );
                this.CreateRoleCompleted( this, new System.ComponentModel.AsyncCompletedEventArgs( invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState ) );
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute( "ServerInfoHeaderValue", Direction = System.Web.Services.Protocols.SoapHeaderDirection.Out )]
        [System.Web.Services.Protocols.SoapHeaderAttribute( "BatchHeaderValue" )]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute( "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices/Del" +
            "eteRole", RequestNamespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices", ResponseNamespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped )]
        public void DeleteRole( string Name )
        {
            this.Invoke( "DeleteRole", new object[] {
                        Name} );
        }

        /// <remarks/>
        public void DeleteRoleAsync( string Name )
        {
            this.DeleteRoleAsync( Name, null );
        }

        /// <remarks/>
        public void DeleteRoleAsync( string Name, object userState )
        {
            if ( ( this.DeleteRoleOperationCompleted == null ) )
            {
                this.DeleteRoleOperationCompleted = new System.Threading.SendOrPostCallback( this.OnDeleteRoleOperationCompleted );
            }
            this.InvokeAsync( "DeleteRole", new object[] {
                        Name}, this.DeleteRoleOperationCompleted, userState );
        }

        private void OnDeleteRoleOperationCompleted( object arg )
        {
            if ( ( this.DeleteRoleCompleted != null ) )
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ( (System.Web.Services.Protocols.InvokeCompletedEventArgs)( arg ) );
                this.DeleteRoleCompleted( this, new System.ComponentModel.AsyncCompletedEventArgs( invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState ) );
            }
        }

        /// <remarks/>
        [System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Design", "CA1021:AvoidOutParameters", MessageId = "1#" ), System.Web.Services.Protocols.SoapHeaderAttribute( "ServerInfoHeaderValue", Direction = System.Web.Services.Protocols.SoapHeaderDirection.Out )]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute( "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices/Get" +
            "RoleProperties", RequestNamespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices", ResponseNamespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped )]
        [return: System.Xml.Serialization.XmlArrayAttribute( "Tasks" )]
        public Task[] GetRoleProperties( string Name, out string Description )
        {
            object[] results = this.Invoke( "GetRoleProperties", new object[] {
                        Name} );
            Description = ( (string)( results[ 1 ] ) );
            return ( (Task[])( results[ 0 ] ) );
        }

        /// <remarks/>
        public void GetRolePropertiesAsync( string Name )
        {
            this.GetRolePropertiesAsync( Name, null );
        }

        /// <remarks/>
        public void GetRolePropertiesAsync( string Name, object userState )
        {
            if ( ( this.GetRolePropertiesOperationCompleted == null ) )
            {
                this.GetRolePropertiesOperationCompleted = new System.Threading.SendOrPostCallback( this.OnGetRolePropertiesOperationCompleted );
            }
            this.InvokeAsync( "GetRoleProperties", new object[] {
                        Name}, this.GetRolePropertiesOperationCompleted, userState );
        }

        private void OnGetRolePropertiesOperationCompleted( object arg )
        {
            if ( ( this.GetRolePropertiesCompleted != null ) )
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ( (System.Web.Services.Protocols.InvokeCompletedEventArgs)( arg ) );
                this.GetRolePropertiesCompleted( this, new GetRolePropertiesCompletedEventArgs( invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState ) );
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute( "ServerInfoHeaderValue", Direction = System.Web.Services.Protocols.SoapHeaderDirection.Out )]
        [System.Web.Services.Protocols.SoapHeaderAttribute( "BatchHeaderValue" )]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute( "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices/Set" +
            "RoleProperties", RequestNamespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices", ResponseNamespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped )]
        public void SetRoleProperties( string Name, string Description, Task[] Tasks )
        {
            this.Invoke( "SetRoleProperties", new object[] {
                        Name,
                        Description,
                        Tasks} );
        }

        /// <remarks/>
        public void SetRolePropertiesAsync( string Name, string Description, Task[] Tasks )
        {
            this.SetRolePropertiesAsync( Name, Description, Tasks, null );
        }

        /// <remarks/>
        public void SetRolePropertiesAsync( string Name, string Description, Task[] Tasks, object userState )
        {
            if ( ( this.SetRolePropertiesOperationCompleted == null ) )
            {
                this.SetRolePropertiesOperationCompleted = new System.Threading.SendOrPostCallback( this.OnSetRolePropertiesOperationCompleted );
            }
            this.InvokeAsync( "SetRoleProperties", new object[] {
                        Name,
                        Description,
                        Tasks}, this.SetRolePropertiesOperationCompleted, userState );
        }

        private void OnSetRolePropertiesOperationCompleted( object arg )
        {
            if ( ( this.SetRolePropertiesCompleted != null ) )
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ( (System.Web.Services.Protocols.InvokeCompletedEventArgs)( arg ) );
                this.SetRolePropertiesCompleted( this, new System.ComponentModel.AsyncCompletedEventArgs( invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState ) );
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute( "ServerInfoHeaderValue", Direction = System.Web.Services.Protocols.SoapHeaderDirection.Out )]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute( "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices/Get" +
            "SystemPolicies", RequestNamespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices", ResponseNamespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped )]
        [return: System.Xml.Serialization.XmlArrayAttribute( "Policies" )]
        public Policy[] GetSystemPolicies()
        {
            object[] results = this.Invoke( "GetSystemPolicies", new object[ 0 ] );
            return ( (Policy[])( results[ 0 ] ) );
        }

        /// <remarks/>
        public void GetSystemPoliciesAsync()
        {
            this.GetSystemPoliciesAsync( null );
        }

        /// <remarks/>
        public void GetSystemPoliciesAsync( object userState )
        {
            if ( ( this.GetSystemPoliciesOperationCompleted == null ) )
            {
                this.GetSystemPoliciesOperationCompleted = new System.Threading.SendOrPostCallback( this.OnGetSystemPoliciesOperationCompleted );
            }
            this.InvokeAsync( "GetSystemPolicies", new object[ 0 ], this.GetSystemPoliciesOperationCompleted, userState );
        }

        private void OnGetSystemPoliciesOperationCompleted( object arg )
        {
            if ( ( this.GetSystemPoliciesCompleted != null ) )
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ( (System.Web.Services.Protocols.InvokeCompletedEventArgs)( arg ) );
                this.GetSystemPoliciesCompleted( this, new GetSystemPoliciesCompletedEventArgs( invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState ) );
            }
        }

        /// <remarks/>
        [System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Design", "CA1024:UsePropertiesWhereAppropriate" ), System.Web.Services.Protocols.SoapHeaderAttribute( "ServerInfoHeaderValue", Direction = System.Web.Services.Protocols.SoapHeaderDirection.Out )]
        [System.Web.Services.Protocols.SoapHeaderAttribute( "BatchHeaderValue" )]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute( "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices/Set" +
            "SystemPolicies", RequestNamespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices", ResponseNamespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped )]
        public void SetSystemPolicies( Policy[] Policies )
        {
            this.Invoke( "SetSystemPolicies", new object[] {
                        Policies} );
        }

        /// <remarks/>
        public void SetSystemPoliciesAsync( Policy[] Policies )
        {
            this.SetSystemPoliciesAsync( Policies, null );
        }

        /// <remarks/>
        public void SetSystemPoliciesAsync( Policy[] Policies, object userState )
        {
            if ( ( this.SetSystemPoliciesOperationCompleted == null ) )
            {
                this.SetSystemPoliciesOperationCompleted = new System.Threading.SendOrPostCallback( this.OnSetSystemPoliciesOperationCompleted );
            }
            this.InvokeAsync( "SetSystemPolicies", new object[] {
                        Policies}, this.SetSystemPoliciesOperationCompleted, userState );
        }

        private void OnSetSystemPoliciesOperationCompleted( object arg )
        {
            if ( ( this.SetSystemPoliciesCompleted != null ) )
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ( (System.Web.Services.Protocols.InvokeCompletedEventArgs)( arg ) );
                this.SetSystemPoliciesCompleted( this, new System.ComponentModel.AsyncCompletedEventArgs( invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState ) );
            }
        }

        /// <remarks/>
        [System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Design", "CA1021:AvoidOutParameters", MessageId = "1#" ), System.Web.Services.Protocols.SoapHeaderAttribute( "ServerInfoHeaderValue", Direction = System.Web.Services.Protocols.SoapHeaderDirection.Out )]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute( "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices/Get" +
            "Policies", RequestNamespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices", ResponseNamespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped )]
        [return: System.Xml.Serialization.XmlArrayAttribute( "Policies" )]
        public Policy[] GetPolicies( string Item, out bool InheritParent )
        {
            object[] results = this.Invoke( "GetPolicies", new object[] {
                        Item} );
            InheritParent = ( (bool)( results[ 1 ] ) );
            return ( (Policy[])( results[ 0 ] ) );
        }

        /// <remarks/>
        public void GetPoliciesAsync( string Item )
        {
            this.GetPoliciesAsync( Item, null );
        }

        /// <remarks/>
        public void GetPoliciesAsync( string Item, object userState )
        {
            if ( ( this.GetPoliciesOperationCompleted == null ) )
            {
                this.GetPoliciesOperationCompleted = new System.Threading.SendOrPostCallback( this.OnGetPoliciesOperationCompleted );
            }
            this.InvokeAsync( "GetPolicies", new object[] {
                        Item}, this.GetPoliciesOperationCompleted, userState );
        }

        private void OnGetPoliciesOperationCompleted( object arg )
        {
            if ( ( this.GetPoliciesCompleted != null ) )
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ( (System.Web.Services.Protocols.InvokeCompletedEventArgs)( arg ) );
                this.GetPoliciesCompleted( this, new GetPoliciesCompletedEventArgs( invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState ) );
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute( "ServerInfoHeaderValue", Direction = System.Web.Services.Protocols.SoapHeaderDirection.Out )]
        [System.Web.Services.Protocols.SoapHeaderAttribute( "BatchHeaderValue" )]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute( "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices/Set" +
            "Policies", RequestNamespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices", ResponseNamespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped )]
        public void SetPolicies( string Item, Policy[] Policies )
        {
            this.Invoke( "SetPolicies", new object[] {
                        Item,
                        Policies} );
        }

        /// <remarks/>
        public void SetPoliciesAsync( string Item, Policy[] Policies )
        {
            this.SetPoliciesAsync( Item, Policies, null );
        }

        /// <remarks/>
        public void SetPoliciesAsync( string Item, Policy[] Policies, object userState )
        {
            if ( ( this.SetPoliciesOperationCompleted == null ) )
            {
                this.SetPoliciesOperationCompleted = new System.Threading.SendOrPostCallback( this.OnSetPoliciesOperationCompleted );
            }
            this.InvokeAsync( "SetPolicies", new object[] {
                        Item,
                        Policies}, this.SetPoliciesOperationCompleted, userState );
        }

        private void OnSetPoliciesOperationCompleted( object arg )
        {
            if ( ( this.SetPoliciesCompleted != null ) )
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ( (System.Web.Services.Protocols.InvokeCompletedEventArgs)( arg ) );
                this.SetPoliciesCompleted( this, new System.ComponentModel.AsyncCompletedEventArgs( invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState ) );
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute( "ServerInfoHeaderValue", Direction = System.Web.Services.Protocols.SoapHeaderDirection.Out )]
        [System.Web.Services.Protocols.SoapHeaderAttribute( "BatchHeaderValue" )]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute( "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices/Inh" +
            "eritParentSecurity", RequestNamespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices", ResponseNamespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped )]
        public void InheritParentSecurity( string Item )
        {
            this.Invoke( "InheritParentSecurity", new object[] {
                        Item} );
        }

        /// <remarks/>
        public void InheritParentSecurityAsync( string Item )
        {
            this.InheritParentSecurityAsync( Item, null );
        }

        /// <remarks/>
        public void InheritParentSecurityAsync( string Item, object userState )
        {
            if ( ( this.InheritParentSecurityOperationCompleted == null ) )
            {
                this.InheritParentSecurityOperationCompleted = new System.Threading.SendOrPostCallback( this.OnInheritParentSecurityOperationCompleted );
            }
            this.InvokeAsync( "InheritParentSecurity", new object[] {
                        Item}, this.InheritParentSecurityOperationCompleted, userState );
        }

        private void OnInheritParentSecurityOperationCompleted( object arg )
        {
            if ( ( this.InheritParentSecurityCompleted != null ) )
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ( (System.Web.Services.Protocols.InvokeCompletedEventArgs)( arg ) );
                this.InheritParentSecurityCompleted( this, new System.ComponentModel.AsyncCompletedEventArgs( invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState ) );
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute( "ServerInfoHeaderValue", Direction = System.Web.Services.Protocols.SoapHeaderDirection.Out )]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute( "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices/Get" +
            "SystemPermissions", RequestNamespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices", ResponseNamespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped )]
        [return: System.Xml.Serialization.XmlArrayAttribute( "Permissions" )]
        [return: System.Xml.Serialization.XmlArrayItemAttribute( "Operation" )]
        public string[] GetSystemPermissions()
        {
            object[] results = this.Invoke( "GetSystemPermissions", new object[ 0 ] );
            return ( (string[])( results[ 0 ] ) );
        }

        /// <remarks/>
        public void GetSystemPermissionsAsync()
        {
            this.GetSystemPermissionsAsync( null );
        }

        /// <remarks/>
        public void GetSystemPermissionsAsync( object userState )
        {
            if ( ( this.GetSystemPermissionsOperationCompleted == null ) )
            {
                this.GetSystemPermissionsOperationCompleted = new System.Threading.SendOrPostCallback( this.OnGetSystemPermissionsOperationCompleted );
            }
            this.InvokeAsync( "GetSystemPermissions", new object[ 0 ], this.GetSystemPermissionsOperationCompleted, userState );
        }

        private void OnGetSystemPermissionsOperationCompleted( object arg )
        {
            if ( ( this.GetSystemPermissionsCompleted != null ) )
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ( (System.Web.Services.Protocols.InvokeCompletedEventArgs)( arg ) );
                this.GetSystemPermissionsCompleted( this, new GetSystemPermissionsCompletedEventArgs( invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState ) );
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute( "ServerInfoHeaderValue", Direction = System.Web.Services.Protocols.SoapHeaderDirection.Out )]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute( "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices/Get" +
            "Permissions", RequestNamespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices", ResponseNamespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped )]
        [return: System.Xml.Serialization.XmlArrayAttribute( "Permissions" )]
        [return: System.Xml.Serialization.XmlArrayItemAttribute( "Operation" )]
        public string[] GetPermissions( string Item )
        {
            object[] results = this.Invoke( "GetPermissions", new object[] {
                        Item} );
            return ( (string[])( results[ 0 ] ) );
        }

        /// <remarks/>
        public void GetPermissionsAsync( string Item )
        {
            this.GetPermissionsAsync( Item, null );
        }

        /// <remarks/>
        public void GetPermissionsAsync( string Item, object userState )
        {
            if ( ( this.GetPermissionsOperationCompleted == null ) )
            {
                this.GetPermissionsOperationCompleted = new System.Threading.SendOrPostCallback( this.OnGetPermissionsOperationCompleted );
            }
            this.InvokeAsync( "GetPermissions", new object[] {
                        Item}, this.GetPermissionsOperationCompleted, userState );
        }

        private void OnGetPermissionsOperationCompleted( object arg )
        {
            if ( ( this.GetPermissionsCompleted != null ) )
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ( (System.Web.Services.Protocols.InvokeCompletedEventArgs)( arg ) );
                this.GetPermissionsCompleted( this, new GetPermissionsCompletedEventArgs( invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState ) );
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute( "ServerInfoHeaderValue", Direction = System.Web.Services.Protocols.SoapHeaderDirection.Out )]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute( "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices/Log" +
            "onUser", RequestNamespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices", ResponseNamespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped )]
        public void LogonUser( string userName, string password, string authority )
        {
            this.Invoke( "LogonUser", new object[] {
                        userName,
                        password,
                        authority} );
        }

        /// <remarks/>
        public void LogonUserAsync( string userName, string password, string authority )
        {
            this.LogonUserAsync( userName, password, authority, null );
        }

        /// <remarks/>
        public void LogonUserAsync( string userName, string password, string authority, object userState )
        {
            if ( ( this.LogonUserOperationCompleted == null ) )
            {
                this.LogonUserOperationCompleted = new System.Threading.SendOrPostCallback( this.OnLogonUserOperationCompleted );
            }
            this.InvokeAsync( "LogonUser", new object[] {
                        userName,
                        password,
                        authority}, this.LogonUserOperationCompleted, userState );
        }

        private void OnLogonUserOperationCompleted( object arg )
        {
            if ( ( this.LogonUserCompleted != null ) )
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ( (System.Web.Services.Protocols.InvokeCompletedEventArgs)( arg ) );
                this.LogonUserCompleted( this, new System.ComponentModel.AsyncCompletedEventArgs( invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState ) );
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute( "ServerInfoHeaderValue", Direction = System.Web.Services.Protocols.SoapHeaderDirection.Out )]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute( "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices/Log" +
            "off", RequestNamespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices", ResponseNamespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped )]
        public void Logoff()
        {
            this.Invoke( "Logoff", new object[ 0 ] );
        }

        /// <remarks/>
        public void LogoffAsync()
        {
            this.LogoffAsync( null );
        }

        /// <remarks/>
        public void LogoffAsync( object userState )
        {
            if ( ( this.LogoffOperationCompleted == null ) )
            {
                this.LogoffOperationCompleted = new System.Threading.SendOrPostCallback( this.OnLogoffOperationCompleted );
            }
            this.InvokeAsync( "Logoff", new object[ 0 ], this.LogoffOperationCompleted, userState );
        }

        private void OnLogoffOperationCompleted( object arg )
        {
            if ( ( this.LogoffCompleted != null ) )
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ( (System.Web.Services.Protocols.InvokeCompletedEventArgs)( arg ) );
                this.LogoffCompleted( this, new System.ComponentModel.AsyncCompletedEventArgs( invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState ) );
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute( "ServerInfoHeaderValue", Direction = System.Web.Services.Protocols.SoapHeaderDirection.Out )]
        [System.Web.Services.Protocols.SoapHeaderAttribute( "BatchHeaderValue" )]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute( "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices/Cre" +
            "ateModel", RequestNamespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices", ResponseNamespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped )]
        [return: System.Xml.Serialization.XmlArrayAttribute( "Warnings" )]
        public Warning[] CreateModel( string Model, string Parent, [System.Xml.Serialization.XmlElementAttribute( DataType = "base64Binary" )] byte[] Definition, Property[] Properties )
        {
            object[] results = this.Invoke( "CreateModel", new object[] {
                        Model,
                        Parent,
                        Definition,
                        Properties} );
            return ( (Warning[])( results[ 0 ] ) );
        }

        /// <remarks/>
        public void CreateModelAsync( string Model, string Parent, byte[] Definition, Property[] Properties )
        {
            this.CreateModelAsync( Model, Parent, Definition, Properties, null );
        }

        /// <remarks/>
        public void CreateModelAsync( string Model, string Parent, byte[] Definition, Property[] Properties, object userState )
        {
            if ( ( this.CreateModelOperationCompleted == null ) )
            {
                this.CreateModelOperationCompleted = new System.Threading.SendOrPostCallback( this.OnCreateModelOperationCompleted );
            }
            this.InvokeAsync( "CreateModel", new object[] {
                        Model,
                        Parent,
                        Definition,
                        Properties}, this.CreateModelOperationCompleted, userState );
        }

        private void OnCreateModelOperationCompleted( object arg )
        {
            if ( ( this.CreateModelCompleted != null ) )
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ( (System.Web.Services.Protocols.InvokeCompletedEventArgs)( arg ) );
                this.CreateModelCompleted( this, new CreateModelCompletedEventArgs( invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState ) );
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute( "ServerInfoHeaderValue", Direction = System.Web.Services.Protocols.SoapHeaderDirection.Out )]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute( "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices/Get" +
            "ModelDefinition", RequestNamespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices", ResponseNamespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped )]
        [return: System.Xml.Serialization.XmlElementAttribute( "Definition", DataType = "base64Binary" )]
        public byte[] GetModelDefinition( string Model )
        {
            object[] results = this.Invoke( "GetModelDefinition", new object[] {
                        Model} );
            return ( (byte[])( results[ 0 ] ) );
        }

        /// <remarks/>
        public void GetModelDefinitionAsync( string Model )
        {
            this.GetModelDefinitionAsync( Model, null );
        }

        /// <remarks/>
        public void GetModelDefinitionAsync( string Model, object userState )
        {
            if ( ( this.GetModelDefinitionOperationCompleted == null ) )
            {
                this.GetModelDefinitionOperationCompleted = new System.Threading.SendOrPostCallback( this.OnGetModelDefinitionOperationCompleted );
            }
            this.InvokeAsync( "GetModelDefinition", new object[] {
                        Model}, this.GetModelDefinitionOperationCompleted, userState );
        }

        private void OnGetModelDefinitionOperationCompleted( object arg )
        {
            if ( ( this.GetModelDefinitionCompleted != null ) )
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ( (System.Web.Services.Protocols.InvokeCompletedEventArgs)( arg ) );
                this.GetModelDefinitionCompleted( this, new GetModelDefinitionCompletedEventArgs( invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState ) );
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute( "ServerInfoHeaderValue", Direction = System.Web.Services.Protocols.SoapHeaderDirection.Out )]
        [System.Web.Services.Protocols.SoapHeaderAttribute( "BatchHeaderValue" )]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute( "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices/Set" +
            "ModelDefinition", RequestNamespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices", ResponseNamespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped )]
        [return: System.Xml.Serialization.XmlArrayAttribute( "Warnings" )]
        public Warning[] SetModelDefinition( string Model, [System.Xml.Serialization.XmlElementAttribute( DataType = "base64Binary" )] byte[] Definition )
        {
            object[] results = this.Invoke( "SetModelDefinition", new object[] {
                        Model,
                        Definition} );
            return ( (Warning[])( results[ 0 ] ) );
        }

        /// <remarks/>
        public void SetModelDefinitionAsync( string Model, byte[] Definition )
        {
            this.SetModelDefinitionAsync( Model, Definition, null );
        }

        /// <remarks/>
        public void SetModelDefinitionAsync( string Model, byte[] Definition, object userState )
        {
            if ( ( this.SetModelDefinitionOperationCompleted == null ) )
            {
                this.SetModelDefinitionOperationCompleted = new System.Threading.SendOrPostCallback( this.OnSetModelDefinitionOperationCompleted );
            }
            this.InvokeAsync( "SetModelDefinition", new object[] {
                        Model,
                        Definition}, this.SetModelDefinitionOperationCompleted, userState );
        }

        private void OnSetModelDefinitionOperationCompleted( object arg )
        {
            if ( ( this.SetModelDefinitionCompleted != null ) )
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ( (System.Web.Services.Protocols.InvokeCompletedEventArgs)( arg ) );
                this.SetModelDefinitionCompleted( this, new SetModelDefinitionCompletedEventArgs( invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState ) );
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute( "ServerInfoHeaderValue", Direction = System.Web.Services.Protocols.SoapHeaderDirection.Out )]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute( "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices/Lis" +
            "tModelPerspectives", RequestNamespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices", ResponseNamespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped )]
        [return: System.Xml.Serialization.XmlArrayAttribute( "ModelCatalogItems" )]
        public ModelCatalogItem[] ListModelPerspectives( string Model )
        {
            object[] results = this.Invoke( "ListModelPerspectives", new object[] {
                        Model} );
            return ( (ModelCatalogItem[])( results[ 0 ] ) );
        }

        /// <remarks/>
        public void ListModelPerspectivesAsync( string Model )
        {
            this.ListModelPerspectivesAsync( Model, null );
        }

        /// <remarks/>
        public void ListModelPerspectivesAsync( string Model, object userState )
        {
            if ( ( this.ListModelPerspectivesOperationCompleted == null ) )
            {
                this.ListModelPerspectivesOperationCompleted = new System.Threading.SendOrPostCallback( this.OnListModelPerspectivesOperationCompleted );
            }
            this.InvokeAsync( "ListModelPerspectives", new object[] {
                        Model}, this.ListModelPerspectivesOperationCompleted, userState );
        }

        private void OnListModelPerspectivesOperationCompleted( object arg )
        {
            if ( ( this.ListModelPerspectivesCompleted != null ) )
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ( (System.Web.Services.Protocols.InvokeCompletedEventArgs)( arg ) );
                this.ListModelPerspectivesCompleted( this, new ListModelPerspectivesCompletedEventArgs( invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState ) );
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute( "ServerInfoHeaderValue", Direction = System.Web.Services.Protocols.SoapHeaderDirection.Out )]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute( "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices/Get" +
            "UserModel", RequestNamespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices", ResponseNamespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped )]
        [return: System.Xml.Serialization.XmlElementAttribute( "Definition", DataType = "base64Binary" )]
        public byte[] GetUserModel( string Model, string Perspective )
        {
            object[] results = this.Invoke( "GetUserModel", new object[] {
                        Model,
                        Perspective} );
            return ( (byte[])( results[ 0 ] ) );
        }

        /// <remarks/>
        public void GetUserModelAsync( string Model, string Perspective )
        {
            this.GetUserModelAsync( Model, Perspective, null );
        }

        /// <remarks/>
        public void GetUserModelAsync( string Model, string Perspective, object userState )
        {
            if ( ( this.GetUserModelOperationCompleted == null ) )
            {
                this.GetUserModelOperationCompleted = new System.Threading.SendOrPostCallback( this.OnGetUserModelOperationCompleted );
            }
            this.InvokeAsync( "GetUserModel", new object[] {
                        Model,
                        Perspective}, this.GetUserModelOperationCompleted, userState );
        }

        private void OnGetUserModelOperationCompleted( object arg )
        {
            if ( ( this.GetUserModelCompleted != null ) )
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ( (System.Web.Services.Protocols.InvokeCompletedEventArgs)( arg ) );
                this.GetUserModelCompleted( this, new GetUserModelCompletedEventArgs( invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState ) );
            }
        }

        /// <remarks/>
        [System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Naming", "CA1706:ShortAcronymsShouldBeUppercase", MessageId = "1#" ), System.Web.Services.Protocols.SoapHeaderAttribute( "ServerInfoHeaderValue", Direction = System.Web.Services.Protocols.SoapHeaderDirection.Out )]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute( "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices/Lis" +
            "tModelItemChildren", RequestNamespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices", ResponseNamespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped )]
        [return: System.Xml.Serialization.XmlArrayAttribute( "ModelItems" )]
        public ModelItem[] ListModelItemChildren( string Model, string ModelItemID, bool Recursive )
        {
            object[] results = this.Invoke( "ListModelItemChildren", new object[] {
                        Model,
                        ModelItemID,
                        Recursive} );
            return ( (ModelItem[])( results[ 0 ] ) );
        }

        /// <remarks/>
        public void ListModelItemChildrenAsync( string Model, string ModelItemID, bool Recursive )
        {
            this.ListModelItemChildrenAsync( Model, ModelItemID, Recursive, null );
        }

        /// <remarks/>
        public void ListModelItemChildrenAsync( string Model, string ModelItemID, bool Recursive, object userState )
        {
            if ( ( this.ListModelItemChildrenOperationCompleted == null ) )
            {
                this.ListModelItemChildrenOperationCompleted = new System.Threading.SendOrPostCallback( this.OnListModelItemChildrenOperationCompleted );
            }
            this.InvokeAsync( "ListModelItemChildren", new object[] {
                        Model,
                        ModelItemID,
                        Recursive}, this.ListModelItemChildrenOperationCompleted, userState );
        }

        private void OnListModelItemChildrenOperationCompleted( object arg )
        {
            if ( ( this.ListModelItemChildrenCompleted != null ) )
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ( (System.Web.Services.Protocols.InvokeCompletedEventArgs)( arg ) );
                this.ListModelItemChildrenCompleted( this, new ListModelItemChildrenCompletedEventArgs( invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState ) );
            }
        }

        /// <remarks/>
        [System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Naming", "CA1706:ShortAcronymsShouldBeUppercase", MessageId = "1#" ), System.Web.Services.Protocols.SoapHeaderAttribute( "ServerInfoHeaderValue", Direction = System.Web.Services.Protocols.SoapHeaderDirection.Out )]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute( "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices/Get" +
            "ModelItemPermissions", RequestNamespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices", ResponseNamespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped )]
        [return: System.Xml.Serialization.XmlArrayAttribute( "Permissions" )]
        public string[] GetModelItemPermissions( string Model, string ModelItemID )
        {
            object[] results = this.Invoke( "GetModelItemPermissions", new object[] {
                        Model,
                        ModelItemID} );
            return ( (string[])( results[ 0 ] ) );
        }

        /// <remarks/>
        public void GetModelItemPermissionsAsync( string Model, string ModelItemID )
        {
            this.GetModelItemPermissionsAsync( Model, ModelItemID, null );
        }

        /// <remarks/>
        public void GetModelItemPermissionsAsync( string Model, string ModelItemID, object userState )
        {
            if ( ( this.GetModelItemPermissionsOperationCompleted == null ) )
            {
                this.GetModelItemPermissionsOperationCompleted = new System.Threading.SendOrPostCallback( this.OnGetModelItemPermissionsOperationCompleted );
            }
            this.InvokeAsync( "GetModelItemPermissions", new object[] {
                        Model,
                        ModelItemID}, this.GetModelItemPermissionsOperationCompleted, userState );
        }

        private void OnGetModelItemPermissionsOperationCompleted( object arg )
        {
            if ( ( this.GetModelItemPermissionsCompleted != null ) )
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ( (System.Web.Services.Protocols.InvokeCompletedEventArgs)( arg ) );
                this.GetModelItemPermissionsCompleted( this, new GetModelItemPermissionsCompletedEventArgs( invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState ) );
            }
        }

        /// <remarks/>
        [System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Naming", "CA1706:ShortAcronymsShouldBeUppercase", MessageId = "1#" ), System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Design", "CA1021:AvoidOutParameters", MessageId = "2#" ), System.Web.Services.Protocols.SoapHeaderAttribute( "ServerInfoHeaderValue", Direction = System.Web.Services.Protocols.SoapHeaderDirection.Out )]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute( "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices/Get" +
            "ModelItemPolicies", RequestNamespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices", ResponseNamespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped )]
        [return: System.Xml.Serialization.XmlArrayAttribute( "Policies" )]
        public Policy[] GetModelItemPolicies( string Model, string ModelItemID, out bool InheritParent )
        {
            object[] results = this.Invoke( "GetModelItemPolicies", new object[] {
                        Model,
                        ModelItemID} );
            InheritParent = ( (bool)( results[ 1 ] ) );
            return ( (Policy[])( results[ 0 ] ) );
        }

        /// <remarks/>
        public void GetModelItemPoliciesAsync( string Model, string ModelItemID )
        {
            this.GetModelItemPoliciesAsync( Model, ModelItemID, null );
        }

        /// <remarks/>
        public void GetModelItemPoliciesAsync( string Model, string ModelItemID, object userState )
        {
            if ( ( this.GetModelItemPoliciesOperationCompleted == null ) )
            {
                this.GetModelItemPoliciesOperationCompleted = new System.Threading.SendOrPostCallback( this.OnGetModelItemPoliciesOperationCompleted );
            }
            this.InvokeAsync( "GetModelItemPolicies", new object[] {
                        Model,
                        ModelItemID}, this.GetModelItemPoliciesOperationCompleted, userState );
        }

        private void OnGetModelItemPoliciesOperationCompleted( object arg )
        {
            if ( ( this.GetModelItemPoliciesCompleted != null ) )
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ( (System.Web.Services.Protocols.InvokeCompletedEventArgs)( arg ) );
                this.GetModelItemPoliciesCompleted( this, new GetModelItemPoliciesCompletedEventArgs( invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState ) );
            }
        }

        /// <remarks/>
        [System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Naming", "CA1706:ShortAcronymsShouldBeUppercase", MessageId = "1#" ), System.Web.Services.Protocols.SoapHeaderAttribute( "ServerInfoHeaderValue", Direction = System.Web.Services.Protocols.SoapHeaderDirection.Out )]
        [System.Web.Services.Protocols.SoapHeaderAttribute( "BatchHeaderValue" )]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute( "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices/Set" +
            "ModelItemPolicies", RequestNamespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices", ResponseNamespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped )]
        public void SetModelItemPolicies( string Model, string ModelItemID, Policy[] Policies )
        {
            this.Invoke( "SetModelItemPolicies", new object[] {
                        Model,
                        ModelItemID,
                        Policies} );
        }

        /// <remarks/>
        public void SetModelItemPoliciesAsync( string Model, string ModelItemID, Policy[] Policies )
        {
            this.SetModelItemPoliciesAsync( Model, ModelItemID, Policies, null );
        }

        /// <remarks/>
        public void SetModelItemPoliciesAsync( string Model, string ModelItemID, Policy[] Policies, object userState )
        {
            if ( ( this.SetModelItemPoliciesOperationCompleted == null ) )
            {
                this.SetModelItemPoliciesOperationCompleted = new System.Threading.SendOrPostCallback( this.OnSetModelItemPoliciesOperationCompleted );
            }
            this.InvokeAsync( "SetModelItemPolicies", new object[] {
                        Model,
                        ModelItemID,
                        Policies}, this.SetModelItemPoliciesOperationCompleted, userState );
        }

        private void OnSetModelItemPoliciesOperationCompleted( object arg )
        {
            if ( ( this.SetModelItemPoliciesCompleted != null ) )
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ( (System.Web.Services.Protocols.InvokeCompletedEventArgs)( arg ) );
                this.SetModelItemPoliciesCompleted( this, new System.ComponentModel.AsyncCompletedEventArgs( invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState ) );
            }
        }

        /// <remarks/>
        [System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Naming", "CA1706:ShortAcronymsShouldBeUppercase", MessageId = "1#" ), System.Web.Services.Protocols.SoapHeaderAttribute( "ServerInfoHeaderValue", Direction = System.Web.Services.Protocols.SoapHeaderDirection.Out )]
        [System.Web.Services.Protocols.SoapHeaderAttribute( "BatchHeaderValue" )]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute( "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices/Inh" +
            "eritModelItemParentSecurity", RequestNamespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices", ResponseNamespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped )]
        public void InheritModelItemParentSecurity( string Model, string ModelItemID )
        {
            this.Invoke( "InheritModelItemParentSecurity", new object[] {
                        Model,
                        ModelItemID} );
        }

        /// <remarks/>
        public void InheritModelItemParentSecurityAsync( string Model, string ModelItemID )
        {
            this.InheritModelItemParentSecurityAsync( Model, ModelItemID, null );
        }

        /// <remarks/>
        public void InheritModelItemParentSecurityAsync( string Model, string ModelItemID, object userState )
        {
            if ( ( this.InheritModelItemParentSecurityOperationCompleted == null ) )
            {
                this.InheritModelItemParentSecurityOperationCompleted = new System.Threading.SendOrPostCallback( this.OnInheritModelItemParentSecurityOperationCompleted );
            }
            this.InvokeAsync( "InheritModelItemParentSecurity", new object[] {
                        Model,
                        ModelItemID}, this.InheritModelItemParentSecurityOperationCompleted, userState );
        }

        private void OnInheritModelItemParentSecurityOperationCompleted( object arg )
        {
            if ( ( this.InheritModelItemParentSecurityCompleted != null ) )
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ( (System.Web.Services.Protocols.InvokeCompletedEventArgs)( arg ) );
                this.InheritModelItemParentSecurityCompleted( this, new System.ComponentModel.AsyncCompletedEventArgs( invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState ) );
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute( "ServerInfoHeaderValue", Direction = System.Web.Services.Protocols.SoapHeaderDirection.Out )]
        [System.Web.Services.Protocols.SoapHeaderAttribute( "BatchHeaderValue" )]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute( "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices/Rem" +
            "oveAllModelItemPolicies", RequestNamespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices", ResponseNamespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped )]
        public void RemoveAllModelItemPolicies( string Model )
        {
            this.Invoke( "RemoveAllModelItemPolicies", new object[] {
                        Model} );
        }

        /// <remarks/>
        public void RemoveAllModelItemPoliciesAsync( string Model )
        {
            this.RemoveAllModelItemPoliciesAsync( Model, null );
        }

        /// <remarks/>
        public void RemoveAllModelItemPoliciesAsync( string Model, object userState )
        {
            if ( ( this.RemoveAllModelItemPoliciesOperationCompleted == null ) )
            {
                this.RemoveAllModelItemPoliciesOperationCompleted = new System.Threading.SendOrPostCallback( this.OnRemoveAllModelItemPoliciesOperationCompleted );
            }
            this.InvokeAsync( "RemoveAllModelItemPolicies", new object[] {
                        Model}, this.RemoveAllModelItemPoliciesOperationCompleted, userState );
        }

        private void OnRemoveAllModelItemPoliciesOperationCompleted( object arg )
        {
            if ( ( this.RemoveAllModelItemPoliciesCompleted != null ) )
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ( (System.Web.Services.Protocols.InvokeCompletedEventArgs)( arg ) );
                this.RemoveAllModelItemPoliciesCompleted( this, new System.ComponentModel.AsyncCompletedEventArgs( invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState ) );
            }
        }

        /// <remarks/>
        [System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Naming", "CA1706:ShortAcronymsShouldBeUppercase", MessageId = "1#" ), System.Web.Services.Protocols.SoapHeaderAttribute( "ServerInfoHeaderValue", Direction = System.Web.Services.Protocols.SoapHeaderDirection.Out )]
        [System.Web.Services.Protocols.SoapHeaderAttribute( "BatchHeaderValue" )]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute( "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices/Set" +
            "ModelDrillthroughReports", RequestNamespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices", ResponseNamespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped )]
        public void SetModelDrillthroughReports( string Model, string ModelItemID, ModelDrillthroughReport[] Reports )
        {
            this.Invoke( "SetModelDrillthroughReports", new object[] {
                        Model,
                        ModelItemID,
                        Reports} );
        }

        /// <remarks/>
        public void SetModelDrillthroughReportsAsync( string Model, string ModelItemID, ModelDrillthroughReport[] Reports )
        {
            this.SetModelDrillthroughReportsAsync( Model, ModelItemID, Reports, null );
        }

        /// <remarks/>
        public void SetModelDrillthroughReportsAsync( string Model, string ModelItemID, ModelDrillthroughReport[] Reports, object userState )
        {
            if ( ( this.SetModelDrillthroughReportsOperationCompleted == null ) )
            {
                this.SetModelDrillthroughReportsOperationCompleted = new System.Threading.SendOrPostCallback( this.OnSetModelDrillthroughReportsOperationCompleted );
            }
            this.InvokeAsync( "SetModelDrillthroughReports", new object[] {
                        Model,
                        ModelItemID,
                        Reports}, this.SetModelDrillthroughReportsOperationCompleted, userState );
        }

        private void OnSetModelDrillthroughReportsOperationCompleted( object arg )
        {
            if ( ( this.SetModelDrillthroughReportsCompleted != null ) )
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ( (System.Web.Services.Protocols.InvokeCompletedEventArgs)( arg ) );
                this.SetModelDrillthroughReportsCompleted( this, new System.ComponentModel.AsyncCompletedEventArgs( invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState ) );
            }
        }

        /// <remarks/>
        [System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Naming", "CA1706:ShortAcronymsShouldBeUppercase", MessageId = "1#" ), System.Web.Services.Protocols.SoapHeaderAttribute( "ServerInfoHeaderValue", Direction = System.Web.Services.Protocols.SoapHeaderDirection.Out )]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute( "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices/Lis" +
            "tModelDrillthroughReports", RequestNamespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices", ResponseNamespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped )]
        [return: System.Xml.Serialization.XmlArrayAttribute( "Reports" )]
        public ModelDrillthroughReport[] ListModelDrillthroughReports( string Model, string ModelItemID )
        {
            object[] results = this.Invoke( "ListModelDrillthroughReports", new object[] {
                        Model,
                        ModelItemID} );
            return ( (ModelDrillthroughReport[])( results[ 0 ] ) );
        }

        /// <remarks/>
        public void ListModelDrillthroughReportsAsync( string Model, string ModelItemID )
        {
            this.ListModelDrillthroughReportsAsync( Model, ModelItemID, null );
        }

        /// <remarks/>
        public void ListModelDrillthroughReportsAsync( string Model, string ModelItemID, object userState )
        {
            if ( ( this.ListModelDrillthroughReportsOperationCompleted == null ) )
            {
                this.ListModelDrillthroughReportsOperationCompleted = new System.Threading.SendOrPostCallback( this.OnListModelDrillthroughReportsOperationCompleted );
            }
            this.InvokeAsync( "ListModelDrillthroughReports", new object[] {
                        Model,
                        ModelItemID}, this.ListModelDrillthroughReportsOperationCompleted, userState );
        }

        private void OnListModelDrillthroughReportsOperationCompleted( object arg )
        {
            if ( ( this.ListModelDrillthroughReportsCompleted != null ) )
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ( (System.Web.Services.Protocols.InvokeCompletedEventArgs)( arg ) );
                this.ListModelDrillthroughReportsCompleted( this, new ListModelDrillthroughReportsCompletedEventArgs( invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState ) );
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute( "ServerInfoHeaderValue", Direction = System.Web.Services.Protocols.SoapHeaderDirection.Out )]
        [System.Web.Services.Protocols.SoapHeaderAttribute( "BatchHeaderValue" )]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute( "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices/Gen" +
            "erateModel", RequestNamespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices", ResponseNamespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped )]
        [return: System.Xml.Serialization.XmlArrayAttribute( "Warnings" )]
        public Warning[] GenerateModel( string DataSource, string Model, string Parent, Property[] Properties )
        {
            object[] results = this.Invoke( "GenerateModel", new object[] {
                        DataSource,
                        Model,
                        Parent,
                        Properties} );
            return ( (Warning[])( results[ 0 ] ) );
        }

        /// <remarks/>
        public void GenerateModelAsync( string DataSource, string Model, string Parent, Property[] Properties )
        {
            this.GenerateModelAsync( DataSource, Model, Parent, Properties, null );
        }

        /// <remarks/>
        public void GenerateModelAsync( string DataSource, string Model, string Parent, Property[] Properties, object userState )
        {
            if ( ( this.GenerateModelOperationCompleted == null ) )
            {
                this.GenerateModelOperationCompleted = new System.Threading.SendOrPostCallback( this.OnGenerateModelOperationCompleted );
            }
            this.InvokeAsync( "GenerateModel", new object[] {
                        DataSource,
                        Model,
                        Parent,
                        Properties}, this.GenerateModelOperationCompleted, userState );
        }

        private void OnGenerateModelOperationCompleted( object arg )
        {
            if ( ( this.GenerateModelCompleted != null ) )
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ( (System.Web.Services.Protocols.InvokeCompletedEventArgs)( arg ) );
                this.GenerateModelCompleted( this, new GenerateModelCompletedEventArgs( invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState ) );
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute( "ServerInfoHeaderValue", Direction = System.Web.Services.Protocols.SoapHeaderDirection.Out )]
        [System.Web.Services.Protocols.SoapHeaderAttribute( "BatchHeaderValue" )]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute( "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices/Reg" +
            "enerateModel", RequestNamespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices", ResponseNamespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped )]
        [return: System.Xml.Serialization.XmlArrayAttribute( "Warnings" )]
        public Warning[] RegenerateModel( string Model )
        {
            object[] results = this.Invoke( "RegenerateModel", new object[] {
                        Model} );
            return ( (Warning[])( results[ 0 ] ) );
        }

        /// <remarks/>
        public void RegenerateModelAsync( string Model )
        {
            this.RegenerateModelAsync( Model, null );
        }

        /// <remarks/>
        public void RegenerateModelAsync( string Model, object userState )
        {
            if ( ( this.RegenerateModelOperationCompleted == null ) )
            {
                this.RegenerateModelOperationCompleted = new System.Threading.SendOrPostCallback( this.OnRegenerateModelOperationCompleted );
            }
            this.InvokeAsync( "RegenerateModel", new object[] {
                        Model}, this.RegenerateModelOperationCompleted, userState );
        }

        private void OnRegenerateModelOperationCompleted( object arg )
        {
            if ( ( this.RegenerateModelCompleted != null ) )
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ( (System.Web.Services.Protocols.InvokeCompletedEventArgs)( arg ) );
                this.RegenerateModelCompleted( this, new RegenerateModelCompletedEventArgs( invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState ) );
            }
        }

        /// <remarks/>
        public new void CancelAsync( object userState )
        {
            base.CancelAsync( userState );
        }

        [System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Performance", "CA1820:TestForEmptyStringsUsingStringLength" ), System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Globalization", "CA1304:SpecifyCultureInfo", MessageId = "System.String.Compare(System.String,System.String,System.Boolean)" ), System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Performance", "CA1822:MarkMembersAsStatic" )]
        private bool IsLocalFileSystemWebService( string url )
        {
            if ( ( ( url == null )
                        || ( url == string.Empty ) ) )
            {
                return false;
            }
            System.Uri wsUri = new System.Uri( url );
            if ( ( ( ( wsUri.Port >= 1024 )
                        && ( wsUri.Port <= 5000 ) )
                        && ( string.Compare( wsUri.Host, "localHost", true ) == 0 ) ) )
            {
                return true;
            }
            return false;
        }
    }

    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute( Namespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices" )]
    [System.Xml.Serialization.XmlRootAttribute( Namespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices", IsNullable = false )]
    public partial class ServerInfoHeader : System.Web.Services.Protocols.SoapHeader
    {

        private string reportServerVersionNumberField;

        private string reportServerEditionField;

        private string reportServerVersionField;

        private string reportServerDateTimeField;

        [System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Usage", "CA2235:MarkAllNonSerializableFields" )]
        private System.Xml.XmlAttribute[] anyAttrField;

        /// <remarks/>
        public string ReportServerVersionNumber
        {
            get
            {
                return this.reportServerVersionNumberField;
            }
            set
            {
                this.reportServerVersionNumberField = value;
            }
        }

        /// <remarks/>
        public string ReportServerEdition
        {
            get
            {
                return this.reportServerEditionField;
            }
            set
            {
                this.reportServerEditionField = value;
            }
        }

        /// <remarks/>
        public string ReportServerVersion
        {
            get
            {
                return this.reportServerVersionField;
            }
            set
            {
                this.reportServerVersionField = value;
            }
        }

        /// <remarks/>
        public string ReportServerDateTime
        {
            get
            {
                return this.reportServerDateTimeField;
            }
            set
            {
                this.reportServerDateTimeField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlAnyAttributeAttribute()]
        public System.Xml.XmlAttribute[] AnyAttr
        {
            get
            {
                return this.anyAttrField;
            }
            set
            {
                this.anyAttrField = value;
            }
        }
    }

    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute( Namespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices" )]
    public partial class ModelDrillthroughReport
    {

        private string pathField;

        private DrillthroughType typeField;

        /// <remarks/>
        public string Path
        {
            get
            {
                return this.pathField;
            }
            set
            {
                this.pathField = value;
            }
        }

        /// <remarks/>
        public DrillthroughType Type
        {
            get
            {
                return this.typeField;
            }
            set
            {
                this.typeField = value;
            }
        }
    }

    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute( Namespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices" )]
    public enum DrillthroughType
    {

        /// <remarks/>
        Detail,

        /// <remarks/>
        List,
    }

    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute( Namespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices" )]
    public partial class ModelItem
    {

        private string idField;

        private string nameField;

        private ModelItemTypeEnum typeField;

        private string descriptionField;

        private ModelItem[] modelItemsField;

        /// <remarks/>
        [System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Naming", "CA1706:ShortAcronymsShouldBeUppercase", MessageId = "Member" )]
        public string ID
        {
            get
            {
                return this.idField;
            }
            set
            {
                this.idField = value;
            }
        }

        /// <remarks/>
        public string Name
        {
            get
            {
                return this.nameField;
            }
            set
            {
                this.nameField = value;
            }
        }

        /// <remarks/>
        public ModelItemTypeEnum Type
        {
            get
            {
                return this.typeField;
            }
            set
            {
                this.typeField = value;
            }
        }

        /// <remarks/>
        public string Description
        {
            get
            {
                return this.descriptionField;
            }
            set
            {
                this.descriptionField = value;
            }
        }

        /// <remarks/>
        [System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Performance", "CA1819:PropertiesShouldNotReturnArrays" )]
        public ModelItem[] ModelItems
        {
            get
            {
                return this.modelItemsField;
            }
            set
            {
                this.modelItemsField = value;
            }
        }
    }

    /// <remarks/>
    [System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix" ), System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute( Namespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices" )]
    public enum ModelItemTypeEnum
    {

        /// <remarks/>
        Model,

        /// <remarks/>
        EntityFolder,

        /// <remarks/>
        FieldFolder,

        /// <remarks/>
        Entity,

        /// <remarks/>
        Attribute,

        /// <remarks/>
        Role,
    }

    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute( Namespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices" )]
    public partial class ModelPerspective
    {

        private string idField;

        private string nameField;

        private string descriptionField;

        /// <remarks/>
        [System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Naming", "CA1706:ShortAcronymsShouldBeUppercase", MessageId = "Member" )]
        public string ID
        {
            get
            {
                return this.idField;
            }
            set
            {
                this.idField = value;
            }
        }

        /// <remarks/>
        public string Name
        {
            get
            {
                return this.nameField;
            }
            set
            {
                this.nameField = value;
            }
        }

        /// <remarks/>
        public string Description
        {
            get
            {
                return this.descriptionField;
            }
            set
            {
                this.descriptionField = value;
            }
        }
    }

    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute( Namespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices" )]
    public partial class ModelCatalogItem
    {

        private string modelField;

        private string descriptionField;

        private ModelPerspective[] perspectivesField;

        /// <remarks/>
        public string Model
        {
            get
            {
                return this.modelField;
            }
            set
            {
                this.modelField = value;
            }
        }

        /// <remarks/>
        public string Description
        {
            get
            {
                return this.descriptionField;
            }
            set
            {
                this.descriptionField = value;
            }
        }

        /// <remarks/>
        [System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Performance", "CA1819:PropertiesShouldNotReturnArrays" )]
        public ModelPerspective[] Perspectives
        {
            get
            {
                return this.perspectivesField;
            }
            set
            {
                this.perspectivesField = value;
            }
        }
    }

    /// <remarks/>
    [System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Naming", "CA1724:TypeNamesShouldNotMatchNamespaces" ), System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute( Namespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices" )]
    public partial class Policy
    {

        private string groupUserNameField;

        private Role[] rolesField;

        /// <remarks/>
        public string GroupUserName
        {
            get
            {
                return this.groupUserNameField;
            }
            set
            {
                this.groupUserNameField = value;
            }
        }

        /// <remarks/>
        [System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Performance", "CA1819:PropertiesShouldNotReturnArrays" )]
        public Role[] Roles
        {
            get
            {
                return this.rolesField;
            }
            set
            {
                this.rolesField = value;
            }
        }
    }

    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute( Namespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices" )]
    public partial class Role
    {

        private string nameField;

        private string descriptionField;

        /// <remarks/>
        public string Name
        {
            get
            {
                return this.nameField;
            }
            set
            {
                this.nameField = value;
            }
        }

        /// <remarks/>
        public string Description
        {
            get
            {
                return this.descriptionField;
            }
            set
            {
                this.descriptionField = value;
            }
        }
    }

    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute( Namespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices" )]
    public partial class Task
    {

        private string taskIDField;

        private string nameField;

        private string descriptionField;

        /// <remarks/>
        [System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Naming", "CA1706:ShortAcronymsShouldBeUppercase", MessageId = "Member" )]
        public string TaskID
        {
            get
            {
                return this.taskIDField;
            }
            set
            {
                this.taskIDField = value;
            }
        }

        /// <remarks/>
        public string Name
        {
            get
            {
                return this.nameField;
            }
            set
            {
                this.nameField = value;
            }
        }

        /// <remarks/>
        public string Description
        {
            get
            {
                return this.descriptionField;
            }
            set
            {
                this.descriptionField = value;
            }
        }
    }

    /// <remarks/>
    [System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords" ), System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute( Namespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices" )]
    public partial class Event
    {

        private string typeField;

        /// <remarks/>
        public string Type
        {
            get
            {
                return this.typeField;
            }
            set
            {
                this.typeField = value;
            }
        }
    }

    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute( Namespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices" )]
    public partial class Extension
    {

        private ExtensionTypeEnum extensionTypeField;

        private string nameField;

        private string localizedNameField;

        private bool visibleField;

        private bool isModelGenerationSupportedField;

        /// <remarks/>
        public ExtensionTypeEnum ExtensionType
        {
            get
            {
                return this.extensionTypeField;
            }
            set
            {
                this.extensionTypeField = value;
            }
        }

        /// <remarks/>
        public string Name
        {
            get
            {
                return this.nameField;
            }
            set
            {
                this.nameField = value;
            }
        }

        /// <remarks/>
        public string LocalizedName
        {
            get
            {
                return this.localizedNameField;
            }
            set
            {
                this.localizedNameField = value;
            }
        }

        /// <remarks/>
        public bool Visible
        {
            get
            {
                return this.visibleField;
            }
            set
            {
                this.visibleField = value;
            }
        }

        /// <remarks/>
        public bool IsModelGenerationSupported
        {
            get
            {
                return this.isModelGenerationSupportedField;
            }
            set
            {
                this.isModelGenerationSupportedField = value;
            }
        }
    }

    /// <remarks/>
    [System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix" ), System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute( Namespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices" )]
    public enum ExtensionTypeEnum
    {

        /// <remarks/>
        Delivery,

        /// <remarks/>
        Render,

        /// <remarks/>
        Data,

        /// <remarks/>
        All,
    }

    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute( Namespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices" )]
    public partial class Subscription
    {

        private string subscriptionIDField;

        private string ownerField;

        private string pathField;

        private string virtualPathField;

        private string reportField;

        private ExtensionSettings deliverySettingsField;

        private string descriptionField;

        private string statusField;

        private ActiveState activeField;

        private System.DateTime lastExecutedField;

        private bool lastExecutedFieldSpecified;

        private string modifiedByField;

        private System.DateTime modifiedDateField;

        private string eventTypeField;

        private bool isDataDrivenField;

        /// <remarks/>
        [System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Naming", "CA1706:ShortAcronymsShouldBeUppercase", MessageId = "Member" )]
        public string SubscriptionID
        {
            get
            {
                return this.subscriptionIDField;
            }
            set
            {
                this.subscriptionIDField = value;
            }
        }

        /// <remarks/>
        public string Owner
        {
            get
            {
                return this.ownerField;
            }
            set
            {
                this.ownerField = value;
            }
        }

        /// <remarks/>
        public string Path
        {
            get
            {
                return this.pathField;
            }
            set
            {
                this.pathField = value;
            }
        }

        /// <remarks/>
        public string VirtualPath
        {
            get
            {
                return this.virtualPathField;
            }
            set
            {
                this.virtualPathField = value;
            }
        }

        /// <remarks/>
        public string Report
        {
            get
            {
                return this.reportField;
            }
            set
            {
                this.reportField = value;
            }
        }

        /// <remarks/>
        public ExtensionSettings DeliverySettings
        {
            get
            {
                return this.deliverySettingsField;
            }
            set
            {
                this.deliverySettingsField = value;
            }
        }

        /// <remarks/>
        public string Description
        {
            get
            {
                return this.descriptionField;
            }
            set
            {
                this.descriptionField = value;
            }
        }

        /// <remarks/>
        public string Status
        {
            get
            {
                return this.statusField;
            }
            set
            {
                this.statusField = value;
            }
        }

        /// <remarks/>
        public ActiveState Active
        {
            get
            {
                return this.activeField;
            }
            set
            {
                this.activeField = value;
            }
        }

        /// <remarks/>
        public System.DateTime LastExecuted
        {
            get
            {
                return this.lastExecutedField;
            }
            set
            {
                this.lastExecutedField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool LastExecutedSpecified
        {
            get
            {
                return this.lastExecutedFieldSpecified;
            }
            set
            {
                this.lastExecutedFieldSpecified = value;
            }
        }

        /// <remarks/>
        public string ModifiedBy
        {
            get
            {
                return this.modifiedByField;
            }
            set
            {
                this.modifiedByField = value;
            }
        }

        /// <remarks/>
        public System.DateTime ModifiedDate
        {
            get
            {
                return this.modifiedDateField;
            }
            set
            {
                this.modifiedDateField = value;
            }
        }

        /// <remarks/>
        public string EventType
        {
            get
            {
                return this.eventTypeField;
            }
            set
            {
                this.eventTypeField = value;
            }
        }

        /// <remarks/>
        public bool IsDataDriven
        {
            get
            {
                return this.isDataDrivenField;
            }
            set
            {
                this.isDataDrivenField = value;
            }
        }
    }

    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute( Namespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices" )]
    public partial class ExtensionSettings
    {

        private string extensionField;

        private ParameterValueOrFieldReference[] parameterValuesField;

        /// <remarks/>
        public string Extension
        {
            get
            {
                return this.extensionField;
            }
            set
            {
                this.extensionField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute( typeof( ParameterFieldReference ) )]
        [System.Xml.Serialization.XmlArrayItemAttribute( typeof( ParameterValue ) )]
        public ParameterValueOrFieldReference[] ParameterValues
        {
            get
            {
                return this.parameterValuesField;
            }
            set
            {
                this.parameterValuesField = value;
            }
        }
    }

    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute( Namespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices" )]
    public partial class ParameterFieldReference : ParameterValueOrFieldReference
    {

        private string parameterNameField;

        private string fieldAliasField;

        /// <remarks/>
        public string ParameterName
        {
            get
            {
                return this.parameterNameField;
            }
            set
            {
                this.parameterNameField = value;
            }
        }

        /// <remarks/>
        public string FieldAlias
        {
            get
            {
                return this.fieldAliasField;
            }
            set
            {
                this.fieldAliasField = value;
            }
        }
    }

    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlIncludeAttribute( typeof( ParameterFieldReference ) )]
    [System.Xml.Serialization.XmlIncludeAttribute( typeof( ParameterValue ) )]
    [System.Xml.Serialization.XmlTypeAttribute( Namespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices" )]
    public partial class ParameterValueOrFieldReference
    {
    }

    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute( Namespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices" )]
    public partial class ParameterValue : ParameterValueOrFieldReference
    {

        private string nameField;

        private string valueField;

        private string labelField;

        /// <remarks/>
        public string Name
        {
            get
            {
                return this.nameField;
            }
            set
            {
                this.nameField = value;
            }
        }

        /// <remarks/>
        public string Value
        {
            get
            {
                return this.valueField;
            }
            set
            {
                this.valueField = value;
            }
        }

        /// <remarks/>
        public string Label
        {
            get
            {
                return this.labelField;
            }
            set
            {
                this.labelField = value;
            }
        }
    }

    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute( Namespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices" )]
    public partial class ActiveState
    {

        private bool deliveryExtensionRemovedField;

        private bool deliveryExtensionRemovedFieldSpecified;

        private bool sharedDataSourceRemovedField;

        private bool sharedDataSourceRemovedFieldSpecified;

        private bool missingParameterValueField;

        private bool missingParameterValueFieldSpecified;

        private bool invalidParameterValueField;

        private bool invalidParameterValueFieldSpecified;

        private bool unknownReportParameterField;

        private bool unknownReportParameterFieldSpecified;

        /// <remarks/>
        public bool DeliveryExtensionRemoved
        {
            get
            {
                return this.deliveryExtensionRemovedField;
            }
            set
            {
                this.deliveryExtensionRemovedField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DeliveryExtensionRemovedSpecified
        {
            get
            {
                return this.deliveryExtensionRemovedFieldSpecified;
            }
            set
            {
                this.deliveryExtensionRemovedFieldSpecified = value;
            }
        }

        /// <remarks/>
        public bool SharedDataSourceRemoved
        {
            get
            {
                return this.sharedDataSourceRemovedField;
            }
            set
            {
                this.sharedDataSourceRemovedField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool SharedDataSourceRemovedSpecified
        {
            get
            {
                return this.sharedDataSourceRemovedFieldSpecified;
            }
            set
            {
                this.sharedDataSourceRemovedFieldSpecified = value;
            }
        }

        /// <remarks/>
        public bool MissingParameterValue
        {
            get
            {
                return this.missingParameterValueField;
            }
            set
            {
                this.missingParameterValueField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool MissingParameterValueSpecified
        {
            get
            {
                return this.missingParameterValueFieldSpecified;
            }
            set
            {
                this.missingParameterValueFieldSpecified = value;
            }
        }

        /// <remarks/>
        public bool InvalidParameterValue
        {
            get
            {
                return this.invalidParameterValueField;
            }
            set
            {
                this.invalidParameterValueField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool InvalidParameterValueSpecified
        {
            get
            {
                return this.invalidParameterValueFieldSpecified;
            }
            set
            {
                this.invalidParameterValueFieldSpecified = value;
            }
        }

        /// <remarks/>
        public bool UnknownReportParameter
        {
            get
            {
                return this.unknownReportParameterField;
            }
            set
            {
                this.unknownReportParameterField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool UnknownReportParameterSpecified
        {
            get
            {
                return this.unknownReportParameterFieldSpecified;
            }
            set
            {
                this.unknownReportParameterFieldSpecified = value;
            }
        }
    }

    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute( Namespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices" )]
    public partial class ExtensionParameter
    {

        private string nameField;

        private string displayNameField;

        private bool requiredField;

        private bool requiredFieldSpecified;

        private bool readOnlyField;

        private string valueField;

        private string errorField;

        private bool encryptedField;

        private bool isPasswordField;

        private ValidValue[] validValuesField;

        /// <remarks/>
        public string Name
        {
            get
            {
                return this.nameField;
            }
            set
            {
                this.nameField = value;
            }
        }

        /// <remarks/>
        public string DisplayName
        {
            get
            {
                return this.displayNameField;
            }
            set
            {
                this.displayNameField = value;
            }
        }

        /// <remarks/>
        public bool Required
        {
            get
            {
                return this.requiredField;
            }
            set
            {
                this.requiredField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RequiredSpecified
        {
            get
            {
                return this.requiredFieldSpecified;
            }
            set
            {
                this.requiredFieldSpecified = value;
            }
        }

        /// <remarks/>
        public bool ReadOnly
        {
            get
            {
                return this.readOnlyField;
            }
            set
            {
                this.readOnlyField = value;
            }
        }

        /// <remarks/>
        public string Value
        {
            get
            {
                return this.valueField;
            }
            set
            {
                this.valueField = value;
            }
        }

        /// <remarks/>
        public string Error
        {
            get
            {
                return this.errorField;
            }
            set
            {
                this.errorField = value;
            }
        }

        /// <remarks/>
        public bool Encrypted
        {
            get
            {
                return this.encryptedField;
            }
            set
            {
                this.encryptedField = value;
            }
        }

        /// <remarks/>
        public bool IsPassword
        {
            get
            {
                return this.isPasswordField;
            }
            set
            {
                this.isPasswordField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute( "Value" )]
        public ValidValue[] ValidValues
        {
            get
            {
                return this.validValuesField;
            }
            set
            {
                this.validValuesField = value;
            }
        }
    }

    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute( Namespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices" )]
    public partial class ValidValue
    {

        private string labelField;

        private string valueField;

        /// <remarks/>
        public string Label
        {
            get
            {
                return this.labelField;
            }
            set
            {
                this.labelField = value;
            }
        }

        /// <remarks/>
        public string Value
        {
            get
            {
                return this.valueField;
            }
            set
            {
                this.valueField = value;
            }
        }
    }

    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute( Namespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices" )]
    public partial class QueryDefinition
    {

        private string commandTypeField;

        private string commandTextField;

        private int timeoutField;

        private bool timeoutFieldSpecified;

        /// <remarks/>
        public string CommandType
        {
            get
            {
                return this.commandTypeField;
            }
            set
            {
                this.commandTypeField = value;
            }
        }

        /// <remarks/>
        public string CommandText
        {
            get
            {
                return this.commandTextField;
            }
            set
            {
                this.commandTextField = value;
            }
        }

        /// <remarks/>
        public int Timeout
        {
            get
            {
                return this.timeoutField;
            }
            set
            {
                this.timeoutField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool TimeoutSpecified
        {
            get
            {
                return this.timeoutFieldSpecified;
            }
            set
            {
                this.timeoutFieldSpecified = value;
            }
        }
    }

    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute( Namespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices" )]
    public partial class Field
    {

        private string aliasField;

        private string nameField;

        /// <remarks/>
        public string Alias
        {
            get
            {
                return this.aliasField;
            }
            set
            {
                this.aliasField = value;
            }
        }

        /// <remarks/>
        public string Name
        {
            get
            {
                return this.nameField;
            }
            set
            {
                this.nameField = value;
            }
        }
    }

    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute( Namespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices" )]
    public partial class DataSetDefinition
    {

        private Field[] fieldsField;

        private QueryDefinition queryField;

        private SensitivityEnum caseSensitivityField;

        private bool caseSensitivityFieldSpecified;

        private string collationField;

        private SensitivityEnum accentSensitivityField;

        private bool accentSensitivityFieldSpecified;

        private SensitivityEnum kanatypeSensitivityField;

        private bool kanatypeSensitivityFieldSpecified;

        private SensitivityEnum widthSensitivityField;

        private bool widthSensitivityFieldSpecified;

        private string nameField;

        /// <remarks/>
        [System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Performance", "CA1819:PropertiesShouldNotReturnArrays" )]
        public Field[] Fields
        {
            get
            {
                return this.fieldsField;
            }
            set
            {
                this.fieldsField = value;
            }
        }

        /// <remarks/>
        public QueryDefinition Query
        {
            get
            {
                return this.queryField;
            }
            set
            {
                this.queryField = value;
            }
        }

        /// <remarks/>
        public SensitivityEnum CaseSensitivity
        {
            get
            {
                return this.caseSensitivityField;
            }
            set
            {
                this.caseSensitivityField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CaseSensitivitySpecified
        {
            get
            {
                return this.caseSensitivityFieldSpecified;
            }
            set
            {
                this.caseSensitivityFieldSpecified = value;
            }
        }

        /// <remarks/>
        public string Collation
        {
            get
            {
                return this.collationField;
            }
            set
            {
                this.collationField = value;
            }
        }

        /// <remarks/>
        public SensitivityEnum AccentSensitivity
        {
            get
            {
                return this.accentSensitivityField;
            }
            set
            {
                this.accentSensitivityField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool AccentSensitivitySpecified
        {
            get
            {
                return this.accentSensitivityFieldSpecified;
            }
            set
            {
                this.accentSensitivityFieldSpecified = value;
            }
        }

        /// <remarks/>
        public SensitivityEnum KanatypeSensitivity
        {
            get
            {
                return this.kanatypeSensitivityField;
            }
            set
            {
                this.kanatypeSensitivityField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool KanatypeSensitivitySpecified
        {
            get
            {
                return this.kanatypeSensitivityFieldSpecified;
            }
            set
            {
                this.kanatypeSensitivityFieldSpecified = value;
            }
        }

        /// <remarks/>
        public SensitivityEnum WidthSensitivity
        {
            get
            {
                return this.widthSensitivityField;
            }
            set
            {
                this.widthSensitivityField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool WidthSensitivitySpecified
        {
            get
            {
                return this.widthSensitivityFieldSpecified;
            }
            set
            {
                this.widthSensitivityFieldSpecified = value;
            }
        }

        /// <remarks/>
        public string Name
        {
            get
            {
                return this.nameField;
            }
            set
            {
                this.nameField = value;
            }
        }
    }

    /// <remarks/>
    [System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix" ), System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute( Namespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices" )]
    public enum SensitivityEnum
    {

        /// <remarks/>
        True,

        /// <remarks/>
        False,

        /// <remarks/>
        Auto,
    }

    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute( Namespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices" )]
    public partial class DataRetrievalPlan
    {

        private DataSourceDefinitionOrReference itemField;

        private DataSetDefinition dataSetField;

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute( "DataSourceDefinition", typeof( DataSourceDefinition ) )]
        [System.Xml.Serialization.XmlElementAttribute( "DataSourceReference", typeof( DataSourceReference ) )]
        [System.Xml.Serialization.XmlElementAttribute( "InvalidDataSourceReference", typeof( InvalidDataSourceReference ) )]
        public DataSourceDefinitionOrReference Item
        {
            get
            {
                return this.itemField;
            }
            set
            {
                this.itemField = value;
            }
        }

        /// <remarks/>
        public DataSetDefinition DataSet
        {
            get
            {
                return this.dataSetField;
            }
            set
            {
                this.dataSetField = value;
            }
        }
    }

    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute( Namespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices" )]
    public partial class DataSourceDefinition : DataSourceDefinitionOrReference
    {

        private string extensionField;

        private string connectStringField;

        private bool useOriginalConnectStringField;

        private bool originalConnectStringExpressionBasedField;

        private CredentialRetrievalEnum credentialRetrievalField;

        private bool windowsCredentialsField;

        private bool impersonateUserField;

        private bool impersonateUserFieldSpecified;

        private string promptField;

        private string userNameField;

        private string passwordField;

        private bool enabledField;

        private bool enabledFieldSpecified;

        /// <remarks/>
        public string Extension
        {
            get
            {
                return this.extensionField;
            }
            set
            {
                this.extensionField = value;
            }
        }

        /// <remarks/>
        public string ConnectString
        {
            get
            {
                return this.connectStringField;
            }
            set
            {
                this.connectStringField = value;
            }
        }

        /// <remarks/>
        public bool UseOriginalConnectString
        {
            get
            {
                return this.useOriginalConnectStringField;
            }
            set
            {
                this.useOriginalConnectStringField = value;
            }
        }

        /// <remarks/>
        public bool OriginalConnectStringExpressionBased
        {
            get
            {
                return this.originalConnectStringExpressionBasedField;
            }
            set
            {
                this.originalConnectStringExpressionBasedField = value;
            }
        }

        /// <remarks/>
        public CredentialRetrievalEnum CredentialRetrieval
        {
            get
            {
                return this.credentialRetrievalField;
            }
            set
            {
                this.credentialRetrievalField = value;
            }
        }

        /// <remarks/>
        public bool WindowsCredentials
        {
            get
            {
                return this.windowsCredentialsField;
            }
            set
            {
                this.windowsCredentialsField = value;
            }
        }

        /// <remarks/>
        public bool ImpersonateUser
        {
            get
            {
                return this.impersonateUserField;
            }
            set
            {
                this.impersonateUserField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ImpersonateUserSpecified
        {
            get
            {
                return this.impersonateUserFieldSpecified;
            }
            set
            {
                this.impersonateUserFieldSpecified = value;
            }
        }

        /// <remarks/>
        public string Prompt
        {
            get
            {
                return this.promptField;
            }
            set
            {
                this.promptField = value;
            }
        }

        /// <remarks/>
        public string UserName
        {
            get
            {
                return this.userNameField;
            }
            set
            {
                this.userNameField = value;
            }
        }

        /// <remarks/>
        public string Password
        {
            get
            {
                return this.passwordField;
            }
            set
            {
                this.passwordField = value;
            }
        }

        /// <remarks/>
        public bool Enabled
        {
            get
            {
                return this.enabledField;
            }
            set
            {
                this.enabledField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool EnabledSpecified
        {
            get
            {
                return this.enabledFieldSpecified;
            }
            set
            {
                this.enabledFieldSpecified = value;
            }
        }
    }

    /// <remarks/>
    [System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix" ), System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute( Namespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices" )]
    public enum CredentialRetrievalEnum
    {

        /// <remarks/>
        Prompt,

        /// <remarks/>
        Store,

        /// <remarks/>
        Integrated,

        /// <remarks/>
        None,
    }

    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlIncludeAttribute( typeof( InvalidDataSourceReference ) )]
    [System.Xml.Serialization.XmlIncludeAttribute( typeof( DataSourceReference ) )]
    [System.Xml.Serialization.XmlIncludeAttribute( typeof( DataSourceDefinition ) )]
    [System.Xml.Serialization.XmlTypeAttribute( Namespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices" )]
    public partial class DataSourceDefinitionOrReference
    {
    }

    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute( Namespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices" )]
    public partial class InvalidDataSourceReference : DataSourceDefinitionOrReference
    {
    }

    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute( Namespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices" )]
    public partial class DataSourceReference : DataSourceDefinitionOrReference
    {

        private string referenceField;

        /// <remarks/>
        public string Reference
        {
            get
            {
                return this.referenceField;
            }
            set
            {
                this.referenceField = value;
            }
        }
    }

    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute( Namespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices" )]
    public partial class Schedule
    {

        private string scheduleIDField;

        private string nameField;

        private ScheduleDefinition definitionField;

        private string descriptionField;

        private string creatorField;

        private System.DateTime nextRunTimeField;

        private bool nextRunTimeFieldSpecified;

        private System.DateTime lastRunTimeField;

        private bool lastRunTimeFieldSpecified;

        private bool referencesPresentField;

        private ScheduleStateEnum stateField;

        /// <remarks/>
        [System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Naming", "CA1706:ShortAcronymsShouldBeUppercase", MessageId = "Member" )]
        public string ScheduleID
        {
            get
            {
                return this.scheduleIDField;
            }
            set
            {
                this.scheduleIDField = value;
            }
        }

        /// <remarks/>
        public string Name
        {
            get
            {
                return this.nameField;
            }
            set
            {
                this.nameField = value;
            }
        }

        /// <remarks/>
        public ScheduleDefinition Definition
        {
            get
            {
                return this.definitionField;
            }
            set
            {
                this.definitionField = value;
            }
        }

        /// <remarks/>
        public string Description
        {
            get
            {
                return this.descriptionField;
            }
            set
            {
                this.descriptionField = value;
            }
        }

        /// <remarks/>
        public string Creator
        {
            get
            {
                return this.creatorField;
            }
            set
            {
                this.creatorField = value;
            }
        }

        /// <remarks/>
        public System.DateTime NextRunTime
        {
            get
            {
                return this.nextRunTimeField;
            }
            set
            {
                this.nextRunTimeField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool NextRunTimeSpecified
        {
            get
            {
                return this.nextRunTimeFieldSpecified;
            }
            set
            {
                this.nextRunTimeFieldSpecified = value;
            }
        }

        /// <remarks/>
        public System.DateTime LastRunTime
        {
            get
            {
                return this.lastRunTimeField;
            }
            set
            {
                this.lastRunTimeField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool LastRunTimeSpecified
        {
            get
            {
                return this.lastRunTimeFieldSpecified;
            }
            set
            {
                this.lastRunTimeFieldSpecified = value;
            }
        }

        /// <remarks/>
        public bool ReferencesPresent
        {
            get
            {
                return this.referencesPresentField;
            }
            set
            {
                this.referencesPresentField = value;
            }
        }

        /// <remarks/>
        public ScheduleStateEnum State
        {
            get
            {
                return this.stateField;
            }
            set
            {
                this.stateField = value;
            }
        }
    }

    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute( Namespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices" )]
    public partial class ScheduleDefinition : ScheduleDefinitionOrReference
    {

        private System.DateTime startDateTimeField;

        private System.DateTime endDateField;

        private bool endDateFieldSpecified;

        private RecurrencePattern itemField;

        /// <remarks/>
        public System.DateTime StartDateTime
        {
            get
            {
                return this.startDateTimeField;
            }
            set
            {
                this.startDateTimeField = value;
            }
        }

        /// <remarks/>
        public System.DateTime EndDate
        {
            get
            {
                return this.endDateField;
            }
            set
            {
                this.endDateField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool EndDateSpecified
        {
            get
            {
                return this.endDateFieldSpecified;
            }
            set
            {
                this.endDateFieldSpecified = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute( "MinuteRecurrence", typeof( MinuteRecurrence ) )]
        [System.Xml.Serialization.XmlElementAttribute( "MonthlyDOWRecurrence", typeof( MonthlyDOWRecurrence ) )]
        [System.Xml.Serialization.XmlElementAttribute( "WeeklyRecurrence", typeof( WeeklyRecurrence ) )]
        [System.Xml.Serialization.XmlElementAttribute( "MonthlyRecurrence", typeof( MonthlyRecurrence ) )]
        [System.Xml.Serialization.XmlElementAttribute( "DailyRecurrence", typeof( DailyRecurrence ) )]
        public RecurrencePattern Item
        {
            get
            {
                return this.itemField;
            }
            set
            {
                this.itemField = value;
            }
        }
    }

    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute( Namespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices" )]
    public partial class MinuteRecurrence : RecurrencePattern
    {

        private int minutesIntervalField;

        /// <remarks/>
        public int MinutesInterval
        {
            get
            {
                return this.minutesIntervalField;
            }
            set
            {
                this.minutesIntervalField = value;
            }
        }
    }

    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlIncludeAttribute( typeof( MonthlyDOWRecurrence ) )]
    [System.Xml.Serialization.XmlIncludeAttribute( typeof( MonthlyRecurrence ) )]
    [System.Xml.Serialization.XmlIncludeAttribute( typeof( DailyRecurrence ) )]
    [System.Xml.Serialization.XmlIncludeAttribute( typeof( WeeklyRecurrence ) )]
    [System.Xml.Serialization.XmlIncludeAttribute( typeof( MinuteRecurrence ) )]
    [System.Xml.Serialization.XmlTypeAttribute( Namespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices" )]
    public partial class RecurrencePattern
    {
    }

    /// <remarks/>
    [System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Naming", "CA1705:LongAcronymsShouldBePascalCased" ), System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute( Namespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices" )]
    public partial class MonthlyDOWRecurrence : RecurrencePattern
    {

        private WeekNumberEnum whichWeekField;

        private bool whichWeekFieldSpecified;

        private DaysOfWeekSelector daysOfWeekField;

        private MonthsOfYearSelector monthsOfYearField;

        /// <remarks/>
        public WeekNumberEnum WhichWeek
        {
            get
            {
                return this.whichWeekField;
            }
            set
            {
                this.whichWeekField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool WhichWeekSpecified
        {
            get
            {
                return this.whichWeekFieldSpecified;
            }
            set
            {
                this.whichWeekFieldSpecified = value;
            }
        }

        /// <remarks/>
        public DaysOfWeekSelector DaysOfWeek
        {
            get
            {
                return this.daysOfWeekField;
            }
            set
            {
                this.daysOfWeekField = value;
            }
        }

        /// <remarks/>
        public MonthsOfYearSelector MonthsOfYear
        {
            get
            {
                return this.monthsOfYearField;
            }
            set
            {
                this.monthsOfYearField = value;
            }
        }
    }

    /// <remarks/>
    [System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix" ), System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute( Namespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices" )]
    public enum WeekNumberEnum
    {

        /// <remarks/>
        FirstWeek,

        /// <remarks/>
        SecondWeek,

        /// <remarks/>
        ThirdWeek,

        /// <remarks/>
        FourthWeek,

        /// <remarks/>
        LastWeek,
    }

    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute( Namespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices" )]
    public partial class DaysOfWeekSelector
    {

        private bool sundayField;

        private bool mondayField;

        private bool tuesdayField;

        private bool wednesdayField;

        private bool thursdayField;

        private bool fridayField;

        private bool saturdayField;

        /// <remarks/>
        public bool Sunday
        {
            get
            {
                return this.sundayField;
            }
            set
            {
                this.sundayField = value;
            }
        }

        /// <remarks/>
        public bool Monday
        {
            get
            {
                return this.mondayField;
            }
            set
            {
                this.mondayField = value;
            }
        }

        /// <remarks/>
        public bool Tuesday
        {
            get
            {
                return this.tuesdayField;
            }
            set
            {
                this.tuesdayField = value;
            }
        }

        /// <remarks/>
        public bool Wednesday
        {
            get
            {
                return this.wednesdayField;
            }
            set
            {
                this.wednesdayField = value;
            }
        }

        /// <remarks/>
        public bool Thursday
        {
            get
            {
                return this.thursdayField;
            }
            set
            {
                this.thursdayField = value;
            }
        }

        /// <remarks/>
        public bool Friday
        {
            get
            {
                return this.fridayField;
            }
            set
            {
                this.fridayField = value;
            }
        }

        /// <remarks/>
        public bool Saturday
        {
            get
            {
                return this.saturdayField;
            }
            set
            {
                this.saturdayField = value;
            }
        }
    }

    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute( Namespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices" )]
    public partial class MonthsOfYearSelector
    {

        private bool januaryField;

        private bool februaryField;

        private bool marchField;

        private bool aprilField;

        private bool mayField;

        private bool juneField;

        private bool julyField;

        private bool augustField;

        private bool septemberField;

        private bool octoberField;

        private bool novemberField;

        private bool decemberField;

        /// <remarks/>
        public bool January
        {
            get
            {
                return this.januaryField;
            }
            set
            {
                this.januaryField = value;
            }
        }

        /// <remarks/>
        public bool February
        {
            get
            {
                return this.februaryField;
            }
            set
            {
                this.februaryField = value;
            }
        }

        /// <remarks/>
        public bool March
        {
            get
            {
                return this.marchField;
            }
            set
            {
                this.marchField = value;
            }
        }

        /// <remarks/>
        public bool April
        {
            get
            {
                return this.aprilField;
            }
            set
            {
                this.aprilField = value;
            }
        }

        /// <remarks/>
        public bool May
        {
            get
            {
                return this.mayField;
            }
            set
            {
                this.mayField = value;
            }
        }

        /// <remarks/>
        public bool June
        {
            get
            {
                return this.juneField;
            }
            set
            {
                this.juneField = value;
            }
        }

        /// <remarks/>
        public bool July
        {
            get
            {
                return this.julyField;
            }
            set
            {
                this.julyField = value;
            }
        }

        /// <remarks/>
        public bool August
        {
            get
            {
                return this.augustField;
            }
            set
            {
                this.augustField = value;
            }
        }

        /// <remarks/>
        public bool September
        {
            get
            {
                return this.septemberField;
            }
            set
            {
                this.septemberField = value;
            }
        }

        /// <remarks/>
        public bool October
        {
            get
            {
                return this.octoberField;
            }
            set
            {
                this.octoberField = value;
            }
        }

        /// <remarks/>
        public bool November
        {
            get
            {
                return this.novemberField;
            }
            set
            {
                this.novemberField = value;
            }
        }

        /// <remarks/>
        public bool December
        {
            get
            {
                return this.decemberField;
            }
            set
            {
                this.decemberField = value;
            }
        }
    }

    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute( Namespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices" )]
    public partial class MonthlyRecurrence : RecurrencePattern
    {

        private string daysField;

        private MonthsOfYearSelector monthsOfYearField;

        /// <remarks/>
        public string Days
        {
            get
            {
                return this.daysField;
            }
            set
            {
                this.daysField = value;
            }
        }

        /// <remarks/>
        public MonthsOfYearSelector MonthsOfYear
        {
            get
            {
                return this.monthsOfYearField;
            }
            set
            {
                this.monthsOfYearField = value;
            }
        }
    }

    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute( Namespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices" )]
    public partial class DailyRecurrence : RecurrencePattern
    {

        private int daysIntervalField;

        /// <remarks/>
        public int DaysInterval
        {
            get
            {
                return this.daysIntervalField;
            }
            set
            {
                this.daysIntervalField = value;
            }
        }
    }

    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute( Namespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices" )]
    public partial class WeeklyRecurrence : RecurrencePattern
    {

        private int weeksIntervalField;

        private bool weeksIntervalFieldSpecified;

        private DaysOfWeekSelector daysOfWeekField;

        /// <remarks/>
        public int WeeksInterval
        {
            get
            {
                return this.weeksIntervalField;
            }
            set
            {
                this.weeksIntervalField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool WeeksIntervalSpecified
        {
            get
            {
                return this.weeksIntervalFieldSpecified;
            }
            set
            {
                this.weeksIntervalFieldSpecified = value;
            }
        }

        /// <remarks/>
        public DaysOfWeekSelector DaysOfWeek
        {
            get
            {
                return this.daysOfWeekField;
            }
            set
            {
                this.daysOfWeekField = value;
            }
        }
    }

    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlIncludeAttribute( typeof( NoSchedule ) )]
    [System.Xml.Serialization.XmlIncludeAttribute( typeof( ScheduleReference ) )]
    [System.Xml.Serialization.XmlIncludeAttribute( typeof( ScheduleDefinition ) )]
    [System.Xml.Serialization.XmlTypeAttribute( Namespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices" )]
    public partial class ScheduleDefinitionOrReference
    {
    }

    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute( Namespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices" )]
    public partial class NoSchedule : ScheduleDefinitionOrReference
    {
    }

    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute( Namespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices" )]
    public partial class ScheduleReference : ScheduleDefinitionOrReference
    {

        private string scheduleIDField;

        private ScheduleDefinition definitionField;

        /// <remarks/>
        [System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Naming", "CA1706:ShortAcronymsShouldBeUppercase", MessageId = "Member" )]
        public string ScheduleID
        {
            get
            {
                return this.scheduleIDField;
            }
            set
            {
                this.scheduleIDField = value;
            }
        }

        /// <remarks/>
        public ScheduleDefinition Definition
        {
            get
            {
                return this.definitionField;
            }
            set
            {
                this.definitionField = value;
            }
        }
    }

    /// <remarks/>
    [System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix" ), System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute( Namespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices" )]
    public enum ScheduleStateEnum
    {

        /// <remarks/>
        Ready,

        /// <remarks/>
        Running,

        /// <remarks/>
        Paused,

        /// <remarks/>
        Expired,

        /// <remarks/>
        Failing,
    }

    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute( Namespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices" )]
    public partial class ReportHistorySnapshot
    {

        private string historyIDField;

        private System.DateTime creationDateField;

        private int sizeField;

        /// <remarks/>
        [System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Naming", "CA1706:ShortAcronymsShouldBeUppercase", MessageId = "Member" )]
        public string HistoryID
        {
            get
            {
                return this.historyIDField;
            }
            set
            {
                this.historyIDField = value;
            }
        }

        /// <remarks/>
        public System.DateTime CreationDate
        {
            get
            {
                return this.creationDateField;
            }
            set
            {
                this.creationDateField = value;
            }
        }

        /// <remarks/>
        public int Size
        {
            get
            {
                return this.sizeField;
            }
            set
            {
                this.sizeField = value;
            }
        }
    }

    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute( Namespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices" )]
    public partial class DataSourcePrompt
    {

        private string nameField;

        private string dataSourceIDField;

        private string promptField;

        /// <remarks/>
        public string Name
        {
            get
            {
                return this.nameField;
            }
            set
            {
                this.nameField = value;
            }
        }

        /// <remarks/>
        [System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Naming", "CA1706:ShortAcronymsShouldBeUppercase", MessageId = "Member" )]
        public string DataSourceID
        {
            get
            {
                return this.dataSourceIDField;
            }
            set
            {
                this.dataSourceIDField = value;
            }
        }

        /// <remarks/>
        public string Prompt
        {
            get
            {
                return this.promptField;
            }
            set
            {
                this.promptField = value;
            }
        }
    }

    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute( Namespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices" )]
    public partial class DataSource
    {

        private string nameField;

        private DataSourceDefinitionOrReference itemField;

        /// <remarks/>
        public string Name
        {
            get
            {
                return this.nameField;
            }
            set
            {
                this.nameField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute( "DataSourceDefinition", typeof( DataSourceDefinition ) )]
        [System.Xml.Serialization.XmlElementAttribute( "DataSourceReference", typeof( DataSourceReference ) )]
        [System.Xml.Serialization.XmlElementAttribute( "InvalidDataSourceReference", typeof( InvalidDataSourceReference ) )]
        public DataSourceDefinitionOrReference Item
        {
            get
            {
                return this.itemField;
            }
            set
            {
                this.itemField = value;
            }
        }
    }

    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute( Namespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices" )]
    public partial class Job
    {

        private string jobIDField;

        private string nameField;

        private string pathField;

        private string descriptionField;

        private string machineField;

        private string userField;

        private System.DateTime startDateTimeField;

        private JobActionEnum actionField;

        private JobTypeEnum typeField;

        private JobStatusEnum statusField;

        /// <remarks/>
        [System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Naming", "CA1706:ShortAcronymsShouldBeUppercase", MessageId = "Member" )]
        public string JobID
        {
            get
            {
                return this.jobIDField;
            }
            set
            {
                this.jobIDField = value;
            }
        }

        /// <remarks/>
        public string Name
        {
            get
            {
                return this.nameField;
            }
            set
            {
                this.nameField = value;
            }
        }

        /// <remarks/>
        public string Path
        {
            get
            {
                return this.pathField;
            }
            set
            {
                this.pathField = value;
            }
        }

        /// <remarks/>
        public string Description
        {
            get
            {
                return this.descriptionField;
            }
            set
            {
                this.descriptionField = value;
            }
        }

        /// <remarks/>
        public string Machine
        {
            get
            {
                return this.machineField;
            }
            set
            {
                this.machineField = value;
            }
        }

        /// <remarks/>
        public string User
        {
            get
            {
                return this.userField;
            }
            set
            {
                this.userField = value;
            }
        }

        /// <remarks/>
        public System.DateTime StartDateTime
        {
            get
            {
                return this.startDateTimeField;
            }
            set
            {
                this.startDateTimeField = value;
            }
        }

        /// <remarks/>
        public JobActionEnum Action
        {
            get
            {
                return this.actionField;
            }
            set
            {
                this.actionField = value;
            }
        }

        /// <remarks/>
        public JobTypeEnum Type
        {
            get
            {
                return this.typeField;
            }
            set
            {
                this.typeField = value;
            }
        }

        /// <remarks/>
        public JobStatusEnum Status
        {
            get
            {
                return this.statusField;
            }
            set
            {
                this.statusField = value;
            }
        }
    }

    /// <remarks/>
    [System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix" ), System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute( Namespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices" )]
    public enum JobActionEnum
    {

        /// <remarks/>
        Render,

        /// <remarks/>
        SnapshotCreation,

        /// <remarks/>
        ReportHistoryCreation,

        /// <remarks/>
        ExecuteQuery,
    }

    /// <remarks/>
    [System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix" ), System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute( Namespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices" )]
    public enum JobTypeEnum
    {

        /// <remarks/>
        User,

        /// <remarks/>
        System,
    }

    /// <remarks/>
    [System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix" ), System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute( Namespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices" )]
    public enum JobStatusEnum
    {

        /// <remarks/>
        New,

        /// <remarks/>
        Running,

        /// <remarks/>
        CancelRequested,
    }

    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlIncludeAttribute( typeof( TimeExpiration ) )]
    [System.Xml.Serialization.XmlIncludeAttribute( typeof( ScheduleExpiration ) )]
    [System.Xml.Serialization.XmlTypeAttribute( Namespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices" )]
    public partial class ExpirationDefinition
    {
    }

    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute( Namespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices" )]
    public partial class TimeExpiration : ExpirationDefinition
    {

        private int minutesField;

        /// <remarks/>
        public int Minutes
        {
            get
            {
                return this.minutesField;
            }
            set
            {
                this.minutesField = value;
            }
        }
    }

    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute( Namespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices" )]
    public partial class ScheduleExpiration : ExpirationDefinition
    {

        private ScheduleDefinitionOrReference itemField;

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute( "ScheduleReference", typeof( ScheduleReference ) )]
        [System.Xml.Serialization.XmlElementAttribute( "ScheduleDefinition", typeof( ScheduleDefinition ) )]
        public ScheduleDefinitionOrReference Item
        {
            get
            {
                return this.itemField;
            }
            set
            {
                this.itemField = value;
            }
        }
    }

    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute( Namespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices" )]
    public partial class ReportParameter
    {

        private string nameField;

        private ParameterTypeEnum typeField;

        private bool typeFieldSpecified;

        private bool nullableField;

        private bool nullableFieldSpecified;

        private bool allowBlankField;

        private bool allowBlankFieldSpecified;

        private bool multiValueField;

        private bool multiValueFieldSpecified;

        private bool queryParameterField;

        private bool queryParameterFieldSpecified;

        private string promptField;

        private bool promptUserField;

        private bool promptUserFieldSpecified;

        private string[] dependenciesField;

        private bool validValuesQueryBasedField;

        private bool validValuesQueryBasedFieldSpecified;

        private ValidValue[] validValuesField;

        private bool defaultValuesQueryBasedField;

        private bool defaultValuesQueryBasedFieldSpecified;

        private string[] defaultValuesField;

        private ParameterStateEnum stateField;

        private bool stateFieldSpecified;

        private string errorMessageField;

        /// <remarks/>
        public string Name
        {
            get
            {
                return this.nameField;
            }
            set
            {
                this.nameField = value;
            }
        }

        /// <remarks/>
        public ParameterTypeEnum Type
        {
            get
            {
                return this.typeField;
            }
            set
            {
                this.typeField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool TypeSpecified
        {
            get
            {
                return this.typeFieldSpecified;
            }
            set
            {
                this.typeFieldSpecified = value;
            }
        }

        /// <remarks/>
        public bool Nullable
        {
            get
            {
                return this.nullableField;
            }
            set
            {
                this.nullableField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool NullableSpecified
        {
            get
            {
                return this.nullableFieldSpecified;
            }
            set
            {
                this.nullableFieldSpecified = value;
            }
        }

        /// <remarks/>
        public bool AllowBlank
        {
            get
            {
                return this.allowBlankField;
            }
            set
            {
                this.allowBlankField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool AllowBlankSpecified
        {
            get
            {
                return this.allowBlankFieldSpecified;
            }
            set
            {
                this.allowBlankFieldSpecified = value;
            }
        }

        /// <remarks/>
        public bool MultiValue
        {
            get
            {
                return this.multiValueField;
            }
            set
            {
                this.multiValueField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool MultiValueSpecified
        {
            get
            {
                return this.multiValueFieldSpecified;
            }
            set
            {
                this.multiValueFieldSpecified = value;
            }
        }

        /// <remarks/>
        public bool QueryParameter
        {
            get
            {
                return this.queryParameterField;
            }
            set
            {
                this.queryParameterField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool QueryParameterSpecified
        {
            get
            {
                return this.queryParameterFieldSpecified;
            }
            set
            {
                this.queryParameterFieldSpecified = value;
            }
        }

        /// <remarks/>
        public string Prompt
        {
            get
            {
                return this.promptField;
            }
            set
            {
                this.promptField = value;
            }
        }

        /// <remarks/>
        public bool PromptUser
        {
            get
            {
                return this.promptUserField;
            }
            set
            {
                this.promptUserField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool PromptUserSpecified
        {
            get
            {
                return this.promptUserFieldSpecified;
            }
            set
            {
                this.promptUserFieldSpecified = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute( "Dependency" )]
        public string[] Dependencies
        {
            get
            {
                return this.dependenciesField;
            }
            set
            {
                this.dependenciesField = value;
            }
        }

        /// <remarks/>
        public bool ValidValuesQueryBased
        {
            get
            {
                return this.validValuesQueryBasedField;
            }
            set
            {
                this.validValuesQueryBasedField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ValidValuesQueryBasedSpecified
        {
            get
            {
                return this.validValuesQueryBasedFieldSpecified;
            }
            set
            {
                this.validValuesQueryBasedFieldSpecified = value;
            }
        }

        /// <remarks/>
        [System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Performance", "CA1819:PropertiesShouldNotReturnArrays" )]
        public ValidValue[] ValidValues
        {
            get
            {
                return this.validValuesField;
            }
            set
            {
                this.validValuesField = value;
            }
        }

        /// <remarks/>
        public bool DefaultValuesQueryBased
        {
            get
            {
                return this.defaultValuesQueryBasedField;
            }
            set
            {
                this.defaultValuesQueryBasedField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DefaultValuesQueryBasedSpecified
        {
            get
            {
                return this.defaultValuesQueryBasedFieldSpecified;
            }
            set
            {
                this.defaultValuesQueryBasedFieldSpecified = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute( "Value" )]
        public string[] DefaultValues
        {
            get
            {
                return this.defaultValuesField;
            }
            set
            {
                this.defaultValuesField = value;
            }
        }

        /// <remarks/>
        public ParameterStateEnum State
        {
            get
            {
                return this.stateField;
            }
            set
            {
                this.stateField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool StateSpecified
        {
            get
            {
                return this.stateFieldSpecified;
            }
            set
            {
                this.stateFieldSpecified = value;
            }
        }

        /// <remarks/>
        public string ErrorMessage
        {
            get
            {
                return this.errorMessageField;
            }
            set
            {
                this.errorMessageField = value;
            }
        }
    }

    /// <remarks/>
    [System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix" ), System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute( Namespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices" )]
    public enum ParameterTypeEnum
    {

        /// <remarks/>
        Boolean,

        /// <remarks/>
        DateTime,

        /// <remarks/>
        Integer,

        /// <remarks/>
        Float,

        /// <remarks/>
        String,
    }

    /// <remarks/>
    [System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix" ), System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute( Namespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices" )]
    public enum ParameterStateEnum
    {

        /// <remarks/>
        HasValidValue,

        /// <remarks/>
        MissingValidValue,

        /// <remarks/>
        HasOutstandingDependencies,

        /// <remarks/>
        DynamicValuesUnavailable,
    }

    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute( Namespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices" )]
    public partial class DataSourceCredentials
    {

        private string dataSourceNameField;

        private string userNameField;

        private string passwordField;

        /// <remarks/>
        public string DataSourceName
        {
            get
            {
                return this.dataSourceNameField;
            }
            set
            {
                this.dataSourceNameField = value;
            }
        }

        /// <remarks/>
        public string UserName
        {
            get
            {
                return this.userNameField;
            }
            set
            {
                this.userNameField = value;
            }
        }

        /// <remarks/>
        public string Password
        {
            get
            {
                return this.passwordField;
            }
            set
            {
                this.passwordField = value;
            }
        }
    }

    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute( Namespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices" )]
    public partial class Warning
    {

        private string codeField;

        private string severityField;

        private string objectNameField;

        private string objectTypeField;

        private string messageField;

        /// <remarks/>
        public string Code
        {
            get
            {
                return this.codeField;
            }
            set
            {
                this.codeField = value;
            }
        }

        /// <remarks/>
        public string Severity
        {
            get
            {
                return this.severityField;
            }
            set
            {
                this.severityField = value;
            }
        }

        /// <remarks/>
        public string ObjectName
        {
            get
            {
                return this.objectNameField;
            }
            set
            {
                this.objectNameField = value;
            }
        }

        /// <remarks/>
        public string ObjectType
        {
            get
            {
                return this.objectTypeField;
            }
            set
            {
                this.objectTypeField = value;
            }
        }

        /// <remarks/>
        public string Message
        {
            get
            {
                return this.messageField;
            }
            set
            {
                this.messageField = value;
            }
        }
    }

    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute( Namespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices" )]
    public partial class CatalogItem
    {

        private string idField;

        private string nameField;

        private string pathField;

        private string virtualPathField;

        private ItemTypeEnum typeField;

        private int sizeField;

        private bool sizeFieldSpecified;

        private string descriptionField;

        private bool hiddenField;

        private bool hiddenFieldSpecified;

        private System.DateTime creationDateField;

        private bool creationDateFieldSpecified;

        private System.DateTime modifiedDateField;

        private bool modifiedDateFieldSpecified;

        private string createdByField;

        private string modifiedByField;

        private string mimeTypeField;

        private System.DateTime executionDateField;

        private bool executionDateFieldSpecified;

        /// <remarks/>
        [System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Naming", "CA1706:ShortAcronymsShouldBeUppercase", MessageId = "Member" )]
        public string ID
        {
            get
            {
                return this.idField;
            }
            set
            {
                this.idField = value;
            }
        }

        /// <remarks/>
        public string Name
        {
            get
            {
                return this.nameField;
            }
            set
            {
                this.nameField = value;
            }
        }

        /// <remarks/>
        public string Path
        {
            get
            {
                return this.pathField;
            }
            set
            {
                this.pathField = value;
            }
        }

        /// <remarks/>
        public string VirtualPath
        {
            get
            {
                return this.virtualPathField;
            }
            set
            {
                this.virtualPathField = value;
            }
        }

        /// <remarks/>
        public ItemTypeEnum Type
        {
            get
            {
                return this.typeField;
            }
            set
            {
                this.typeField = value;
            }
        }

        /// <remarks/>
        public int Size
        {
            get
            {
                return this.sizeField;
            }
            set
            {
                this.sizeField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool SizeSpecified
        {
            get
            {
                return this.sizeFieldSpecified;
            }
            set
            {
                this.sizeFieldSpecified = value;
            }
        }

        /// <remarks/>
        public string Description
        {
            get
            {
                return this.descriptionField;
            }
            set
            {
                this.descriptionField = value;
            }
        }

        /// <remarks/>
        public bool Hidden
        {
            get
            {
                return this.hiddenField;
            }
            set
            {
                this.hiddenField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool HiddenSpecified
        {
            get
            {
                return this.hiddenFieldSpecified;
            }
            set
            {
                this.hiddenFieldSpecified = value;
            }
        }

        /// <remarks/>
        public System.DateTime CreationDate
        {
            get
            {
                return this.creationDateField;
            }
            set
            {
                this.creationDateField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CreationDateSpecified
        {
            get
            {
                return this.creationDateFieldSpecified;
            }
            set
            {
                this.creationDateFieldSpecified = value;
            }
        }

        /// <remarks/>
        public System.DateTime ModifiedDate
        {
            get
            {
                return this.modifiedDateField;
            }
            set
            {
                this.modifiedDateField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ModifiedDateSpecified
        {
            get
            {
                return this.modifiedDateFieldSpecified;
            }
            set
            {
                this.modifiedDateFieldSpecified = value;
            }
        }

        /// <remarks/>
        public string CreatedBy
        {
            get
            {
                return this.createdByField;
            }
            set
            {
                this.createdByField = value;
            }
        }

        /// <remarks/>
        public string ModifiedBy
        {
            get
            {
                return this.modifiedByField;
            }
            set
            {
                this.modifiedByField = value;
            }
        }

        /// <remarks/>
        public string MimeType
        {
            get
            {
                return this.mimeTypeField;
            }
            set
            {
                this.mimeTypeField = value;
            }
        }

        /// <remarks/>
        public System.DateTime ExecutionDate
        {
            get
            {
                return this.executionDateField;
            }
            set
            {
                this.executionDateField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ExecutionDateSpecified
        {
            get
            {
                return this.executionDateFieldSpecified;
            }
            set
            {
                this.executionDateFieldSpecified = value;
            }
        }
    }

    /// <remarks/>
    [System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix" ), System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute( Namespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices" )]
    public enum ItemTypeEnum
    {

        /// <remarks/>
        Unknown,

        /// <remarks/>
        Folder,

        /// <remarks/>
        Report,

        /// <remarks/>
        Resource,

        /// <remarks/>
        LinkedReport,

        /// <remarks/>
        DataSource,

        /// <remarks/>
        Model,
    }

    /// <remarks/>
    [System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords" ), System.SerializableAttribute()]
    [System.Xml.Serialization.XmlIncludeAttribute( typeof( SearchCondition ) )]
    [System.Xml.Serialization.XmlTypeAttribute( Namespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices" )]
    public partial class Property
    {

        private string nameField;

        private string valueField;

        /// <remarks/>
        public string Name
        {
            get
            {
                return this.nameField;
            }
            set
            {
                this.nameField = value;
            }
        }

        /// <remarks/>
        public string Value
        {
            get
            {
                return this.valueField;
            }
            set
            {
                this.valueField = value;
            }
        }
    }

    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute( Namespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices" )]
    public partial class SearchCondition : Property
    {

        private ConditionEnum conditionField;

        private bool conditionFieldSpecified;

        /// <remarks/>
        public ConditionEnum Condition
        {
            get
            {
                return this.conditionField;
            }
            set
            {
                this.conditionField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ConditionSpecified
        {
            get
            {
                return this.conditionFieldSpecified;
            }
            set
            {
                this.conditionFieldSpecified = value;
            }
        }
    }

    /// <remarks/>
    [System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix" ), System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute( Namespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices" )]
    public enum ConditionEnum
    {

        /// <remarks/>
        Contains,

        /// <remarks/>
        Equals,
    }

    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute( Namespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices" )]
    [System.Xml.Serialization.XmlRootAttribute( Namespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices", IsNullable = false )]
    public partial class BatchHeader : System.Web.Services.Protocols.SoapHeader
    {

        private string batchIDField;

        [System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Usage", "CA2235:MarkAllNonSerializableFields" )]
        private System.Xml.XmlAttribute[] anyAttrField;

        /// <remarks/>
        [System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Naming", "CA1706:ShortAcronymsShouldBeUppercase", MessageId = "Member" )]
        public string BatchID
        {
            get
            {
                return this.batchIDField;
            }
            set
            {
                this.batchIDField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlAnyAttributeAttribute()]
        public System.Xml.XmlAttribute[] AnyAttr
        {
            get
            {
                return this.anyAttrField;
            }
            set
            {
                this.anyAttrField = value;
            }
        }
    }

    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute( Namespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices" )]
    [System.Xml.Serialization.XmlRootAttribute( Namespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices", IsNullable = false )]
    public partial class ItemNamespaceHeader : System.Web.Services.Protocols.SoapHeader
    {

        private ItemNamespaceEnum itemNamespaceField;

        [System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Usage", "CA2235:MarkAllNonSerializableFields" )]
        private System.Xml.XmlAttribute[] anyAttrField;

        /// <remarks/>
        public ItemNamespaceEnum ItemNamespace
        {
            get
            {
                return this.itemNamespaceField;
            }
            set
            {
                this.itemNamespaceField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlAnyAttributeAttribute()]
        public System.Xml.XmlAttribute[] AnyAttr
        {
            get
            {
                return this.anyAttrField;
            }
            set
            {
                this.anyAttrField = value;
            }
        }
    }

    /// <remarks/>
    [System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix" ), System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute( Namespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices" )]
    public enum ItemNamespaceEnum
    {

        /// <remarks/>
        PathBased,

        /// <remarks/>
        [System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Naming", "CA1705:LongAcronymsShouldBePascalCased", MessageId = "Member" )]
        GUIDBased,
    }

    /// <remarks/>
    [System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix" ), System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute( Namespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices" )]
    public enum ExecutionSettingEnum
    {

        /// <remarks/>
        Live,

        /// <remarks/>
        Snapshot,
    }

    /// <remarks/>
    [System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix" ), System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute( Namespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices" )]
    public enum BooleanOperatorEnum
    {

        /// <remarks/>
        And,

        /// <remarks/>
        Or,
    }

    /// <remarks/>
    [System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix" ), System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute( Namespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices" )]
    public enum SecurityScopeEnum
    {

        /// <remarks/>
        System,

        /// <remarks/>
        Catalog,

        /// <remarks/>
        Model,

        /// <remarks/>
        All,
    }

    /// <remarks/>
    [System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Design", "CA1003:UseGenericEventHandlerInstances" )]
    public delegate void ListSecureMethodsCompletedEventHandler( object sender, ListSecureMethodsCompletedEventArgs e );

    /// <remarks/>
    public partial class ListSecureMethodsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal ListSecureMethodsCompletedEventArgs( object[] results, System.Exception exception, bool cancelled, object userState )
            :
                base( exception, cancelled, userState )
        {
            this.results = results;
        }

        /// <remarks/>
        [System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Performance", "CA1819:PropertiesShouldNotReturnArrays" )]
        public string[] Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ( (string[])( this.results[ 0 ] ) );
            }
        }
    }

    /// <remarks/>
    [System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Design", "CA1003:UseGenericEventHandlerInstances" )]
    public delegate void CreateBatchCompletedEventHandler( object sender, CreateBatchCompletedEventArgs e );

    /// <remarks/>
    public partial class CreateBatchCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal CreateBatchCompletedEventArgs( object[] results, System.Exception exception, bool cancelled, object userState )
            :
                base( exception, cancelled, userState )
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ( (string)( this.results[ 0 ] ) );
            }
        }
    }

    /// <remarks/>
    [System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Design", "CA1003:UseGenericEventHandlerInstances" )]
    public delegate void CancelBatchCompletedEventHandler( object sender, System.ComponentModel.AsyncCompletedEventArgs e );

    /// <remarks/>
    [System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Design", "CA1003:UseGenericEventHandlerInstances" )]
    public delegate void ExecuteBatchCompletedEventHandler( object sender, System.ComponentModel.AsyncCompletedEventArgs e );

    /// <remarks/>
    [System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Design", "CA1003:UseGenericEventHandlerInstances" )]
    public delegate void GetSystemPropertiesCompletedEventHandler( object sender, GetSystemPropertiesCompletedEventArgs e );

    /// <remarks/>
    public partial class GetSystemPropertiesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetSystemPropertiesCompletedEventArgs( object[] results, System.Exception exception, bool cancelled, object userState )
            :
                base( exception, cancelled, userState )
        {
            this.results = results;
        }

        /// <remarks/>
        [System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Performance", "CA1819:PropertiesShouldNotReturnArrays" )]
        public Property[] Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ( (Property[])( this.results[ 0 ] ) );
            }
        }
    }

    /// <remarks/>
    [System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Design", "CA1003:UseGenericEventHandlerInstances" )]
    public delegate void SetSystemPropertiesCompletedEventHandler( object sender, System.ComponentModel.AsyncCompletedEventArgs e );

    /// <remarks/>
    [System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Design", "CA1003:UseGenericEventHandlerInstances" )]
    public delegate void DeleteItemCompletedEventHandler( object sender, System.ComponentModel.AsyncCompletedEventArgs e );

    /// <remarks/>
    [System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Design", "CA1003:UseGenericEventHandlerInstances" )]
    public delegate void MoveItemCompletedEventHandler( object sender, System.ComponentModel.AsyncCompletedEventArgs e );

    /// <remarks/>
    [System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Design", "CA1003:UseGenericEventHandlerInstances" )]
    public delegate void ListChildrenCompletedEventHandler( object sender, ListChildrenCompletedEventArgs e );

    /// <remarks/>
    public partial class ListChildrenCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal ListChildrenCompletedEventArgs( object[] results, System.Exception exception, bool cancelled, object userState )
            :
                base( exception, cancelled, userState )
        {
            this.results = results;
        }

        /// <remarks/>
        [System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Performance", "CA1819:PropertiesShouldNotReturnArrays" )]
        public CatalogItem[] Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ( (CatalogItem[])( this.results[ 0 ] ) );
            }
        }
    }

    /// <remarks/>
    [System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Design", "CA1003:UseGenericEventHandlerInstances" )]
    public delegate void ListDependentItemsCompletedEventHandler( object sender, ListDependentItemsCompletedEventArgs e );

    /// <remarks/>
    public partial class ListDependentItemsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal ListDependentItemsCompletedEventArgs( object[] results, System.Exception exception, bool cancelled, object userState )
            :
                base( exception, cancelled, userState )
        {
            this.results = results;
        }

        /// <remarks/>
        [System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Performance", "CA1819:PropertiesShouldNotReturnArrays" )]
        public CatalogItem[] Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ( (CatalogItem[])( this.results[ 0 ] ) );
            }
        }
    }

    /// <remarks/>
    [System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Design", "CA1003:UseGenericEventHandlerInstances" )]
    public delegate void GetPropertiesCompletedEventHandler( object sender, GetPropertiesCompletedEventArgs e );

    /// <remarks/>
    public partial class GetPropertiesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetPropertiesCompletedEventArgs( object[] results, System.Exception exception, bool cancelled, object userState )
            :
                base( exception, cancelled, userState )
        {
            this.results = results;
        }

        /// <remarks/>
        [System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Performance", "CA1819:PropertiesShouldNotReturnArrays" )]
        public Property[] Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ( (Property[])( this.results[ 0 ] ) );
            }
        }
    }

    /// <remarks/>
    [System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Design", "CA1003:UseGenericEventHandlerInstances" )]
    public delegate void SetPropertiesCompletedEventHandler( object sender, System.ComponentModel.AsyncCompletedEventArgs e );

    /// <remarks/>
    [System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Design", "CA1003:UseGenericEventHandlerInstances" )]
    public delegate void GetItemTypeCompletedEventHandler( object sender, GetItemTypeCompletedEventArgs e );

    /// <remarks/>
    public partial class GetItemTypeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetItemTypeCompletedEventArgs( object[] results, System.Exception exception, bool cancelled, object userState )
            :
                base( exception, cancelled, userState )
        {
            this.results = results;
        }

        /// <remarks/>
        public ItemTypeEnum Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ( (ItemTypeEnum)( this.results[ 0 ] ) );
            }
        }
    }

    /// <remarks/>
    [System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Design", "CA1003:UseGenericEventHandlerInstances" )]
    public delegate void CreateFolderCompletedEventHandler( object sender, System.ComponentModel.AsyncCompletedEventArgs e );

    /// <remarks/>
    [System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Design", "CA1003:UseGenericEventHandlerInstances" )]
    public delegate void CreateReportCompletedEventHandler( object sender, CreateReportCompletedEventArgs e );

    /// <remarks/>
    public partial class CreateReportCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal CreateReportCompletedEventArgs( object[] results, System.Exception exception, bool cancelled, object userState )
            :
                base( exception, cancelled, userState )
        {
            this.results = results;
        }

        /// <remarks/>
        [System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Performance", "CA1819:PropertiesShouldNotReturnArrays" )]
        public Warning[] Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ( (Warning[])( this.results[ 0 ] ) );
            }
        }
    }

    /// <remarks/>
    [System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Design", "CA1003:UseGenericEventHandlerInstances" )]
    public delegate void GetReportDefinitionCompletedEventHandler( object sender, GetReportDefinitionCompletedEventArgs e );

    /// <remarks/>
    public partial class GetReportDefinitionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetReportDefinitionCompletedEventArgs( object[] results, System.Exception exception, bool cancelled, object userState )
            :
                base( exception, cancelled, userState )
        {
            this.results = results;
        }

        /// <remarks/>
        [System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Performance", "CA1819:PropertiesShouldNotReturnArrays" )]
        public byte[] Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ( (byte[])( this.results[ 0 ] ) );
            }
        }
    }

    /// <remarks/>
    [System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Design", "CA1003:UseGenericEventHandlerInstances" )]
    public delegate void SetReportDefinitionCompletedEventHandler( object sender, SetReportDefinitionCompletedEventArgs e );

    /// <remarks/>
    public partial class SetReportDefinitionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal SetReportDefinitionCompletedEventArgs( object[] results, System.Exception exception, bool cancelled, object userState )
            :
                base( exception, cancelled, userState )
        {
            this.results = results;
        }

        /// <remarks/>
        [System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Performance", "CA1819:PropertiesShouldNotReturnArrays" )]
        public Warning[] Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ( (Warning[])( this.results[ 0 ] ) );
            }
        }
    }

    /// <remarks/>
    [System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Design", "CA1003:UseGenericEventHandlerInstances" )]
    public delegate void CreateResourceCompletedEventHandler( object sender, System.ComponentModel.AsyncCompletedEventArgs e );

    /// <remarks/>
    [System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Design", "CA1003:UseGenericEventHandlerInstances" )]
    public delegate void SetResourceContentsCompletedEventHandler( object sender, System.ComponentModel.AsyncCompletedEventArgs e );

    /// <remarks/>
    [System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Design", "CA1003:UseGenericEventHandlerInstances" )]
    public delegate void GetResourceContentsCompletedEventHandler( object sender, GetResourceContentsCompletedEventArgs e );

    /// <remarks/>
    public partial class GetResourceContentsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetResourceContentsCompletedEventArgs( object[] results, System.Exception exception, bool cancelled, object userState )
            :
                base( exception, cancelled, userState )
        {
            this.results = results;
        }

        /// <remarks/>
        [System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Performance", "CA1819:PropertiesShouldNotReturnArrays" )]
        public byte[] Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ( (byte[])( this.results[ 0 ] ) );
            }
        }

        /// <remarks/>
        public string MimeType
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ( (string)( this.results[ 1 ] ) );
            }
        }
    }

    /// <remarks/>
    [System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Design", "CA1003:UseGenericEventHandlerInstances" )]
    public delegate void GetReportParametersCompletedEventHandler( object sender, GetReportParametersCompletedEventArgs e );

    /// <remarks/>
    public partial class GetReportParametersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetReportParametersCompletedEventArgs( object[] results, System.Exception exception, bool cancelled, object userState )
            :
                base( exception, cancelled, userState )
        {
            this.results = results;
        }

        /// <remarks/>
        [System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Performance", "CA1819:PropertiesShouldNotReturnArrays" )]
        public ReportParameter[] Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ( (ReportParameter[])( this.results[ 0 ] ) );
            }
        }
    }

    /// <remarks/>
    [System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Design", "CA1003:UseGenericEventHandlerInstances" )]
    public delegate void SetReportParametersCompletedEventHandler( object sender, System.ComponentModel.AsyncCompletedEventArgs e );

    /// <remarks/>
    [System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Design", "CA1003:UseGenericEventHandlerInstances" )]
    public delegate void CreateLinkedReportCompletedEventHandler( object sender, System.ComponentModel.AsyncCompletedEventArgs e );

    /// <remarks/>
    [System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Design", "CA1003:UseGenericEventHandlerInstances" )]
    public delegate void GetReportLinkCompletedEventHandler( object sender, GetReportLinkCompletedEventArgs e );

    /// <remarks/>
    public partial class GetReportLinkCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetReportLinkCompletedEventArgs( object[] results, System.Exception exception, bool cancelled, object userState )
            :
                base( exception, cancelled, userState )
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ( (string)( this.results[ 0 ] ) );
            }
        }
    }

    /// <remarks/>
    [System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Design", "CA1003:UseGenericEventHandlerInstances" )]
    public delegate void SetReportLinkCompletedEventHandler( object sender, System.ComponentModel.AsyncCompletedEventArgs e );

    /// <remarks/>
    [System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Design", "CA1003:UseGenericEventHandlerInstances" )]
    public delegate void GetRenderResourceCompletedEventHandler( object sender, GetRenderResourceCompletedEventArgs e );

    /// <remarks/>
    public partial class GetRenderResourceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetRenderResourceCompletedEventArgs( object[] results, System.Exception exception, bool cancelled, object userState )
            :
                base( exception, cancelled, userState )
        {
            this.results = results;
        }

        /// <remarks/>
        [System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Performance", "CA1819:PropertiesShouldNotReturnArrays" )]
        public byte[] Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ( (byte[])( this.results[ 0 ] ) );
            }
        }

        /// <remarks/>
        public string MimeType
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ( (string)( this.results[ 1 ] ) );
            }
        }
    }

    /// <remarks/>
    [System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Design", "CA1003:UseGenericEventHandlerInstances" )]
    public delegate void SetExecutionOptionsCompletedEventHandler( object sender, System.ComponentModel.AsyncCompletedEventArgs e );

    /// <remarks/>
    [System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Design", "CA1003:UseGenericEventHandlerInstances" )]
    public delegate void GetExecutionOptionsCompletedEventHandler( object sender, GetExecutionOptionsCompletedEventArgs e );

    /// <remarks/>
    public partial class GetExecutionOptionsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetExecutionOptionsCompletedEventArgs( object[] results, System.Exception exception, bool cancelled, object userState )
            :
                base( exception, cancelled, userState )
        {
            this.results = results;
        }

        /// <remarks/>
        public ExecutionSettingEnum Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ( (ExecutionSettingEnum)( this.results[ 0 ] ) );
            }
        }

        /// <remarks/>
        public ScheduleDefinitionOrReference Item
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ( (ScheduleDefinitionOrReference)( this.results[ 1 ] ) );
            }
        }
    }

    /// <remarks/>
    [System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Design", "CA1003:UseGenericEventHandlerInstances" )]
    public delegate void SetCacheOptionsCompletedEventHandler( object sender, System.ComponentModel.AsyncCompletedEventArgs e );

    /// <remarks/>
    [System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Design", "CA1003:UseGenericEventHandlerInstances" )]
    public delegate void GetCacheOptionsCompletedEventHandler( object sender, GetCacheOptionsCompletedEventArgs e );

    /// <remarks/>
    public partial class GetCacheOptionsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetCacheOptionsCompletedEventArgs( object[] results, System.Exception exception, bool cancelled, object userState )
            :
                base( exception, cancelled, userState )
        {
            this.results = results;
        }

        /// <remarks/>
        public bool Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ( (bool)( this.results[ 0 ] ) );
            }
        }

        /// <remarks/>
        public ExpirationDefinition Item
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ( (ExpirationDefinition)( this.results[ 1 ] ) );
            }
        }
    }

    /// <remarks/>
    [System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Design", "CA1003:UseGenericEventHandlerInstances" )]
    public delegate void UpdateReportExecutionSnapshotCompletedEventHandler( object sender, System.ComponentModel.AsyncCompletedEventArgs e );

    /// <remarks/>
    [System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Design", "CA1003:UseGenericEventHandlerInstances" )]
    public delegate void FlushCacheCompletedEventHandler( object sender, System.ComponentModel.AsyncCompletedEventArgs e );

    /// <remarks/>
    [System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Design", "CA1003:UseGenericEventHandlerInstances" )]
    public delegate void ListJobsCompletedEventHandler( object sender, ListJobsCompletedEventArgs e );

    /// <remarks/>
    public partial class ListJobsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal ListJobsCompletedEventArgs( object[] results, System.Exception exception, bool cancelled, object userState )
            :
                base( exception, cancelled, userState )
        {
            this.results = results;
        }

        /// <remarks/>
        [System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Performance", "CA1819:PropertiesShouldNotReturnArrays" )]
        public Job[] Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ( (Job[])( this.results[ 0 ] ) );
            }
        }
    }

    /// <remarks/>
    [System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Design", "CA1003:UseGenericEventHandlerInstances" )]
    public delegate void CancelJobCompletedEventHandler( object sender, CancelJobCompletedEventArgs e );

    /// <remarks/>
    public partial class CancelJobCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal CancelJobCompletedEventArgs( object[] results, System.Exception exception, bool cancelled, object userState )
            :
                base( exception, cancelled, userState )
        {
            this.results = results;
        }

        /// <remarks/>
        public bool Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ( (bool)( this.results[ 0 ] ) );
            }
        }
    }

    /// <remarks/>
    [System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Design", "CA1003:UseGenericEventHandlerInstances" )]
    public delegate void CreateDataSourceCompletedEventHandler( object sender, System.ComponentModel.AsyncCompletedEventArgs e );

    /// <remarks/>
    [System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Design", "CA1003:UseGenericEventHandlerInstances" )]
    public delegate void GetDataSourceContentsCompletedEventHandler( object sender, GetDataSourceContentsCompletedEventArgs e );

    /// <remarks/>
    public partial class GetDataSourceContentsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetDataSourceContentsCompletedEventArgs( object[] results, System.Exception exception, bool cancelled, object userState )
            :
                base( exception, cancelled, userState )
        {
            this.results = results;
        }

        /// <remarks/>
        public DataSourceDefinition Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ( (DataSourceDefinition)( this.results[ 0 ] ) );
            }
        }
    }

    /// <remarks/>
    [System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Design", "CA1003:UseGenericEventHandlerInstances" )]
    public delegate void SetDataSourceContentsCompletedEventHandler( object sender, System.ComponentModel.AsyncCompletedEventArgs e );

    /// <remarks/>
    [System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Design", "CA1003:UseGenericEventHandlerInstances" )]
    public delegate void EnableDataSourceCompletedEventHandler( object sender, System.ComponentModel.AsyncCompletedEventArgs e );

    /// <remarks/>
    [System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Design", "CA1003:UseGenericEventHandlerInstances" )]
    public delegate void DisableDataSourceCompletedEventHandler( object sender, System.ComponentModel.AsyncCompletedEventArgs e );

    /// <remarks/>
    [System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Design", "CA1003:UseGenericEventHandlerInstances" )]
    public delegate void SetItemDataSourcesCompletedEventHandler( object sender, System.ComponentModel.AsyncCompletedEventArgs e );

    /// <remarks/>
    [System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Design", "CA1003:UseGenericEventHandlerInstances" )]
    public delegate void GetItemDataSourcesCompletedEventHandler( object sender, GetItemDataSourcesCompletedEventArgs e );

    /// <remarks/>
    public partial class GetItemDataSourcesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetItemDataSourcesCompletedEventArgs( object[] results, System.Exception exception, bool cancelled, object userState )
            :
                base( exception, cancelled, userState )
        {
            this.results = results;
        }

        /// <remarks/>
        [System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Performance", "CA1819:PropertiesShouldNotReturnArrays" )]
        public DataSource[] Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ( (DataSource[])( this.results[ 0 ] ) );
            }
        }
    }

    /// <remarks/>
    [System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Design", "CA1003:UseGenericEventHandlerInstances" )]
    public delegate void GetItemDataSourcePromptsCompletedEventHandler( object sender, GetItemDataSourcePromptsCompletedEventArgs e );

    /// <remarks/>
    public partial class GetItemDataSourcePromptsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetItemDataSourcePromptsCompletedEventArgs( object[] results, System.Exception exception, bool cancelled, object userState )
            :
                base( exception, cancelled, userState )
        {
            this.results = results;
        }

        /// <remarks/>
        [System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Performance", "CA1819:PropertiesShouldNotReturnArrays" )]
        public DataSourcePrompt[] Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ( (DataSourcePrompt[])( this.results[ 0 ] ) );
            }
        }
    }

    /// <remarks/>
    [System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Design", "CA1003:UseGenericEventHandlerInstances" )]
    public delegate void CreateReportHistorySnapshotCompletedEventHandler( object sender, CreateReportHistorySnapshotCompletedEventArgs e );

    /// <remarks/>
    public partial class CreateReportHistorySnapshotCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal CreateReportHistorySnapshotCompletedEventArgs( object[] results, System.Exception exception, bool cancelled, object userState )
            :
                base( exception, cancelled, userState )
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ( (string)( this.results[ 0 ] ) );
            }
        }

        /// <remarks/>
        [System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Performance", "CA1819:PropertiesShouldNotReturnArrays" )]
        public Warning[] Warnings
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ( (Warning[])( this.results[ 1 ] ) );
            }
        }
    }

    /// <remarks/>
    [System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Design", "CA1003:UseGenericEventHandlerInstances" )]
    public delegate void SetReportHistoryOptionsCompletedEventHandler( object sender, System.ComponentModel.AsyncCompletedEventArgs e );

    /// <remarks/>
    [System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Design", "CA1003:UseGenericEventHandlerInstances" )]
    public delegate void GetReportHistoryOptionsCompletedEventHandler( object sender, GetReportHistoryOptionsCompletedEventArgs e );

    /// <remarks/>
    public partial class GetReportHistoryOptionsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetReportHistoryOptionsCompletedEventArgs( object[] results, System.Exception exception, bool cancelled, object userState )
            :
                base( exception, cancelled, userState )
        {
            this.results = results;
        }

        /// <remarks/>
        public bool Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ( (bool)( this.results[ 0 ] ) );
            }
        }

        /// <remarks/>
        public bool KeepExecutionSnapshots
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ( (bool)( this.results[ 1 ] ) );
            }
        }

        /// <remarks/>
        public ScheduleDefinitionOrReference Item
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ( (ScheduleDefinitionOrReference)( this.results[ 2 ] ) );
            }
        }
    }

    /// <remarks/>
    [System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Design", "CA1003:UseGenericEventHandlerInstances" )]
    public delegate void SetReportHistoryLimitCompletedEventHandler( object sender, System.ComponentModel.AsyncCompletedEventArgs e );

    /// <remarks/>
    [System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Design", "CA1003:UseGenericEventHandlerInstances" )]
    public delegate void GetReportHistoryLimitCompletedEventHandler( object sender, GetReportHistoryLimitCompletedEventArgs e );

    /// <remarks/>
    public partial class GetReportHistoryLimitCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetReportHistoryLimitCompletedEventArgs( object[] results, System.Exception exception, bool cancelled, object userState )
            :
                base( exception, cancelled, userState )
        {
            this.results = results;
        }

        /// <remarks/>
        public int Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ( (int)( this.results[ 0 ] ) );
            }
        }

        /// <remarks/>
        public bool IsSystem
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ( (bool)( this.results[ 1 ] ) );
            }
        }

        /// <remarks/>
        public int SystemLimit
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ( (int)( this.results[ 2 ] ) );
            }
        }
    }

    /// <remarks/>
    [System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Design", "CA1003:UseGenericEventHandlerInstances" )]
    public delegate void ListReportHistoryCompletedEventHandler( object sender, ListReportHistoryCompletedEventArgs e );

    /// <remarks/>
    public partial class ListReportHistoryCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal ListReportHistoryCompletedEventArgs( object[] results, System.Exception exception, bool cancelled, object userState )
            :
                base( exception, cancelled, userState )
        {
            this.results = results;
        }

        /// <remarks/>
        [System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Performance", "CA1819:PropertiesShouldNotReturnArrays" )]
        public ReportHistorySnapshot[] Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ( (ReportHistorySnapshot[])( this.results[ 0 ] ) );
            }
        }
    }

    /// <remarks/>
    [System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Design", "CA1003:UseGenericEventHandlerInstances" )]
    public delegate void DeleteReportHistorySnapshotCompletedEventHandler( object sender, System.ComponentModel.AsyncCompletedEventArgs e );

    /// <remarks/>
    [System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Design", "CA1003:UseGenericEventHandlerInstances" )]
    public delegate void FindItemsCompletedEventHandler( object sender, FindItemsCompletedEventArgs e );

    /// <remarks/>
    public partial class FindItemsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal FindItemsCompletedEventArgs( object[] results, System.Exception exception, bool cancelled, object userState )
            :
                base( exception, cancelled, userState )
        {
            this.results = results;
        }

        /// <remarks/>
        [System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Performance", "CA1819:PropertiesShouldNotReturnArrays" )]
        public CatalogItem[] Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ( (CatalogItem[])( this.results[ 0 ] ) );
            }
        }
    }

    /// <remarks/>
    [System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Design", "CA1003:UseGenericEventHandlerInstances" )]
    public delegate void CreateScheduleCompletedEventHandler( object sender, CreateScheduleCompletedEventArgs e );

    /// <remarks/>
    public partial class CreateScheduleCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal CreateScheduleCompletedEventArgs( object[] results, System.Exception exception, bool cancelled, object userState )
            :
                base( exception, cancelled, userState )
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ( (string)( this.results[ 0 ] ) );
            }
        }
    }

    /// <remarks/>
    [System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Design", "CA1003:UseGenericEventHandlerInstances" )]
    public delegate void DeleteScheduleCompletedEventHandler( object sender, System.ComponentModel.AsyncCompletedEventArgs e );

    /// <remarks/>
    [System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Design", "CA1003:UseGenericEventHandlerInstances" )]
    public delegate void SetSchedulePropertiesCompletedEventHandler( object sender, System.ComponentModel.AsyncCompletedEventArgs e );

    /// <remarks/>
    [System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Design", "CA1003:UseGenericEventHandlerInstances" )]
    public delegate void GetSchedulePropertiesCompletedEventHandler( object sender, GetSchedulePropertiesCompletedEventArgs e );

    /// <remarks/>
    public partial class GetSchedulePropertiesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetSchedulePropertiesCompletedEventArgs( object[] results, System.Exception exception, bool cancelled, object userState )
            :
                base( exception, cancelled, userState )
        {
            this.results = results;
        }

        /// <remarks/>
        public Schedule Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ( (Schedule)( this.results[ 0 ] ) );
            }
        }
    }

    /// <remarks/>
    [System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Design", "CA1003:UseGenericEventHandlerInstances" )]
    public delegate void ListScheduledReportsCompletedEventHandler( object sender, ListScheduledReportsCompletedEventArgs e );

    /// <remarks/>
    public partial class ListScheduledReportsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal ListScheduledReportsCompletedEventArgs( object[] results, System.Exception exception, bool cancelled, object userState )
            :
                base( exception, cancelled, userState )
        {
            this.results = results;
        }

        /// <remarks/>
        [System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Performance", "CA1819:PropertiesShouldNotReturnArrays" )]
        public CatalogItem[] Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ( (CatalogItem[])( this.results[ 0 ] ) );
            }
        }
    }

    /// <remarks/>
    [System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Design", "CA1003:UseGenericEventHandlerInstances" )]
    public delegate void ListSchedulesCompletedEventHandler( object sender, ListSchedulesCompletedEventArgs e );

    /// <remarks/>
    public partial class ListSchedulesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal ListSchedulesCompletedEventArgs( object[] results, System.Exception exception, bool cancelled, object userState )
            :
                base( exception, cancelled, userState )
        {
            this.results = results;
        }

        /// <remarks/>
        [System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Performance", "CA1819:PropertiesShouldNotReturnArrays" )]
        public Schedule[] Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ( (Schedule[])( this.results[ 0 ] ) );
            }
        }
    }

    /// <remarks/>
    [System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Design", "CA1003:UseGenericEventHandlerInstances" )]
    public delegate void PauseScheduleCompletedEventHandler( object sender, System.ComponentModel.AsyncCompletedEventArgs e );

    /// <remarks/>
    [System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Design", "CA1003:UseGenericEventHandlerInstances" )]
    public delegate void ResumeScheduleCompletedEventHandler( object sender, System.ComponentModel.AsyncCompletedEventArgs e );

    /// <remarks/>
    [System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Design", "CA1003:UseGenericEventHandlerInstances" )]
    public delegate void CreateSubscriptionCompletedEventHandler( object sender, CreateSubscriptionCompletedEventArgs e );

    /// <remarks/>
    public partial class CreateSubscriptionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal CreateSubscriptionCompletedEventArgs( object[] results, System.Exception exception, bool cancelled, object userState )
            :
                base( exception, cancelled, userState )
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ( (string)( this.results[ 0 ] ) );
            }
        }
    }

    /// <remarks/>
    [System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Design", "CA1003:UseGenericEventHandlerInstances" )]
    public delegate void CreateDataDrivenSubscriptionCompletedEventHandler( object sender, CreateDataDrivenSubscriptionCompletedEventArgs e );

    /// <remarks/>
    public partial class CreateDataDrivenSubscriptionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal CreateDataDrivenSubscriptionCompletedEventArgs( object[] results, System.Exception exception, bool cancelled, object userState )
            :
                base( exception, cancelled, userState )
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ( (string)( this.results[ 0 ] ) );
            }
        }
    }

    /// <remarks/>
    [System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Design", "CA1003:UseGenericEventHandlerInstances" )]
    public delegate void SetSubscriptionPropertiesCompletedEventHandler( object sender, System.ComponentModel.AsyncCompletedEventArgs e );

    /// <remarks/>
    [System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Design", "CA1003:UseGenericEventHandlerInstances" )]
    public delegate void SetDataDrivenSubscriptionPropertiesCompletedEventHandler( object sender, System.ComponentModel.AsyncCompletedEventArgs e );

    /// <remarks/>
    [System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Design", "CA1003:UseGenericEventHandlerInstances" )]
    public delegate void GetSubscriptionPropertiesCompletedEventHandler( object sender, GetSubscriptionPropertiesCompletedEventArgs e );

    /// <remarks/>
    public partial class GetSubscriptionPropertiesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetSubscriptionPropertiesCompletedEventArgs( object[] results, System.Exception exception, bool cancelled, object userState )
            :
                base( exception, cancelled, userState )
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ( (string)( this.results[ 0 ] ) );
            }
        }

        /// <remarks/>
        public ExtensionSettings ExtensionSettings
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ( (ExtensionSettings)( this.results[ 1 ] ) );
            }
        }

        /// <remarks/>
        public string Description
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ( (string)( this.results[ 2 ] ) );
            }
        }

        /// <remarks/>
        public ActiveState Active
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ( (ActiveState)( this.results[ 3 ] ) );
            }
        }

        /// <remarks/>
        public string Status
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ( (string)( this.results[ 4 ] ) );
            }
        }

        /// <remarks/>
        public string EventType
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ( (string)( this.results[ 5 ] ) );
            }
        }

        /// <remarks/>
        public string MatchData
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ( (string)( this.results[ 6 ] ) );
            }
        }

        /// <remarks/>
        [System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Performance", "CA1819:PropertiesShouldNotReturnArrays" )]
        public ParameterValue[] Parameters
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ( (ParameterValue[])( this.results[ 7 ] ) );
            }
        }
    }

    /// <remarks/>
    [System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Design", "CA1003:UseGenericEventHandlerInstances" )]
    public delegate void GetDataDrivenSubscriptionPropertiesCompletedEventHandler( object sender, GetDataDrivenSubscriptionPropertiesCompletedEventArgs e );

    /// <remarks/>
    public partial class GetDataDrivenSubscriptionPropertiesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetDataDrivenSubscriptionPropertiesCompletedEventArgs( object[] results, System.Exception exception, bool cancelled, object userState )
            :
                base( exception, cancelled, userState )
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ( (string)( this.results[ 0 ] ) );
            }
        }

        /// <remarks/>
        public ExtensionSettings ExtensionSettings
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ( (ExtensionSettings)( this.results[ 1 ] ) );
            }
        }

        /// <remarks/>
        public DataRetrievalPlan DataRetrievalPlan
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ( (DataRetrievalPlan)( this.results[ 2 ] ) );
            }
        }

        /// <remarks/>
        public string Description
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ( (string)( this.results[ 3 ] ) );
            }
        }

        /// <remarks/>
        public ActiveState Active
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ( (ActiveState)( this.results[ 4 ] ) );
            }
        }

        /// <remarks/>
        public string Status
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ( (string)( this.results[ 5 ] ) );
            }
        }

        /// <remarks/>
        public string EventType
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ( (string)( this.results[ 6 ] ) );
            }
        }

        /// <remarks/>
        public string MatchData
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ( (string)( this.results[ 7 ] ) );
            }
        }

        /// <remarks/>
        [System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Performance", "CA1819:PropertiesShouldNotReturnArrays" )]
        public ParameterValueOrFieldReference[] Parameters
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ( (ParameterValueOrFieldReference[])( this.results[ 8 ] ) );
            }
        }
    }

    /// <remarks/>
    [System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Design", "CA1003:UseGenericEventHandlerInstances" )]
    public delegate void DeleteSubscriptionCompletedEventHandler( object sender, System.ComponentModel.AsyncCompletedEventArgs e );

    /// <remarks/>
    [System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Design", "CA1003:UseGenericEventHandlerInstances" )]
    public delegate void PrepareQueryCompletedEventHandler( object sender, PrepareQueryCompletedEventArgs e );

    /// <remarks/>
    public partial class PrepareQueryCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal PrepareQueryCompletedEventArgs( object[] results, System.Exception exception, bool cancelled, object userState )
            :
                base( exception, cancelled, userState )
        {
            this.results = results;
        }

        /// <remarks/>
        public DataSetDefinition Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ( (DataSetDefinition)( this.results[ 0 ] ) );
            }
        }

        /// <remarks/>
        public bool Changed
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ( (bool)( this.results[ 1 ] ) );
            }
        }

        /// <remarks/>
        [System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Performance", "CA1819:PropertiesShouldNotReturnArrays" )]
        public string[] ParameterNames
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ( (string[])( this.results[ 2 ] ) );
            }
        }
    }

    /// <remarks/>
    [System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Design", "CA1003:UseGenericEventHandlerInstances" )]
    public delegate void GetExtensionSettingsCompletedEventHandler( object sender, GetExtensionSettingsCompletedEventArgs e );

    /// <remarks/>
    public partial class GetExtensionSettingsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetExtensionSettingsCompletedEventArgs( object[] results, System.Exception exception, bool cancelled, object userState )
            :
                base( exception, cancelled, userState )
        {
            this.results = results;
        }

        /// <remarks/>
        [System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Performance", "CA1819:PropertiesShouldNotReturnArrays" )]
        public ExtensionParameter[] Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ( (ExtensionParameter[])( this.results[ 0 ] ) );
            }
        }
    }

    /// <remarks/>
    [System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Design", "CA1003:UseGenericEventHandlerInstances" )]
    public delegate void ValidateExtensionSettingsCompletedEventHandler( object sender, ValidateExtensionSettingsCompletedEventArgs e );

    /// <remarks/>
    public partial class ValidateExtensionSettingsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal ValidateExtensionSettingsCompletedEventArgs( object[] results, System.Exception exception, bool cancelled, object userState )
            :
                base( exception, cancelled, userState )
        {
            this.results = results;
        }

        /// <remarks/>
        [System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Performance", "CA1819:PropertiesShouldNotReturnArrays" )]
        public ExtensionParameter[] Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ( (ExtensionParameter[])( this.results[ 0 ] ) );
            }
        }
    }

    /// <remarks/>
    [System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Design", "CA1003:UseGenericEventHandlerInstances" )]
    public delegate void ListSubscriptionsCompletedEventHandler( object sender, ListSubscriptionsCompletedEventArgs e );

    /// <remarks/>
    public partial class ListSubscriptionsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal ListSubscriptionsCompletedEventArgs( object[] results, System.Exception exception, bool cancelled, object userState )
            :
                base( exception, cancelled, userState )
        {
            this.results = results;
        }

        /// <remarks/>
        [System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Performance", "CA1819:PropertiesShouldNotReturnArrays" )]
        public Subscription[] Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ( (Subscription[])( this.results[ 0 ] ) );
            }
        }
    }

    /// <remarks/>
    [System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Design", "CA1003:UseGenericEventHandlerInstances" )]
    public delegate void ListSubscriptionsUsingDataSourceCompletedEventHandler( object sender, ListSubscriptionsUsingDataSourceCompletedEventArgs e );

    /// <remarks/>
    public partial class ListSubscriptionsUsingDataSourceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal ListSubscriptionsUsingDataSourceCompletedEventArgs( object[] results, System.Exception exception, bool cancelled, object userState )
            :
                base( exception, cancelled, userState )
        {
            this.results = results;
        }

        /// <remarks/>
        [System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Performance", "CA1819:PropertiesShouldNotReturnArrays" )]
        public Subscription[] Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ( (Subscription[])( this.results[ 0 ] ) );
            }
        }
    }

    /// <remarks/>
    [System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Design", "CA1003:UseGenericEventHandlerInstances" )]
    public delegate void ListExtensionsCompletedEventHandler( object sender, ListExtensionsCompletedEventArgs e );

    /// <remarks/>
    public partial class ListExtensionsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal ListExtensionsCompletedEventArgs( object[] results, System.Exception exception, bool cancelled, object userState )
            :
                base( exception, cancelled, userState )
        {
            this.results = results;
        }

        /// <remarks/>
        [System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Performance", "CA1819:PropertiesShouldNotReturnArrays" )]
        public Extension[] Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ( (Extension[])( this.results[ 0 ] ) );
            }
        }
    }

    /// <remarks/>
    [System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Design", "CA1003:UseGenericEventHandlerInstances" )]
    public delegate void ListEventsCompletedEventHandler( object sender, ListEventsCompletedEventArgs e );

    /// <remarks/>
    public partial class ListEventsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal ListEventsCompletedEventArgs( object[] results, System.Exception exception, bool cancelled, object userState )
            :
                base( exception, cancelled, userState )
        {
            this.results = results;
        }

        /// <remarks/>
        [System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Performance", "CA1819:PropertiesShouldNotReturnArrays" )]
        public Event[] Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ( (Event[])( this.results[ 0 ] ) );
            }
        }
    }

    /// <remarks/>
    [System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Design", "CA1003:UseGenericEventHandlerInstances" )]
    public delegate void FireEventCompletedEventHandler( object sender, System.ComponentModel.AsyncCompletedEventArgs e );

    /// <remarks/>
    [System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Design", "CA1003:UseGenericEventHandlerInstances" )]
    public delegate void ListTasksCompletedEventHandler( object sender, ListTasksCompletedEventArgs e );

    /// <remarks/>
    public partial class ListTasksCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal ListTasksCompletedEventArgs( object[] results, System.Exception exception, bool cancelled, object userState )
            :
                base( exception, cancelled, userState )
        {
            this.results = results;
        }

        /// <remarks/>
        [System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Performance", "CA1819:PropertiesShouldNotReturnArrays" )]
        public Task[] Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ( (Task[])( this.results[ 0 ] ) );
            }
        }
    }

    /// <remarks/>
    [System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Design", "CA1003:UseGenericEventHandlerInstances" )]
    public delegate void ListRolesCompletedEventHandler( object sender, ListRolesCompletedEventArgs e );

    /// <remarks/>
    public partial class ListRolesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal ListRolesCompletedEventArgs( object[] results, System.Exception exception, bool cancelled, object userState )
            :
                base( exception, cancelled, userState )
        {
            this.results = results;
        }

        /// <remarks/>
        [System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Performance", "CA1819:PropertiesShouldNotReturnArrays" )]
        public Role[] Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ( (Role[])( this.results[ 0 ] ) );
            }
        }
    }

    /// <remarks/>
    [System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Design", "CA1003:UseGenericEventHandlerInstances" )]
    public delegate void CreateRoleCompletedEventHandler( object sender, System.ComponentModel.AsyncCompletedEventArgs e );

    /// <remarks/>
    [System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Design", "CA1003:UseGenericEventHandlerInstances" )]
    public delegate void DeleteRoleCompletedEventHandler( object sender, System.ComponentModel.AsyncCompletedEventArgs e );

    /// <remarks/>
    [System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Design", "CA1003:UseGenericEventHandlerInstances" )]
    public delegate void GetRolePropertiesCompletedEventHandler( object sender, GetRolePropertiesCompletedEventArgs e );

    /// <remarks/>
    public partial class GetRolePropertiesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetRolePropertiesCompletedEventArgs( object[] results, System.Exception exception, bool cancelled, object userState )
            :
                base( exception, cancelled, userState )
        {
            this.results = results;
        }

        /// <remarks/>
        [System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Performance", "CA1819:PropertiesShouldNotReturnArrays" )]
        public Task[] Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ( (Task[])( this.results[ 0 ] ) );
            }
        }

        /// <remarks/>
        public string Description
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ( (string)( this.results[ 1 ] ) );
            }
        }
    }

    /// <remarks/>
    [System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Design", "CA1003:UseGenericEventHandlerInstances" )]
    public delegate void SetRolePropertiesCompletedEventHandler( object sender, System.ComponentModel.AsyncCompletedEventArgs e );

    /// <remarks/>
    [System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Design", "CA1003:UseGenericEventHandlerInstances" )]
    public delegate void GetSystemPoliciesCompletedEventHandler( object sender, GetSystemPoliciesCompletedEventArgs e );

    /// <remarks/>
    public partial class GetSystemPoliciesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetSystemPoliciesCompletedEventArgs( object[] results, System.Exception exception, bool cancelled, object userState )
            :
                base( exception, cancelled, userState )
        {
            this.results = results;
        }

        /// <remarks/>
        [System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Performance", "CA1819:PropertiesShouldNotReturnArrays" )]
        public Policy[] Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ( (Policy[])( this.results[ 0 ] ) );
            }
        }
    }

    /// <remarks/>
    [System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Design", "CA1003:UseGenericEventHandlerInstances" )]
    public delegate void SetSystemPoliciesCompletedEventHandler( object sender, System.ComponentModel.AsyncCompletedEventArgs e );

    /// <remarks/>
    [System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Design", "CA1003:UseGenericEventHandlerInstances" )]
    public delegate void GetPoliciesCompletedEventHandler( object sender, GetPoliciesCompletedEventArgs e );

    /// <remarks/>
    public partial class GetPoliciesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetPoliciesCompletedEventArgs( object[] results, System.Exception exception, bool cancelled, object userState )
            :
                base( exception, cancelled, userState )
        {
            this.results = results;
        }

        /// <remarks/>
        [System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Performance", "CA1819:PropertiesShouldNotReturnArrays" )]
        public Policy[] Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ( (Policy[])( this.results[ 0 ] ) );
            }
        }

        /// <remarks/>
        public bool InheritParent
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ( (bool)( this.results[ 1 ] ) );
            }
        }
    }

    /// <remarks/>
    [System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Design", "CA1003:UseGenericEventHandlerInstances" )]
    public delegate void SetPoliciesCompletedEventHandler( object sender, System.ComponentModel.AsyncCompletedEventArgs e );

    /// <remarks/>
    [System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Design", "CA1003:UseGenericEventHandlerInstances" )]
    public delegate void InheritParentSecurityCompletedEventHandler( object sender, System.ComponentModel.AsyncCompletedEventArgs e );

    /// <remarks/>
    [System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Design", "CA1003:UseGenericEventHandlerInstances" )]
    public delegate void GetSystemPermissionsCompletedEventHandler( object sender, GetSystemPermissionsCompletedEventArgs e );

    /// <remarks/>
    public partial class GetSystemPermissionsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetSystemPermissionsCompletedEventArgs( object[] results, System.Exception exception, bool cancelled, object userState )
            :
                base( exception, cancelled, userState )
        {
            this.results = results;
        }

        /// <remarks/>
        [System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Performance", "CA1819:PropertiesShouldNotReturnArrays" )]
        public string[] Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ( (string[])( this.results[ 0 ] ) );
            }
        }
    }

    /// <remarks/>
    [System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Design", "CA1003:UseGenericEventHandlerInstances" )]
    public delegate void GetPermissionsCompletedEventHandler( object sender, GetPermissionsCompletedEventArgs e );

    /// <remarks/>
    public partial class GetPermissionsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetPermissionsCompletedEventArgs( object[] results, System.Exception exception, bool cancelled, object userState )
            :
                base( exception, cancelled, userState )
        {
            this.results = results;
        }

        /// <remarks/>
        [System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Performance", "CA1819:PropertiesShouldNotReturnArrays" )]
        public string[] Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ( (string[])( this.results[ 0 ] ) );
            }
        }
    }

    /// <remarks/>
    [System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Design", "CA1003:UseGenericEventHandlerInstances" )]
    public delegate void LogonUserCompletedEventHandler( object sender, System.ComponentModel.AsyncCompletedEventArgs e );

    /// <remarks/>
    [System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Design", "CA1003:UseGenericEventHandlerInstances" )]
    public delegate void LogoffCompletedEventHandler( object sender, System.ComponentModel.AsyncCompletedEventArgs e );

    /// <remarks/>
    [System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Design", "CA1003:UseGenericEventHandlerInstances" )]
    public delegate void CreateModelCompletedEventHandler( object sender, CreateModelCompletedEventArgs e );

    /// <remarks/>
    public partial class CreateModelCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal CreateModelCompletedEventArgs( object[] results, System.Exception exception, bool cancelled, object userState )
            :
                base( exception, cancelled, userState )
        {
            this.results = results;
        }

        /// <remarks/>
        [System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Performance", "CA1819:PropertiesShouldNotReturnArrays" )]
        public Warning[] Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ( (Warning[])( this.results[ 0 ] ) );
            }
        }
    }

    /// <remarks/>
    [System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Design", "CA1003:UseGenericEventHandlerInstances" )]
    public delegate void GetModelDefinitionCompletedEventHandler( object sender, GetModelDefinitionCompletedEventArgs e );

    /// <remarks/>
    public partial class GetModelDefinitionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetModelDefinitionCompletedEventArgs( object[] results, System.Exception exception, bool cancelled, object userState )
            :
                base( exception, cancelled, userState )
        {
            this.results = results;
        }

        /// <remarks/>
        [System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Performance", "CA1819:PropertiesShouldNotReturnArrays" )]
        public byte[] Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ( (byte[])( this.results[ 0 ] ) );
            }
        }
    }

    /// <remarks/>
    [System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Design", "CA1003:UseGenericEventHandlerInstances" )]
    public delegate void SetModelDefinitionCompletedEventHandler( object sender, SetModelDefinitionCompletedEventArgs e );

    /// <remarks/>
    public partial class SetModelDefinitionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal SetModelDefinitionCompletedEventArgs( object[] results, System.Exception exception, bool cancelled, object userState )
            :
                base( exception, cancelled, userState )
        {
            this.results = results;
        }

        /// <remarks/>
        [System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Performance", "CA1819:PropertiesShouldNotReturnArrays" )]
        public Warning[] Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ( (Warning[])( this.results[ 0 ] ) );
            }
        }
    }

    /// <remarks/>
    [System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Design", "CA1003:UseGenericEventHandlerInstances" )]
    public delegate void ListModelPerspectivesCompletedEventHandler( object sender, ListModelPerspectivesCompletedEventArgs e );

    /// <remarks/>
    public partial class ListModelPerspectivesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal ListModelPerspectivesCompletedEventArgs( object[] results, System.Exception exception, bool cancelled, object userState )
            :
                base( exception, cancelled, userState )
        {
            this.results = results;
        }

        /// <remarks/>
        [System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Performance", "CA1819:PropertiesShouldNotReturnArrays" )]
        public ModelCatalogItem[] Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ( (ModelCatalogItem[])( this.results[ 0 ] ) );
            }
        }
    }

    /// <remarks/>
    [System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Design", "CA1003:UseGenericEventHandlerInstances" )]
    public delegate void GetUserModelCompletedEventHandler( object sender, GetUserModelCompletedEventArgs e );

    /// <remarks/>
    public partial class GetUserModelCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetUserModelCompletedEventArgs( object[] results, System.Exception exception, bool cancelled, object userState )
            :
                base( exception, cancelled, userState )
        {
            this.results = results;
        }

        /// <remarks/>
        [System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Performance", "CA1819:PropertiesShouldNotReturnArrays" )]
        public byte[] Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ( (byte[])( this.results[ 0 ] ) );
            }
        }
    }

    /// <remarks/>
    [System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Design", "CA1003:UseGenericEventHandlerInstances" )]
    public delegate void ListModelItemChildrenCompletedEventHandler( object sender, ListModelItemChildrenCompletedEventArgs e );

    /// <remarks/>
    public partial class ListModelItemChildrenCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal ListModelItemChildrenCompletedEventArgs( object[] results, System.Exception exception, bool cancelled, object userState )
            :
                base( exception, cancelled, userState )
        {
            this.results = results;
        }

        /// <remarks/>
        [System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Performance", "CA1819:PropertiesShouldNotReturnArrays" )]
        public ModelItem[] Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ( (ModelItem[])( this.results[ 0 ] ) );
            }
        }
    }

    /// <remarks/>
    [System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Design", "CA1003:UseGenericEventHandlerInstances" )]
    public delegate void GetModelItemPermissionsCompletedEventHandler( object sender, GetModelItemPermissionsCompletedEventArgs e );

    /// <remarks/>
    public partial class GetModelItemPermissionsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetModelItemPermissionsCompletedEventArgs( object[] results, System.Exception exception, bool cancelled, object userState )
            :
                base( exception, cancelled, userState )
        {
            this.results = results;
        }

        /// <remarks/>
        [System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Performance", "CA1819:PropertiesShouldNotReturnArrays" )]
        public string[] Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ( (string[])( this.results[ 0 ] ) );
            }
        }
    }

    /// <remarks/>
    [System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Design", "CA1003:UseGenericEventHandlerInstances" )]
    public delegate void GetModelItemPoliciesCompletedEventHandler( object sender, GetModelItemPoliciesCompletedEventArgs e );

    /// <remarks/>
    public partial class GetModelItemPoliciesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetModelItemPoliciesCompletedEventArgs( object[] results, System.Exception exception, bool cancelled, object userState )
            :
                base( exception, cancelled, userState )
        {
            this.results = results;
        }

        /// <remarks/>
        [System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Performance", "CA1819:PropertiesShouldNotReturnArrays" )]
        public Policy[] Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ( (Policy[])( this.results[ 0 ] ) );
            }
        }

        /// <remarks/>
        public bool InheritParent
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ( (bool)( this.results[ 1 ] ) );
            }
        }
    }

    /// <remarks/>
    [System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Design", "CA1003:UseGenericEventHandlerInstances" )]
    public delegate void SetModelItemPoliciesCompletedEventHandler( object sender, System.ComponentModel.AsyncCompletedEventArgs e );

    /// <remarks/>
    [System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Design", "CA1003:UseGenericEventHandlerInstances" )]
    public delegate void InheritModelItemParentSecurityCompletedEventHandler( object sender, System.ComponentModel.AsyncCompletedEventArgs e );

    /// <remarks/>
    [System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Design", "CA1003:UseGenericEventHandlerInstances" )]
    public delegate void RemoveAllModelItemPoliciesCompletedEventHandler( object sender, System.ComponentModel.AsyncCompletedEventArgs e );

    /// <remarks/>
    [System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Design", "CA1003:UseGenericEventHandlerInstances" )]
    public delegate void SetModelDrillthroughReportsCompletedEventHandler( object sender, System.ComponentModel.AsyncCompletedEventArgs e );

    /// <remarks/>
    [System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Design", "CA1003:UseGenericEventHandlerInstances" )]
    public delegate void ListModelDrillthroughReportsCompletedEventHandler( object sender, ListModelDrillthroughReportsCompletedEventArgs e );

    /// <remarks/>
    public partial class ListModelDrillthroughReportsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal ListModelDrillthroughReportsCompletedEventArgs( object[] results, System.Exception exception, bool cancelled, object userState )
            :
                base( exception, cancelled, userState )
        {
            this.results = results;
        }

        /// <remarks/>
        [System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Performance", "CA1819:PropertiesShouldNotReturnArrays" )]
        public ModelDrillthroughReport[] Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ( (ModelDrillthroughReport[])( this.results[ 0 ] ) );
            }
        }
    }

    /// <remarks/>
    [System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Design", "CA1003:UseGenericEventHandlerInstances" )]
    public delegate void GenerateModelCompletedEventHandler( object sender, GenerateModelCompletedEventArgs e );

    /// <remarks/>
    public partial class GenerateModelCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GenerateModelCompletedEventArgs( object[] results, System.Exception exception, bool cancelled, object userState )
            :
                base( exception, cancelled, userState )
        {
            this.results = results;
        }

        /// <remarks/>
        [System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Performance", "CA1819:PropertiesShouldNotReturnArrays" )]
        public Warning[] Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ( (Warning[])( this.results[ 0 ] ) );
            }
        }
    }

    /// <remarks/>
    [System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Design", "CA1003:UseGenericEventHandlerInstances" )]
    public delegate void RegenerateModelCompletedEventHandler( object sender, RegenerateModelCompletedEventArgs e );

    /// <remarks/>
    public partial class RegenerateModelCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal RegenerateModelCompletedEventArgs( object[] results, System.Exception exception, bool cancelled, object userState )
            :
                base( exception, cancelled, userState )
        {
            this.results = results;
        }

        /// <remarks/>
        [System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Performance", "CA1819:PropertiesShouldNotReturnArrays" )]
        public Warning[] Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ( (Warning[])( this.results[ 0 ] ) );
            }
        }
    }
}


namespace Microsoft.SqlServer.ReportingServices.ReportExecutionService
{
    using System.Diagnostics;
    using System.Web.Services;
    using System.ComponentModel;
    using System.Web.Services.Protocols;
    using System;
    using System.Xml.Serialization;


    /// <remarks/>
    [System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Naming", "CA1724:TypeNamesShouldNotMatchNamespaces" ), System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute( "code" )]
    [System.Web.Services.WebServiceBindingAttribute( Name = "ReportExecutionServiceSoap", Namespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices" )]
    [System.Xml.Serialization.XmlIncludeAttribute( typeof( ParameterValueOrFieldReference ) )]
    public partial class ReportExecutionService : System.Web.Services.Protocols.SoapHttpClientProtocol
    {

        private ServerInfoHeader serverInfoHeaderValueField;

        private System.Threading.SendOrPostCallback ListSecureMethodsOperationCompleted;

        private ExecutionHeader executionHeaderValueField;

        private System.Threading.SendOrPostCallback LoadReportOperationCompleted;

        private System.Threading.SendOrPostCallback LoadReportDefinitionOperationCompleted;

        private System.Threading.SendOrPostCallback SetExecutionCredentialsOperationCompleted;

        private System.Threading.SendOrPostCallback SetExecutionParametersOperationCompleted;

        private System.Threading.SendOrPostCallback ResetExecutionOperationCompleted;

        private System.Threading.SendOrPostCallback RenderOperationCompleted;

        private System.Threading.SendOrPostCallback RenderStreamOperationCompleted;

        private System.Threading.SendOrPostCallback GetExecutionInfoOperationCompleted;

        private System.Threading.SendOrPostCallback GetDocumentMapOperationCompleted;

        private System.Threading.SendOrPostCallback LoadDrillthroughTargetOperationCompleted;

        private System.Threading.SendOrPostCallback ToggleItemOperationCompleted;

        private System.Threading.SendOrPostCallback NavigateDocumentMapOperationCompleted;

        private System.Threading.SendOrPostCallback NavigateBookmarkOperationCompleted;

        private System.Threading.SendOrPostCallback FindStringOperationCompleted;

        private System.Threading.SendOrPostCallback SortOperationCompleted;

        private System.Threading.SendOrPostCallback GetRenderResourceOperationCompleted;

        private System.Threading.SendOrPostCallback ListRenderingExtensionsOperationCompleted;

        private System.Threading.SendOrPostCallback LogonUserOperationCompleted;

        private System.Threading.SendOrPostCallback LogoffOperationCompleted;

        private bool useDefaultCredentialsSetExplicitly;

        /// <remarks/>
        public ReportExecutionService()
        {
            if ( ( this.IsLocalFileSystemWebService( this.Url ) == true ) )
            {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else
            {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }

        public ServerInfoHeader ServerInfoHeaderValue
        {
            get
            {
                return this.serverInfoHeaderValueField;
            }
            set
            {
                this.serverInfoHeaderValueField = value;
            }
        }

        public ExecutionHeader ExecutionHeaderValue
        {
            get
            {
                return this.executionHeaderValueField;
            }
            set
            {
                this.executionHeaderValueField = value;
            }
        }

        [System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Design", "CA1056:UriPropertiesShouldNotBeStrings" )]
        public new string Url
        {
            get
            {
                return base.Url;
            }
            set
            {
                if ( ( ( ( this.IsLocalFileSystemWebService( base.Url ) == true )
                            && ( this.useDefaultCredentialsSetExplicitly == false ) )
                            && ( this.IsLocalFileSystemWebService( value ) == false ) ) )
                {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }

        public new bool UseDefaultCredentials
        {
            get
            {
                return base.UseDefaultCredentials;
            }
            set
            {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }

        /// <remarks/>
        public event ListSecureMethodsCompletedEventHandler ListSecureMethodsCompleted;

        /// <remarks/>
        public event LoadReportCompletedEventHandler LoadReportCompleted;

        /// <remarks/>
        public event LoadReportDefinitionCompletedEventHandler LoadReportDefinitionCompleted;

        /// <remarks/>
        public event SetExecutionCredentialsCompletedEventHandler SetExecutionCredentialsCompleted;

        /// <remarks/>
        public event SetExecutionParametersCompletedEventHandler SetExecutionParametersCompleted;

        /// <remarks/>
        public event ResetExecutionCompletedEventHandler ResetExecutionCompleted;

        /// <remarks/>
        public event RenderCompletedEventHandler RenderCompleted;

        /// <remarks/>
        public event RenderStreamCompletedEventHandler RenderStreamCompleted;

        /// <remarks/>
        public event GetExecutionInfoCompletedEventHandler GetExecutionInfoCompleted;

        /// <remarks/>
        public event GetDocumentMapCompletedEventHandler GetDocumentMapCompleted;

        /// <remarks/>
        public event LoadDrillthroughTargetCompletedEventHandler LoadDrillthroughTargetCompleted;

        /// <remarks/>
        public event ToggleItemCompletedEventHandler ToggleItemCompleted;

        /// <remarks/>
        public event NavigateDocumentMapCompletedEventHandler NavigateDocumentMapCompleted;

        /// <remarks/>
        public event NavigateBookmarkCompletedEventHandler NavigateBookmarkCompleted;

        /// <remarks/>
        public event FindStringCompletedEventHandler FindStringCompleted;

        /// <remarks/>
        public event SortCompletedEventHandler SortCompleted;

        /// <remarks/>
        public event GetRenderResourceCompletedEventHandler GetRenderResourceCompleted;

        /// <remarks/>
        public event ListRenderingExtensionsCompletedEventHandler ListRenderingExtensionsCompleted;

        /// <remarks/>
        public event LogonUserCompletedEventHandler LogonUserCompleted;

        /// <remarks/>
        public event LogoffCompletedEventHandler LogoffCompleted;

        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute( "ServerInfoHeaderValue", Direction = System.Web.Services.Protocols.SoapHeaderDirection.Out )]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute( "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices/Lis" +
            "tSecureMethods", RequestNamespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices", ResponseNamespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped )]
        public string[] ListSecureMethods()
        {
            object[] results = this.Invoke( "ListSecureMethods", new object[ 0 ] );
            return ( (string[])( results[ 0 ] ) );
        }

        /// <remarks/>
        public void ListSecureMethodsAsync()
        {
            this.ListSecureMethodsAsync( null );
        }

        /// <remarks/>
        public void ListSecureMethodsAsync( object userState )
        {
            if ( ( this.ListSecureMethodsOperationCompleted == null ) )
            {
                this.ListSecureMethodsOperationCompleted = new System.Threading.SendOrPostCallback( this.OnListSecureMethodsOperationCompleted );
            }
            this.InvokeAsync( "ListSecureMethods", new object[ 0 ], this.ListSecureMethodsOperationCompleted, userState );
        }

        private void OnListSecureMethodsOperationCompleted( object arg )
        {
            if ( ( this.ListSecureMethodsCompleted != null ) )
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ( (System.Web.Services.Protocols.InvokeCompletedEventArgs)( arg ) );
                this.ListSecureMethodsCompleted( this, new ListSecureMethodsCompletedEventArgs( invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState ) );
            }
        }

        /// <remarks/>
        [System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Naming", "CA1706:ShortAcronymsShouldBeUppercase", MessageId = "1#" ), System.Web.Services.Protocols.SoapHeaderAttribute( "ServerInfoHeaderValue", Direction = System.Web.Services.Protocols.SoapHeaderDirection.Out )]
        [System.Web.Services.Protocols.SoapHeaderAttribute( "ExecutionHeaderValue", Direction = System.Web.Services.Protocols.SoapHeaderDirection.Out )]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute( "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices/Loa" +
            "dReport", RequestNamespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices", ResponseNamespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped )]
        [return: System.Xml.Serialization.XmlElementAttribute( "executionInfo" )]
        public ExecutionInfo LoadReport( string Report, string HistoryID )
        {
            object[] results = this.Invoke( "LoadReport", new object[] {
                        Report,
                        HistoryID} );
            return ( (ExecutionInfo)( results[ 0 ] ) );
        }

        /// <remarks/>
        public void LoadReportAsync( string Report, string HistoryID )
        {
            this.LoadReportAsync( Report, HistoryID, null );
        }

        /// <remarks/>
        public void LoadReportAsync( string Report, string HistoryID, object userState )
        {
            if ( ( this.LoadReportOperationCompleted == null ) )
            {
                this.LoadReportOperationCompleted = new System.Threading.SendOrPostCallback( this.OnLoadReportOperationCompleted );
            }
            this.InvokeAsync( "LoadReport", new object[] {
                        Report,
                        HistoryID}, this.LoadReportOperationCompleted, userState );
        }

        private void OnLoadReportOperationCompleted( object arg )
        {
            if ( ( this.LoadReportCompleted != null ) )
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ( (System.Web.Services.Protocols.InvokeCompletedEventArgs)( arg ) );
                this.LoadReportCompleted( this, new LoadReportCompletedEventArgs( invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState ) );
            }
        }

        /// <remarks/>
        [System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Design", "CA1021:AvoidOutParameters", MessageId = "1#" ), System.Web.Services.Protocols.SoapHeaderAttribute( "ServerInfoHeaderValue", Direction = System.Web.Services.Protocols.SoapHeaderDirection.Out )]
        [System.Web.Services.Protocols.SoapHeaderAttribute( "ExecutionHeaderValue", Direction = System.Web.Services.Protocols.SoapHeaderDirection.Out )]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute( "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices/Loa" +
            "dReportDefinition", RequestNamespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices", ResponseNamespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped )]
        [return: System.Xml.Serialization.XmlElementAttribute( "executionInfo" )]
        public ExecutionInfo LoadReportDefinition( [System.Xml.Serialization.XmlElementAttribute( DataType = "base64Binary" )] byte[] Definition, out Warning[] warnings )
        {
            object[] results = this.Invoke( "LoadReportDefinition", new object[] {
                        Definition} );
            warnings = ( (Warning[])( results[ 1 ] ) );
            return ( (ExecutionInfo)( results[ 0 ] ) );
        }

        /// <remarks/>
        public void LoadReportDefinitionAsync( byte[] Definition )
        {
            this.LoadReportDefinitionAsync( Definition, null );
        }

        /// <remarks/>
        public void LoadReportDefinitionAsync( byte[] Definition, object userState )
        {
            if ( ( this.LoadReportDefinitionOperationCompleted == null ) )
            {
                this.LoadReportDefinitionOperationCompleted = new System.Threading.SendOrPostCallback( this.OnLoadReportDefinitionOperationCompleted );
            }
            this.InvokeAsync( "LoadReportDefinition", new object[] {
                        Definition}, this.LoadReportDefinitionOperationCompleted, userState );
        }

        private void OnLoadReportDefinitionOperationCompleted( object arg )
        {
            if ( ( this.LoadReportDefinitionCompleted != null ) )
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ( (System.Web.Services.Protocols.InvokeCompletedEventArgs)( arg ) );
                this.LoadReportDefinitionCompleted( this, new LoadReportDefinitionCompletedEventArgs( invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState ) );
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute( "ServerInfoHeaderValue", Direction = System.Web.Services.Protocols.SoapHeaderDirection.Out )]
        [System.Web.Services.Protocols.SoapHeaderAttribute( "ExecutionHeaderValue" )]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute( "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices/Set" +
            "ExecutionCredentials", RequestNamespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices", ResponseNamespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped )]
        [return: System.Xml.Serialization.XmlElementAttribute( "executionInfo" )]
        public ExecutionInfo SetExecutionCredentials( DataSourceCredentials[] Credentials )
        {
            object[] results = this.Invoke( "SetExecutionCredentials", new object[] {
                        Credentials} );
            return ( (ExecutionInfo)( results[ 0 ] ) );
        }

        /// <remarks/>
        public void SetExecutionCredentialsAsync( DataSourceCredentials[] Credentials )
        {
            this.SetExecutionCredentialsAsync( Credentials, null );
        }

        /// <remarks/>
        public void SetExecutionCredentialsAsync( DataSourceCredentials[] Credentials, object userState )
        {
            if ( ( this.SetExecutionCredentialsOperationCompleted == null ) )
            {
                this.SetExecutionCredentialsOperationCompleted = new System.Threading.SendOrPostCallback( this.OnSetExecutionCredentialsOperationCompleted );
            }
            this.InvokeAsync( "SetExecutionCredentials", new object[] {
                        Credentials}, this.SetExecutionCredentialsOperationCompleted, userState );
        }

        private void OnSetExecutionCredentialsOperationCompleted( object arg )
        {
            if ( ( this.SetExecutionCredentialsCompleted != null ) )
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ( (System.Web.Services.Protocols.InvokeCompletedEventArgs)( arg ) );
                this.SetExecutionCredentialsCompleted( this, new SetExecutionCredentialsCompletedEventArgs( invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState ) );
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute( "ServerInfoHeaderValue", Direction = System.Web.Services.Protocols.SoapHeaderDirection.Out )]
        [System.Web.Services.Protocols.SoapHeaderAttribute( "ExecutionHeaderValue" )]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute( "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices/Set" +
            "ExecutionParameters", RequestNamespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices", ResponseNamespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped )]
        [return: System.Xml.Serialization.XmlElementAttribute( "executionInfo" )]
        public ExecutionInfo SetExecutionParameters( ParameterValue[] Parameters, string ParameterLanguage )
        {
            object[] results = this.Invoke( "SetExecutionParameters", new object[] {
                        Parameters,
                        ParameterLanguage} );
            return ( (ExecutionInfo)( results[ 0 ] ) );
        }

        /// <remarks/>
        public void SetExecutionParametersAsync( ParameterValue[] Parameters, string ParameterLanguage )
        {
            this.SetExecutionParametersAsync( Parameters, ParameterLanguage, null );
        }

        /// <remarks/>
        public void SetExecutionParametersAsync( ParameterValue[] Parameters, string ParameterLanguage, object userState )
        {
            if ( ( this.SetExecutionParametersOperationCompleted == null ) )
            {
                this.SetExecutionParametersOperationCompleted = new System.Threading.SendOrPostCallback( this.OnSetExecutionParametersOperationCompleted );
            }
            this.InvokeAsync( "SetExecutionParameters", new object[] {
                        Parameters,
                        ParameterLanguage}, this.SetExecutionParametersOperationCompleted, userState );
        }

        private void OnSetExecutionParametersOperationCompleted( object arg )
        {
            if ( ( this.SetExecutionParametersCompleted != null ) )
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ( (System.Web.Services.Protocols.InvokeCompletedEventArgs)( arg ) );
                this.SetExecutionParametersCompleted( this, new SetExecutionParametersCompletedEventArgs( invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState ) );
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute( "ServerInfoHeaderValue", Direction = System.Web.Services.Protocols.SoapHeaderDirection.Out )]
        [System.Web.Services.Protocols.SoapHeaderAttribute( "ExecutionHeaderValue" )]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute( "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices/Res" +
            "etExecution", RequestNamespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices", ResponseNamespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped )]
        [return: System.Xml.Serialization.XmlElementAttribute( "executionInfo" )]
        public ExecutionInfo ResetExecution()
        {
            object[] results = this.Invoke( "ResetExecution", new object[ 0 ] );
            return ( (ExecutionInfo)( results[ 0 ] ) );
        }

        /// <remarks/>
        public void ResetExecutionAsync()
        {
            this.ResetExecutionAsync( null );
        }

        /// <remarks/>
        public void ResetExecutionAsync( object userState )
        {
            if ( ( this.ResetExecutionOperationCompleted == null ) )
            {
                this.ResetExecutionOperationCompleted = new System.Threading.SendOrPostCallback( this.OnResetExecutionOperationCompleted );
            }
            this.InvokeAsync( "ResetExecution", new object[ 0 ], this.ResetExecutionOperationCompleted, userState );
        }

        private void OnResetExecutionOperationCompleted( object arg )
        {
            if ( ( this.ResetExecutionCompleted != null ) )
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ( (System.Web.Services.Protocols.InvokeCompletedEventArgs)( arg ) );
                this.ResetExecutionCompleted( this, new ResetExecutionCompletedEventArgs( invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState ) );
            }
        }

        /// <remarks/>
        [System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Design", "CA1021:AvoidOutParameters", MessageId = "6#" ), System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Design", "CA1021:AvoidOutParameters", MessageId = "5#" ), System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Design", "CA1021:AvoidOutParameters", MessageId = "4#" ), System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Design", "CA1021:AvoidOutParameters", MessageId = "3#" ), System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Design", "CA1021:AvoidOutParameters", MessageId = "2#" ), System.Web.Services.Protocols.SoapHeaderAttribute( "ServerInfoHeaderValue", Direction = System.Web.Services.Protocols.SoapHeaderDirection.Out )]
        [System.Web.Services.Protocols.SoapHeaderAttribute( "ExecutionHeaderValue" )]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute( "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices/Ren" +
            "der", RequestNamespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices", ResponseNamespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped )]
        [return: System.Xml.Serialization.XmlElementAttribute( "Result", DataType = "base64Binary" )]
        public byte[] Render( string Format, string DeviceInfo, out string Extension, out string MimeType, out string Encoding, out Warning[] Warnings, out string[] StreamIds )
        {
            object[] results = this.Invoke( "Render", new object[] {
                        Format,
                        DeviceInfo} );
            Extension = ( (string)( results[ 1 ] ) );
            MimeType = ( (string)( results[ 2 ] ) );
            Encoding = ( (string)( results[ 3 ] ) );
            Warnings = ( (Warning[])( results[ 4 ] ) );
            StreamIds = ( (string[])( results[ 5 ] ) );
            return ( (byte[])( results[ 0 ] ) );
        }

        /// <remarks/>
        public void RenderAsync( string Format, string DeviceInfo )
        {
            this.RenderAsync( Format, DeviceInfo, null );
        }

        /// <remarks/>
        public void RenderAsync( string Format, string DeviceInfo, object userState )
        {
            if ( ( this.RenderOperationCompleted == null ) )
            {
                this.RenderOperationCompleted = new System.Threading.SendOrPostCallback( this.OnRenderOperationCompleted );
            }
            this.InvokeAsync( "Render", new object[] {
                        Format,
                        DeviceInfo}, this.RenderOperationCompleted, userState );
        }

        private void OnRenderOperationCompleted( object arg )
        {
            if ( ( this.RenderCompleted != null ) )
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ( (System.Web.Services.Protocols.InvokeCompletedEventArgs)( arg ) );
                this.RenderCompleted( this, new RenderCompletedEventArgs( invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState ) );
            }
        }

        /// <remarks/>
        [System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Naming", "CA1706:ShortAcronymsShouldBeUppercase", MessageId = "1#" ), System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Design", "CA1021:AvoidOutParameters", MessageId = "4#" ), System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Design", "CA1021:AvoidOutParameters", MessageId = "3#" ), System.Web.Services.Protocols.SoapHeaderAttribute( "ServerInfoHeaderValue", Direction = System.Web.Services.Protocols.SoapHeaderDirection.Out )]
        [System.Web.Services.Protocols.SoapHeaderAttribute( "ExecutionHeaderValue" )]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute( "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices/Ren" +
            "derStream", RequestNamespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices", ResponseNamespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped )]
        [return: System.Xml.Serialization.XmlElementAttribute( "Result", DataType = "base64Binary" )]
        public byte[] RenderStream( string Format, string StreamID, string DeviceInfo, out string Encoding, out string MimeType )
        {
            object[] results = this.Invoke( "RenderStream", new object[] {
                        Format,
                        StreamID,
                        DeviceInfo} );
            Encoding = ( (string)( results[ 1 ] ) );
            MimeType = ( (string)( results[ 2 ] ) );
            return ( (byte[])( results[ 0 ] ) );
        }

        /// <remarks/>
        public void RenderStreamAsync( string Format, string StreamID, string DeviceInfo )
        {
            this.RenderStreamAsync( Format, StreamID, DeviceInfo, null );
        }

        /// <remarks/>
        public void RenderStreamAsync( string Format, string StreamID, string DeviceInfo, object userState )
        {
            if ( ( this.RenderStreamOperationCompleted == null ) )
            {
                this.RenderStreamOperationCompleted = new System.Threading.SendOrPostCallback( this.OnRenderStreamOperationCompleted );
            }
            this.InvokeAsync( "RenderStream", new object[] {
                        Format,
                        StreamID,
                        DeviceInfo}, this.RenderStreamOperationCompleted, userState );
        }

        private void OnRenderStreamOperationCompleted( object arg )
        {
            if ( ( this.RenderStreamCompleted != null ) )
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ( (System.Web.Services.Protocols.InvokeCompletedEventArgs)( arg ) );
                this.RenderStreamCompleted( this, new RenderStreamCompletedEventArgs( invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState ) );
            }
        }

        /// <remarks/>
        [System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Design", "CA1024:UsePropertiesWhereAppropriate" ), System.Web.Services.Protocols.SoapHeaderAttribute( "ServerInfoHeaderValue", Direction = System.Web.Services.Protocols.SoapHeaderDirection.Out )]
        [System.Web.Services.Protocols.SoapHeaderAttribute( "ExecutionHeaderValue" )]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute( "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices/Get" +
            "ExecutionInfo", RequestNamespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices", ResponseNamespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped )]
        [return: System.Xml.Serialization.XmlElementAttribute( "executionInfo" )]
        public ExecutionInfo GetExecutionInfo()
        {
            object[] results = this.Invoke( "GetExecutionInfo", new object[ 0 ] );
            return ( (ExecutionInfo)( results[ 0 ] ) );
        }

        /// <remarks/>
        public void GetExecutionInfoAsync()
        {
            this.GetExecutionInfoAsync( null );
        }

        /// <remarks/>
        public void GetExecutionInfoAsync( object userState )
        {
            if ( ( this.GetExecutionInfoOperationCompleted == null ) )
            {
                this.GetExecutionInfoOperationCompleted = new System.Threading.SendOrPostCallback( this.OnGetExecutionInfoOperationCompleted );
            }
            this.InvokeAsync( "GetExecutionInfo", new object[ 0 ], this.GetExecutionInfoOperationCompleted, userState );
        }

        private void OnGetExecutionInfoOperationCompleted( object arg )
        {
            if ( ( this.GetExecutionInfoCompleted != null ) )
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ( (System.Web.Services.Protocols.InvokeCompletedEventArgs)( arg ) );
                this.GetExecutionInfoCompleted( this, new GetExecutionInfoCompletedEventArgs( invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState ) );
            }
        }

        /// <remarks/>
        [System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Design", "CA1024:UsePropertiesWhereAppropriate" ), System.Web.Services.Protocols.SoapHeaderAttribute( "ServerInfoHeaderValue", Direction = System.Web.Services.Protocols.SoapHeaderDirection.Out )]
        [System.Web.Services.Protocols.SoapHeaderAttribute( "ExecutionHeaderValue" )]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute( "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices/Get" +
            "DocumentMap", RequestNamespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices", ResponseNamespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped )]
        [return: System.Xml.Serialization.XmlElementAttribute( "result" )]
        public DocumentMapNode GetDocumentMap()
        {
            object[] results = this.Invoke( "GetDocumentMap", new object[ 0 ] );
            return ( (DocumentMapNode)( results[ 0 ] ) );
        }

        /// <remarks/>
        public void GetDocumentMapAsync()
        {
            this.GetDocumentMapAsync( null );
        }

        /// <remarks/>
        public void GetDocumentMapAsync( object userState )
        {
            if ( ( this.GetDocumentMapOperationCompleted == null ) )
            {
                this.GetDocumentMapOperationCompleted = new System.Threading.SendOrPostCallback( this.OnGetDocumentMapOperationCompleted );
            }
            this.InvokeAsync( "GetDocumentMap", new object[ 0 ], this.GetDocumentMapOperationCompleted, userState );
        }

        private void OnGetDocumentMapOperationCompleted( object arg )
        {
            if ( ( this.GetDocumentMapCompleted != null ) )
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ( (System.Web.Services.Protocols.InvokeCompletedEventArgs)( arg ) );
                this.GetDocumentMapCompleted( this, new GetDocumentMapCompletedEventArgs( invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState ) );
            }
        }

        /// <remarks/>
        [System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Naming", "CA1706:ShortAcronymsShouldBeUppercase", MessageId = "0#" ), System.Web.Services.Protocols.SoapHeaderAttribute( "ServerInfoHeaderValue", Direction = System.Web.Services.Protocols.SoapHeaderDirection.Out )]
        [System.Web.Services.Protocols.SoapHeaderAttribute( "ExecutionHeaderValue", Direction = System.Web.Services.Protocols.SoapHeaderDirection.InOut )]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute( "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices/Loa" +
            "dDrillthroughTarget", RequestNamespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices", ResponseNamespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped )]
        [return: System.Xml.Serialization.XmlElementAttribute( "ExecutionInfo" )]
        public ExecutionInfo LoadDrillthroughTarget( string DrillthroughID )
        {
            object[] results = this.Invoke( "LoadDrillthroughTarget", new object[] {
                        DrillthroughID} );
            return ( (ExecutionInfo)( results[ 0 ] ) );
        }

        /// <remarks/>
        [System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Naming", "CA1706:ShortAcronymsShouldBeUppercase", MessageId = "0#" )]
        public void LoadDrillthroughTargetAsync( string DrillthroughID )
        {
            this.LoadDrillthroughTargetAsync( DrillthroughID, null );
        }

        /// <remarks/>
        public void LoadDrillthroughTargetAsync( string DrillthroughID, object userState )
        {
            if ( ( this.LoadDrillthroughTargetOperationCompleted == null ) )
            {
                this.LoadDrillthroughTargetOperationCompleted = new System.Threading.SendOrPostCallback( this.OnLoadDrillthroughTargetOperationCompleted );
            }
            this.InvokeAsync( "LoadDrillthroughTarget", new object[] {
                        DrillthroughID}, this.LoadDrillthroughTargetOperationCompleted, userState );
        }

        private void OnLoadDrillthroughTargetOperationCompleted( object arg )
        {
            if ( ( this.LoadDrillthroughTargetCompleted != null ) )
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ( (System.Web.Services.Protocols.InvokeCompletedEventArgs)( arg ) );
                this.LoadDrillthroughTargetCompleted( this, new LoadDrillthroughTargetCompletedEventArgs( invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState ) );
            }
        }

        /// <remarks/>
        [System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Naming", "CA1706:ShortAcronymsShouldBeUppercase", MessageId = "0#" ), System.Web.Services.Protocols.SoapHeaderAttribute( "ServerInfoHeaderValue", Direction = System.Web.Services.Protocols.SoapHeaderDirection.Out )]
        [System.Web.Services.Protocols.SoapHeaderAttribute( "ExecutionHeaderValue" )]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute( "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices/Tog" +
            "gleItem", RequestNamespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices", ResponseNamespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped )]
        [return: System.Xml.Serialization.XmlElementAttribute( "Found" )]
        public bool ToggleItem( string ToggleID )
        {
            object[] results = this.Invoke( "ToggleItem", new object[] {
                        ToggleID} );
            return ( (bool)( results[ 0 ] ) );
        }

        /// <remarks/>
        [System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Naming", "CA1706:ShortAcronymsShouldBeUppercase", MessageId = "0#" )]
        public void ToggleItemAsync( string ToggleID )
        {
            this.ToggleItemAsync( ToggleID, null );
        }

        /// <remarks/>
        public void ToggleItemAsync( string ToggleID, object userState )
        {
            if ( ( this.ToggleItemOperationCompleted == null ) )
            {
                this.ToggleItemOperationCompleted = new System.Threading.SendOrPostCallback( this.OnToggleItemOperationCompleted );
            }
            this.InvokeAsync( "ToggleItem", new object[] {
                        ToggleID}, this.ToggleItemOperationCompleted, userState );
        }

        private void OnToggleItemOperationCompleted( object arg )
        {
            if ( ( this.ToggleItemCompleted != null ) )
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ( (System.Web.Services.Protocols.InvokeCompletedEventArgs)( arg ) );
                this.ToggleItemCompleted( this, new ToggleItemCompletedEventArgs( invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState ) );
            }
        }

        /// <remarks/>
        [System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Naming", "CA1706:ShortAcronymsShouldBeUppercase", MessageId = "0#" ), System.Web.Services.Protocols.SoapHeaderAttribute( "ServerInfoHeaderValue", Direction = System.Web.Services.Protocols.SoapHeaderDirection.Out )]
        [System.Web.Services.Protocols.SoapHeaderAttribute( "ExecutionHeaderValue" )]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute( "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices/Nav" +
            "igateDocumentMap", RequestNamespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices", ResponseNamespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped )]
        [return: System.Xml.Serialization.XmlElementAttribute( "PageNumber" )]
        public int NavigateDocumentMap( string DocMapID )
        {
            object[] results = this.Invoke( "NavigateDocumentMap", new object[] {
                        DocMapID} );
            return ( (int)( results[ 0 ] ) );
        }

        /// <remarks/>
        [System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Naming", "CA1706:ShortAcronymsShouldBeUppercase", MessageId = "0#" )]
        public void NavigateDocumentMapAsync( string DocMapID )
        {
            this.NavigateDocumentMapAsync( DocMapID, null );
        }

        /// <remarks/>
        public void NavigateDocumentMapAsync( string DocMapID, object userState )
        {
            if ( ( this.NavigateDocumentMapOperationCompleted == null ) )
            {
                this.NavigateDocumentMapOperationCompleted = new System.Threading.SendOrPostCallback( this.OnNavigateDocumentMapOperationCompleted );
            }
            this.InvokeAsync( "NavigateDocumentMap", new object[] {
                        DocMapID}, this.NavigateDocumentMapOperationCompleted, userState );
        }

        private void OnNavigateDocumentMapOperationCompleted( object arg )
        {
            if ( ( this.NavigateDocumentMapCompleted != null ) )
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ( (System.Web.Services.Protocols.InvokeCompletedEventArgs)( arg ) );
                this.NavigateDocumentMapCompleted( this, new NavigateDocumentMapCompletedEventArgs( invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState ) );
            }
        }

        /// <remarks/>
        [System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Naming", "CA1706:ShortAcronymsShouldBeUppercase", MessageId = "0#" ), System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Design", "CA1021:AvoidOutParameters", MessageId = "1#" ), System.Web.Services.Protocols.SoapHeaderAttribute( "ServerInfoHeaderValue", Direction = System.Web.Services.Protocols.SoapHeaderDirection.Out )]
        [System.Web.Services.Protocols.SoapHeaderAttribute( "ExecutionHeaderValue" )]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute( "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices/Nav" +
            "igateBookmark", RequestNamespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices", ResponseNamespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped )]
        [return: System.Xml.Serialization.XmlElementAttribute( "PageNumber" )]
        public int NavigateBookmark( string BookmarkID, out string UniqueName )
        {
            object[] results = this.Invoke( "NavigateBookmark", new object[] {
                        BookmarkID} );
            UniqueName = ( (string)( results[ 1 ] ) );
            return ( (int)( results[ 0 ] ) );
        }

        /// <remarks/>
        [System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Naming", "CA1706:ShortAcronymsShouldBeUppercase", MessageId = "0#" )]
        public void NavigateBookmarkAsync( string BookmarkID )
        {
            this.NavigateBookmarkAsync( BookmarkID, null );
        }

        /// <remarks/>
        public void NavigateBookmarkAsync( string BookmarkID, object userState )
        {
            if ( ( this.NavigateBookmarkOperationCompleted == null ) )
            {
                this.NavigateBookmarkOperationCompleted = new System.Threading.SendOrPostCallback( this.OnNavigateBookmarkOperationCompleted );
            }
            this.InvokeAsync( "NavigateBookmark", new object[] {
                        BookmarkID}, this.NavigateBookmarkOperationCompleted, userState );
        }

        private void OnNavigateBookmarkOperationCompleted( object arg )
        {
            if ( ( this.NavigateBookmarkCompleted != null ) )
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ( (System.Web.Services.Protocols.InvokeCompletedEventArgs)( arg ) );
                this.NavigateBookmarkCompleted( this, new NavigateBookmarkCompletedEventArgs( invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState ) );
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute( "ServerInfoHeaderValue", Direction = System.Web.Services.Protocols.SoapHeaderDirection.Out )]
        [System.Web.Services.Protocols.SoapHeaderAttribute( "ExecutionHeaderValue" )]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute( "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices/Fin" +
            "dString", RequestNamespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices", ResponseNamespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped )]
        [return: System.Xml.Serialization.XmlElementAttribute( "PageNumber" )]
        public int FindString( int StartPage, int EndPage, string FindValue )
        {
            object[] results = this.Invoke( "FindString", new object[] {
                        StartPage,
                        EndPage,
                        FindValue} );
            return ( (int)( results[ 0 ] ) );
        }

        /// <remarks/>
        public void FindStringAsync( int StartPage, int EndPage, string FindValue )
        {
            this.FindStringAsync( StartPage, EndPage, FindValue, null );
        }

        /// <remarks/>
        public void FindStringAsync( int StartPage, int EndPage, string FindValue, object userState )
        {
            if ( ( this.FindStringOperationCompleted == null ) )
            {
                this.FindStringOperationCompleted = new System.Threading.SendOrPostCallback( this.OnFindStringOperationCompleted );
            }
            this.InvokeAsync( "FindString", new object[] {
                        StartPage,
                        EndPage,
                        FindValue}, this.FindStringOperationCompleted, userState );
        }

        private void OnFindStringOperationCompleted( object arg )
        {
            if ( ( this.FindStringCompleted != null ) )
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ( (System.Web.Services.Protocols.InvokeCompletedEventArgs)( arg ) );
                this.FindStringCompleted( this, new FindStringCompletedEventArgs( invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState ) );
            }
        }

        /// <remarks/>
        [System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Design", "CA1021:AvoidOutParameters", MessageId = "4#" ), System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Design", "CA1021:AvoidOutParameters", MessageId = "3#" ), System.Web.Services.Protocols.SoapHeaderAttribute( "ServerInfoHeaderValue", Direction = System.Web.Services.Protocols.SoapHeaderDirection.Out )]
        [System.Web.Services.Protocols.SoapHeaderAttribute( "ExecutionHeaderValue" )]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute( "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices/Sor" +
            "t", RequestNamespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices", ResponseNamespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped )]
        [return: System.Xml.Serialization.XmlElementAttribute( "PageNumber" )]
        public int Sort( string SortItem, SortDirectionEnum Direction, bool Clear, out string ReportItem, out int NumPages )
        {
            object[] results = this.Invoke( "Sort", new object[] {
                        SortItem,
                        Direction,
                        Clear} );
            ReportItem = ( (string)( results[ 1 ] ) );
            NumPages = ( (int)( results[ 2 ] ) );
            return ( (int)( results[ 0 ] ) );
        }

        /// <remarks/>
        public void SortAsync( string SortItem, SortDirectionEnum Direction, bool Clear )
        {
            this.SortAsync( SortItem, Direction, Clear, null );
        }

        /// <remarks/>
        public void SortAsync( string SortItem, SortDirectionEnum Direction, bool Clear, object userState )
        {
            if ( ( this.SortOperationCompleted == null ) )
            {
                this.SortOperationCompleted = new System.Threading.SendOrPostCallback( this.OnSortOperationCompleted );
            }
            this.InvokeAsync( "Sort", new object[] {
                        SortItem,
                        Direction,
                        Clear}, this.SortOperationCompleted, userState );
        }

        private void OnSortOperationCompleted( object arg )
        {
            if ( ( this.SortCompleted != null ) )
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ( (System.Web.Services.Protocols.InvokeCompletedEventArgs)( arg ) );
                this.SortCompleted( this, new SortCompletedEventArgs( invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState ) );
            }
        }

        /// <remarks/>
        [System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Design", "CA1021:AvoidOutParameters", MessageId = "2#" ), System.Web.Services.Protocols.SoapHeaderAttribute( "ServerInfoHeaderValue", Direction = System.Web.Services.Protocols.SoapHeaderDirection.Out )]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute( "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices/Get" +
            "RenderResource", RequestNamespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices", ResponseNamespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped )]
        [return: System.Xml.Serialization.XmlElementAttribute( "Result", DataType = "base64Binary" )]
        public byte[] GetRenderResource( string Format, string DeviceInfo, out string MimeType )
        {
            object[] results = this.Invoke( "GetRenderResource", new object[] {
                        Format,
                        DeviceInfo} );
            MimeType = ( (string)( results[ 1 ] ) );
            return ( (byte[])( results[ 0 ] ) );
        }

        /// <remarks/>
        public void GetRenderResourceAsync( string Format, string DeviceInfo )
        {
            this.GetRenderResourceAsync( Format, DeviceInfo, null );
        }

        /// <remarks/>
        public void GetRenderResourceAsync( string Format, string DeviceInfo, object userState )
        {
            if ( ( this.GetRenderResourceOperationCompleted == null ) )
            {
                this.GetRenderResourceOperationCompleted = new System.Threading.SendOrPostCallback( this.OnGetRenderResourceOperationCompleted );
            }
            this.InvokeAsync( "GetRenderResource", new object[] {
                        Format,
                        DeviceInfo}, this.GetRenderResourceOperationCompleted, userState );
        }

        private void OnGetRenderResourceOperationCompleted( object arg )
        {
            if ( ( this.GetRenderResourceCompleted != null ) )
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ( (System.Web.Services.Protocols.InvokeCompletedEventArgs)( arg ) );
                this.GetRenderResourceCompleted( this, new GetRenderResourceCompletedEventArgs( invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState ) );
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute( "ServerInfoHeaderValue", Direction = System.Web.Services.Protocols.SoapHeaderDirection.Out )]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute( "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices/Lis" +
            "tRenderingExtensions", RequestNamespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices", ResponseNamespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped )]
        [return: System.Xml.Serialization.XmlArrayAttribute( "Extensions" )]
        public Extension[] ListRenderingExtensions()
        {
            object[] results = this.Invoke( "ListRenderingExtensions", new object[ 0 ] );
            return ( (Extension[])( results[ 0 ] ) );
        }

        /// <remarks/>
        public void ListRenderingExtensionsAsync()
        {
            this.ListRenderingExtensionsAsync( null );
        }

        /// <remarks/>
        public void ListRenderingExtensionsAsync( object userState )
        {
            if ( ( this.ListRenderingExtensionsOperationCompleted == null ) )
            {
                this.ListRenderingExtensionsOperationCompleted = new System.Threading.SendOrPostCallback( this.OnListRenderingExtensionsOperationCompleted );
            }
            this.InvokeAsync( "ListRenderingExtensions", new object[ 0 ], this.ListRenderingExtensionsOperationCompleted, userState );
        }

        private void OnListRenderingExtensionsOperationCompleted( object arg )
        {
            if ( ( this.ListRenderingExtensionsCompleted != null ) )
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ( (System.Web.Services.Protocols.InvokeCompletedEventArgs)( arg ) );
                this.ListRenderingExtensionsCompleted( this, new ListRenderingExtensionsCompletedEventArgs( invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState ) );
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute( "ServerInfoHeaderValue", Direction = System.Web.Services.Protocols.SoapHeaderDirection.Out )]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute( "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices/Log" +
            "onUser", RequestNamespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices", ResponseNamespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped )]
        public void LogonUser( string userName, string password, string authority )
        {
            this.Invoke( "LogonUser", new object[] {
                        userName,
                        password,
                        authority} );
        }

        /// <remarks/>
        public void LogonUserAsync( string userName, string password, string authority )
        {
            this.LogonUserAsync( userName, password, authority, null );
        }

        /// <remarks/>
        public void LogonUserAsync( string userName, string password, string authority, object userState )
        {
            if ( ( this.LogonUserOperationCompleted == null ) )
            {
                this.LogonUserOperationCompleted = new System.Threading.SendOrPostCallback( this.OnLogonUserOperationCompleted );
            }
            this.InvokeAsync( "LogonUser", new object[] {
                        userName,
                        password,
                        authority}, this.LogonUserOperationCompleted, userState );
        }

        private void OnLogonUserOperationCompleted( object arg )
        {
            if ( ( this.LogonUserCompleted != null ) )
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ( (System.Web.Services.Protocols.InvokeCompletedEventArgs)( arg ) );
                this.LogonUserCompleted( this, new System.ComponentModel.AsyncCompletedEventArgs( invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState ) );
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute( "ServerInfoHeaderValue", Direction = System.Web.Services.Protocols.SoapHeaderDirection.Out )]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute( "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices/Log" +
            "off", RequestNamespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices", ResponseNamespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped )]
        public void Logoff()
        {
            this.Invoke( "Logoff", new object[ 0 ] );
        }

        /// <remarks/>
        public void LogoffAsync()
        {
            this.LogoffAsync( null );
        }

        /// <remarks/>
        public void LogoffAsync( object userState )
        {
            if ( ( this.LogoffOperationCompleted == null ) )
            {
                this.LogoffOperationCompleted = new System.Threading.SendOrPostCallback( this.OnLogoffOperationCompleted );
            }
            this.InvokeAsync( "Logoff", new object[ 0 ], this.LogoffOperationCompleted, userState );
        }

        private void OnLogoffOperationCompleted( object arg )
        {
            if ( ( this.LogoffCompleted != null ) )
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ( (System.Web.Services.Protocols.InvokeCompletedEventArgs)( arg ) );
                this.LogoffCompleted( this, new System.ComponentModel.AsyncCompletedEventArgs( invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState ) );
            }
        }

        /// <remarks/>
        public new void CancelAsync( object userState )
        {
            base.CancelAsync( userState );
        }

        [System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Performance", "CA1820:TestForEmptyStringsUsingStringLength" ), System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Globalization", "CA1304:SpecifyCultureInfo", MessageId = "System.String.Compare(System.String,System.String,System.Boolean)" ), System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Performance", "CA1822:MarkMembersAsStatic" )]
        private bool IsLocalFileSystemWebService( string url )
        {
            if ( ( ( url == null )
                        || ( url == string.Empty ) ) )
            {
                return false;
            }
            System.Uri wsUri = new System.Uri( url );
            if ( ( ( ( wsUri.Port >= 1024 )
                        && ( wsUri.Port <= 5000 ) )
                        && ( string.Compare( wsUri.Host, "localHost", true ) == 0 ) ) )
            {
                return true;
            }
            return false;
        }
    }

    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute( Namespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices" )]
    [System.Xml.Serialization.XmlRootAttribute( Namespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices", IsNullable = false )]
    public partial class ServerInfoHeader : System.Web.Services.Protocols.SoapHeader
    {

        private string reportServerVersionNumberField;

        private string reportServerEditionField;

        private string reportServerVersionField;

        private string reportServerDateTimeField;

        [System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Usage", "CA2235:MarkAllNonSerializableFields" )]
        private System.Xml.XmlAttribute[] anyAttrField;

        /// <remarks/>
        public string ReportServerVersionNumber
        {
            get
            {
                return this.reportServerVersionNumberField;
            }
            set
            {
                this.reportServerVersionNumberField = value;
            }
        }

        /// <remarks/>
        public string ReportServerEdition
        {
            get
            {
                return this.reportServerEditionField;
            }
            set
            {
                this.reportServerEditionField = value;
            }
        }

        /// <remarks/>
        public string ReportServerVersion
        {
            get
            {
                return this.reportServerVersionField;
            }
            set
            {
                this.reportServerVersionField = value;
            }
        }

        /// <remarks/>
        public string ReportServerDateTime
        {
            get
            {
                return this.reportServerDateTimeField;
            }
            set
            {
                this.reportServerDateTimeField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlAnyAttributeAttribute()]
        public System.Xml.XmlAttribute[] AnyAttr
        {
            get
            {
                return this.anyAttrField;
            }
            set
            {
                this.anyAttrField = value;
            }
        }
    }

    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute( Namespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices" )]
    public partial class Extension
    {

        private ExtensionTypeEnum extensionTypeField;

        private string nameField;

        private string localizedNameField;

        private bool visibleField;

        private bool isModelGenerationSupportedField;

        /// <remarks/>
        public ExtensionTypeEnum ExtensionType
        {
            get
            {
                return this.extensionTypeField;
            }
            set
            {
                this.extensionTypeField = value;
            }
        }

        /// <remarks/>
        public string Name
        {
            get
            {
                return this.nameField;
            }
            set
            {
                this.nameField = value;
            }
        }

        /// <remarks/>
        public string LocalizedName
        {
            get
            {
                return this.localizedNameField;
            }
            set
            {
                this.localizedNameField = value;
            }
        }

        /// <remarks/>
        public bool Visible
        {
            get
            {
                return this.visibleField;
            }
            set
            {
                this.visibleField = value;
            }
        }

        /// <remarks/>
        public bool IsModelGenerationSupported
        {
            get
            {
                return this.isModelGenerationSupportedField;
            }
            set
            {
                this.isModelGenerationSupportedField = value;
            }
        }
    }

    /// <remarks/>
    [System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix" ), System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute( Namespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices" )]
    public enum ExtensionTypeEnum
    {

        /// <remarks/>
        Delivery,

        /// <remarks/>
        Render,

        /// <remarks/>
        Data,

        /// <remarks/>
        All,
    }

    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute( Namespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices" )]
    public partial class DocumentMapNode
    {

        private string labelField;

        private string uniqueNameField;

        private DocumentMapNode[] childrenField;

        /// <remarks/>
        public string Label
        {
            get
            {
                return this.labelField;
            }
            set
            {
                this.labelField = value;
            }
        }

        /// <remarks/>
        public string UniqueName
        {
            get
            {
                return this.uniqueNameField;
            }
            set
            {
                this.uniqueNameField = value;
            }
        }

        /// <remarks/>
        [System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Performance", "CA1819:PropertiesShouldNotReturnArrays" )]
        public DocumentMapNode[] Children
        {
            get
            {
                return this.childrenField;
            }
            set
            {
                this.childrenField = value;
            }
        }
    }

    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlIncludeAttribute( typeof( ParameterValue ) )]
    [System.Xml.Serialization.XmlTypeAttribute( Namespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices" )]
    public partial class ParameterValueOrFieldReference
    {
    }

    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute( Namespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices" )]
    public partial class ParameterValue : ParameterValueOrFieldReference
    {

        private string nameField;

        private string valueField;

        private string labelField;

        /// <remarks/>
        public string Name
        {
            get
            {
                return this.nameField;
            }
            set
            {
                this.nameField = value;
            }
        }

        /// <remarks/>
        public string Value
        {
            get
            {
                return this.valueField;
            }
            set
            {
                this.valueField = value;
            }
        }

        /// <remarks/>
        public string Label
        {
            get
            {
                return this.labelField;
            }
            set
            {
                this.labelField = value;
            }
        }
    }

    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute( Namespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices" )]
    public partial class DataSourceCredentials
    {

        private string dataSourceNameField;

        private string userNameField;

        private string passwordField;

        /// <remarks/>
        public string DataSourceName
        {
            get
            {
                return this.dataSourceNameField;
            }
            set
            {
                this.dataSourceNameField = value;
            }
        }

        /// <remarks/>
        public string UserName
        {
            get
            {
                return this.userNameField;
            }
            set
            {
                this.userNameField = value;
            }
        }

        /// <remarks/>
        public string Password
        {
            get
            {
                return this.passwordField;
            }
            set
            {
                this.passwordField = value;
            }
        }
    }

    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute( Namespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices" )]
    public partial class Warning
    {

        private string codeField;

        private string severityField;

        private string objectNameField;

        private string objectTypeField;

        private string messageField;

        /// <remarks/>
        public string Code
        {
            get
            {
                return this.codeField;
            }
            set
            {
                this.codeField = value;
            }
        }

        /// <remarks/>
        public string Severity
        {
            get
            {
                return this.severityField;
            }
            set
            {
                this.severityField = value;
            }
        }

        /// <remarks/>
        public string ObjectName
        {
            get
            {
                return this.objectNameField;
            }
            set
            {
                this.objectNameField = value;
            }
        }

        /// <remarks/>
        public string ObjectType
        {
            get
            {
                return this.objectTypeField;
            }
            set
            {
                this.objectTypeField = value;
            }
        }

        /// <remarks/>
        public string Message
        {
            get
            {
                return this.messageField;
            }
            set
            {
                this.messageField = value;
            }
        }
    }

    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute( Namespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices" )]
    public partial class ReportMargins
    {

        private double topField;

        private double bottomField;

        private double leftField;

        private double rightField;

        /// <remarks/>
        public double Top
        {
            get
            {
                return this.topField;
            }
            set
            {
                this.topField = value;
            }
        }

        /// <remarks/>
        public double Bottom
        {
            get
            {
                return this.bottomField;
            }
            set
            {
                this.bottomField = value;
            }
        }

        /// <remarks/>
        public double Left
        {
            get
            {
                return this.leftField;
            }
            set
            {
                this.leftField = value;
            }
        }

        /// <remarks/>
        public double Right
        {
            get
            {
                return this.rightField;
            }
            set
            {
                this.rightField = value;
            }
        }
    }

    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute( Namespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices" )]
    public partial class ReportPaperSize
    {

        private double heightField;

        private double widthField;

        /// <remarks/>
        public double Height
        {
            get
            {
                return this.heightField;
            }
            set
            {
                this.heightField = value;
            }
        }

        /// <remarks/>
        public double Width
        {
            get
            {
                return this.widthField;
            }
            set
            {
                this.widthField = value;
            }
        }
    }

    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute( Namespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices" )]
    public partial class PageSettings
    {

        private ReportPaperSize paperSizeField;

        private ReportMargins marginsField;

        /// <remarks/>
        public ReportPaperSize PaperSize
        {
            get
            {
                return this.paperSizeField;
            }
            set
            {
                this.paperSizeField = value;
            }
        }

        /// <remarks/>
        public ReportMargins Margins
        {
            get
            {
                return this.marginsField;
            }
            set
            {
                this.marginsField = value;
            }
        }
    }

    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute( Namespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices" )]
    public partial class DataSourcePrompt
    {

        private string nameField;

        private string dataSourceIDField;

        private string promptField;

        /// <remarks/>
        public string Name
        {
            get
            {
                return this.nameField;
            }
            set
            {
                this.nameField = value;
            }
        }

        /// <remarks/>
        [System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Naming", "CA1706:ShortAcronymsShouldBeUppercase", MessageId = "Member" )]
        public string DataSourceID
        {
            get
            {
                return this.dataSourceIDField;
            }
            set
            {
                this.dataSourceIDField = value;
            }
        }

        /// <remarks/>
        public string Prompt
        {
            get
            {
                return this.promptField;
            }
            set
            {
                this.promptField = value;
            }
        }
    }

    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute( Namespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices" )]
    public partial class ValidValue
    {

        private string labelField;

        private string valueField;

        /// <remarks/>
        public string Label
        {
            get
            {
                return this.labelField;
            }
            set
            {
                this.labelField = value;
            }
        }

        /// <remarks/>
        public string Value
        {
            get
            {
                return this.valueField;
            }
            set
            {
                this.valueField = value;
            }
        }
    }

    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute( Namespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices" )]
    public partial class ReportParameter
    {

        private string nameField;

        private ParameterTypeEnum typeField;

        private bool typeFieldSpecified;

        private bool nullableField;

        private bool nullableFieldSpecified;

        private bool allowBlankField;

        private bool allowBlankFieldSpecified;

        private bool multiValueField;

        private bool multiValueFieldSpecified;

        private bool queryParameterField;

        private bool queryParameterFieldSpecified;

        private string promptField;

        private bool promptUserField;

        private bool promptUserFieldSpecified;

        private string[] dependenciesField;

        private bool validValuesQueryBasedField;

        private bool validValuesQueryBasedFieldSpecified;

        private ValidValue[] validValuesField;

        private bool defaultValuesQueryBasedField;

        private bool defaultValuesQueryBasedFieldSpecified;

        private string[] defaultValuesField;

        private ParameterStateEnum stateField;

        private bool stateFieldSpecified;

        private string errorMessageField;

        /// <remarks/>
        public string Name
        {
            get
            {
                return this.nameField;
            }
            set
            {
                this.nameField = value;
            }
        }

        /// <remarks/>
        public ParameterTypeEnum Type
        {
            get
            {
                return this.typeField;
            }
            set
            {
                this.typeField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool TypeSpecified
        {
            get
            {
                return this.typeFieldSpecified;
            }
            set
            {
                this.typeFieldSpecified = value;
            }
        }

        /// <remarks/>
        public bool Nullable
        {
            get
            {
                return this.nullableField;
            }
            set
            {
                this.nullableField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool NullableSpecified
        {
            get
            {
                return this.nullableFieldSpecified;
            }
            set
            {
                this.nullableFieldSpecified = value;
            }
        }

        /// <remarks/>
        public bool AllowBlank
        {
            get
            {
                return this.allowBlankField;
            }
            set
            {
                this.allowBlankField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool AllowBlankSpecified
        {
            get
            {
                return this.allowBlankFieldSpecified;
            }
            set
            {
                this.allowBlankFieldSpecified = value;
            }
        }

        /// <remarks/>
        public bool MultiValue
        {
            get
            {
                return this.multiValueField;
            }
            set
            {
                this.multiValueField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool MultiValueSpecified
        {
            get
            {
                return this.multiValueFieldSpecified;
            }
            set
            {
                this.multiValueFieldSpecified = value;
            }
        }

        /// <remarks/>
        public bool QueryParameter
        {
            get
            {
                return this.queryParameterField;
            }
            set
            {
                this.queryParameterField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool QueryParameterSpecified
        {
            get
            {
                return this.queryParameterFieldSpecified;
            }
            set
            {
                this.queryParameterFieldSpecified = value;
            }
        }

        /// <remarks/>
        public string Prompt
        {
            get
            {
                return this.promptField;
            }
            set
            {
                this.promptField = value;
            }
        }

        /// <remarks/>
        public bool PromptUser
        {
            get
            {
                return this.promptUserField;
            }
            set
            {
                this.promptUserField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool PromptUserSpecified
        {
            get
            {
                return this.promptUserFieldSpecified;
            }
            set
            {
                this.promptUserFieldSpecified = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute( "Dependency" )]
        public string[] Dependencies
        {
            get
            {
                return this.dependenciesField;
            }
            set
            {
                this.dependenciesField = value;
            }
        }

        /// <remarks/>
        public bool ValidValuesQueryBased
        {
            get
            {
                return this.validValuesQueryBasedField;
            }
            set
            {
                this.validValuesQueryBasedField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ValidValuesQueryBasedSpecified
        {
            get
            {
                return this.validValuesQueryBasedFieldSpecified;
            }
            set
            {
                this.validValuesQueryBasedFieldSpecified = value;
            }
        }

        /// <remarks/>
        [System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Performance", "CA1819:PropertiesShouldNotReturnArrays" )]
        public ValidValue[] ValidValues
        {
            get
            {
                return this.validValuesField;
            }
            set
            {
                this.validValuesField = value;
            }
        }

        /// <remarks/>
        public bool DefaultValuesQueryBased
        {
            get
            {
                return this.defaultValuesQueryBasedField;
            }
            set
            {
                this.defaultValuesQueryBasedField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DefaultValuesQueryBasedSpecified
        {
            get
            {
                return this.defaultValuesQueryBasedFieldSpecified;
            }
            set
            {
                this.defaultValuesQueryBasedFieldSpecified = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute( "Value" )]
        public string[] DefaultValues
        {
            get
            {
                return this.defaultValuesField;
            }
            set
            {
                this.defaultValuesField = value;
            }
        }

        /// <remarks/>
        public ParameterStateEnum State
        {
            get
            {
                return this.stateField;
            }
            set
            {
                this.stateField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool StateSpecified
        {
            get
            {
                return this.stateFieldSpecified;
            }
            set
            {
                this.stateFieldSpecified = value;
            }
        }

        /// <remarks/>
        public string ErrorMessage
        {
            get
            {
                return this.errorMessageField;
            }
            set
            {
                this.errorMessageField = value;
            }
        }
    }

    /// <remarks/>
    [System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix" ), System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute( Namespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices" )]
    public enum ParameterTypeEnum
    {

        /// <remarks/>
        Boolean,

        /// <remarks/>
        DateTime,

        /// <remarks/>
        Integer,

        /// <remarks/>
        Float,

        /// <remarks/>
        String,
    }

    /// <remarks/>
    [System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix" ), System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute( Namespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices" )]
    public enum ParameterStateEnum
    {

        /// <remarks/>
        HasValidValue,

        /// <remarks/>
        MissingValidValue,

        /// <remarks/>
        HasOutstandingDependencies,

        /// <remarks/>
        DynamicValuesUnavailable,
    }

    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute( Namespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices" )]
    public partial class ExecutionInfo
    {

        private bool hasSnapshotField;

        private bool needsProcessingField;

        private bool allowQueryExecutionField;

        private bool credentialsRequiredField;

        private bool parametersRequiredField;

        private System.DateTime expirationDateTimeField;

        private System.DateTime executionDateTimeField;

        private int numPagesField;

        private ReportParameter[] parametersField;

        private DataSourcePrompt[] dataSourcePromptsField;

        private bool hasDocumentMapField;

        private string executionIDField;

        private string reportPathField;

        private string historyIDField;

        private PageSettings reportPageSettingsField;

        private int autoRefreshIntervalField;

        /// <remarks/>
        public bool HasSnapshot
        {
            get
            {
                return this.hasSnapshotField;
            }
            set
            {
                this.hasSnapshotField = value;
            }
        }

        /// <remarks/>
        public bool NeedsProcessing
        {
            get
            {
                return this.needsProcessingField;
            }
            set
            {
                this.needsProcessingField = value;
            }
        }

        /// <remarks/>
        public bool AllowQueryExecution
        {
            get
            {
                return this.allowQueryExecutionField;
            }
            set
            {
                this.allowQueryExecutionField = value;
            }
        }

        /// <remarks/>
        public bool CredentialsRequired
        {
            get
            {
                return this.credentialsRequiredField;
            }
            set
            {
                this.credentialsRequiredField = value;
            }
        }

        /// <remarks/>
        public bool ParametersRequired
        {
            get
            {
                return this.parametersRequiredField;
            }
            set
            {
                this.parametersRequiredField = value;
            }
        }

        /// <remarks/>
        public System.DateTime ExpirationDateTime
        {
            get
            {
                return this.expirationDateTimeField;
            }
            set
            {
                this.expirationDateTimeField = value;
            }
        }

        /// <remarks/>
        public System.DateTime ExecutionDateTime
        {
            get
            {
                return this.executionDateTimeField;
            }
            set
            {
                this.executionDateTimeField = value;
            }
        }

        /// <remarks/>
        public int NumPages
        {
            get
            {
                return this.numPagesField;
            }
            set
            {
                this.numPagesField = value;
            }
        }

        /// <remarks/>
        [System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Performance", "CA1819:PropertiesShouldNotReturnArrays" )]
        public ReportParameter[] Parameters
        {
            get
            {
                return this.parametersField;
            }
            set
            {
                this.parametersField = value;
            }
        }

        /// <remarks/>
        [System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Performance", "CA1819:PropertiesShouldNotReturnArrays" )]
        public DataSourcePrompt[] DataSourcePrompts
        {
            get
            {
                return this.dataSourcePromptsField;
            }
            set
            {
                this.dataSourcePromptsField = value;
            }
        }

        /// <remarks/>
        public bool HasDocumentMap
        {
            get
            {
                return this.hasDocumentMapField;
            }
            set
            {
                this.hasDocumentMapField = value;
            }
        }

        /// <remarks/>
        [System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Naming", "CA1706:ShortAcronymsShouldBeUppercase", MessageId = "Member" )]
        public string ExecutionID
        {
            get
            {
                return this.executionIDField;
            }
            set
            {
                this.executionIDField = value;
            }
        }

        /// <remarks/>
        public string ReportPath
        {
            get
            {
                return this.reportPathField;
            }
            set
            {
                this.reportPathField = value;
            }
        }

        /// <remarks/>
        [System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Naming", "CA1706:ShortAcronymsShouldBeUppercase", MessageId = "Member" )]
        public string HistoryID
        {
            get
            {
                return this.historyIDField;
            }
            set
            {
                this.historyIDField = value;
            }
        }

        /// <remarks/>
        public PageSettings ReportPageSettings
        {
            get
            {
                return this.reportPageSettingsField;
            }
            set
            {
                this.reportPageSettingsField = value;
            }
        }

        /// <remarks/>
        public int AutoRefreshInterval
        {
            get
            {
                return this.autoRefreshIntervalField;
            }
            set
            {
                this.autoRefreshIntervalField = value;
            }
        }
    }

    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute( Namespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices" )]
    [System.Xml.Serialization.XmlRootAttribute( Namespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices", IsNullable = false )]
    public partial class ExecutionHeader : System.Web.Services.Protocols.SoapHeader
    {

        private string executionIDField;

        [System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Usage", "CA2235:MarkAllNonSerializableFields" )]
        private System.Xml.XmlAttribute[] anyAttrField;

        /// <remarks/>
        [System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Naming", "CA1706:ShortAcronymsShouldBeUppercase", MessageId = "Member" )]
        public string ExecutionID
        {
            get
            {
                return this.executionIDField;
            }
            set
            {
                this.executionIDField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlAnyAttributeAttribute()]
        public System.Xml.XmlAttribute[] AnyAttr
        {
            get
            {
                return this.anyAttrField;
            }
            set
            {
                this.anyAttrField = value;
            }
        }
    }

    /// <remarks/>
    [System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix" ), System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute( Namespace = "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices" )]
    public enum SortDirectionEnum
    {

        /// <remarks/>
        None,

        /// <remarks/>
        Ascending,

        /// <remarks/>
        Descending,
    }

    /// <remarks/>
    [System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Design", "CA1003:UseGenericEventHandlerInstances" )]
    public delegate void ListSecureMethodsCompletedEventHandler( object sender, ListSecureMethodsCompletedEventArgs e );

    /// <remarks/>
    public partial class ListSecureMethodsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal ListSecureMethodsCompletedEventArgs( object[] results, System.Exception exception, bool cancelled, object userState )
            :
                base( exception, cancelled, userState )
        {
            this.results = results;
        }

        /// <remarks/>
        [System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Performance", "CA1819:PropertiesShouldNotReturnArrays" )]
        public string[] Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ( (string[])( this.results[ 0 ] ) );
            }
        }
    }

    /// <remarks/>
    [System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Design", "CA1003:UseGenericEventHandlerInstances" )]
    public delegate void LoadReportCompletedEventHandler( object sender, LoadReportCompletedEventArgs e );

    /// <remarks/>
    public partial class LoadReportCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal LoadReportCompletedEventArgs( object[] results, System.Exception exception, bool cancelled, object userState )
            :
                base( exception, cancelled, userState )
        {
            this.results = results;
        }

        /// <remarks/>
        public ExecutionInfo Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ( (ExecutionInfo)( this.results[ 0 ] ) );
            }
        }
    }

    /// <remarks/>
    [System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Design", "CA1003:UseGenericEventHandlerInstances" )]
    public delegate void LoadReportDefinitionCompletedEventHandler( object sender, LoadReportDefinitionCompletedEventArgs e );

    /// <remarks/>
    public partial class LoadReportDefinitionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal LoadReportDefinitionCompletedEventArgs( object[] results, System.Exception exception, bool cancelled, object userState )
            :
                base( exception, cancelled, userState )
        {
            this.results = results;
        }

        /// <remarks/>
        public ExecutionInfo Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ( (ExecutionInfo)( this.results[ 0 ] ) );
            }
        }

        /// <remarks/>
        [System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Performance", "CA1819:PropertiesShouldNotReturnArrays" ), System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly", MessageId = "Member" )]
        public Warning[] warnings
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ( (Warning[])( this.results[ 1 ] ) );
            }
        }
    }

    /// <remarks/>
    [System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Design", "CA1003:UseGenericEventHandlerInstances" )]
    public delegate void SetExecutionCredentialsCompletedEventHandler( object sender, SetExecutionCredentialsCompletedEventArgs e );

    /// <remarks/>
    public partial class SetExecutionCredentialsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal SetExecutionCredentialsCompletedEventArgs( object[] results, System.Exception exception, bool cancelled, object userState )
            :
                base( exception, cancelled, userState )
        {
            this.results = results;
        }

        /// <remarks/>
        public ExecutionInfo Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ( (ExecutionInfo)( this.results[ 0 ] ) );
            }
        }
    }

    /// <remarks/>
    [System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Design", "CA1003:UseGenericEventHandlerInstances" )]
    public delegate void SetExecutionParametersCompletedEventHandler( object sender, SetExecutionParametersCompletedEventArgs e );

    /// <remarks/>
    public partial class SetExecutionParametersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal SetExecutionParametersCompletedEventArgs( object[] results, System.Exception exception, bool cancelled, object userState )
            :
                base( exception, cancelled, userState )
        {
            this.results = results;
        }

        /// <remarks/>
        public ExecutionInfo Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ( (ExecutionInfo)( this.results[ 0 ] ) );
            }
        }
    }

    /// <remarks/>
    [System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Design", "CA1003:UseGenericEventHandlerInstances" )]
    public delegate void ResetExecutionCompletedEventHandler( object sender, ResetExecutionCompletedEventArgs e );

    /// <remarks/>
    public partial class ResetExecutionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal ResetExecutionCompletedEventArgs( object[] results, System.Exception exception, bool cancelled, object userState )
            :
                base( exception, cancelled, userState )
        {
            this.results = results;
        }

        /// <remarks/>
        public ExecutionInfo Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ( (ExecutionInfo)( this.results[ 0 ] ) );
            }
        }
    }

    /// <remarks/>
    [System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Design", "CA1003:UseGenericEventHandlerInstances" )]
    public delegate void RenderCompletedEventHandler( object sender, RenderCompletedEventArgs e );

    /// <remarks/>
    public partial class RenderCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal RenderCompletedEventArgs( object[] results, System.Exception exception, bool cancelled, object userState )
            :
                base( exception, cancelled, userState )
        {
            this.results = results;
        }

        /// <remarks/>
        [System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Performance", "CA1819:PropertiesShouldNotReturnArrays" )]
        public byte[] Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ( (byte[])( this.results[ 0 ] ) );
            }
        }

        /// <remarks/>
        public string Extension
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ( (string)( this.results[ 1 ] ) );
            }
        }

        /// <remarks/>
        public string MimeType
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ( (string)( this.results[ 2 ] ) );
            }
        }

        /// <remarks/>
        public string Encoding
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ( (string)( this.results[ 3 ] ) );
            }
        }

        /// <remarks/>
        [System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Performance", "CA1819:PropertiesShouldNotReturnArrays" )]
        public Warning[] Warnings
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ( (Warning[])( this.results[ 4 ] ) );
            }
        }

        /// <remarks/>
        [System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Performance", "CA1819:PropertiesShouldNotReturnArrays" )]
        public string[] StreamIds
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ( (string[])( this.results[ 5 ] ) );
            }
        }
    }

    /// <remarks/>
    [System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Design", "CA1003:UseGenericEventHandlerInstances" )]
    public delegate void RenderStreamCompletedEventHandler( object sender, RenderStreamCompletedEventArgs e );

    /// <remarks/>
    public partial class RenderStreamCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal RenderStreamCompletedEventArgs( object[] results, System.Exception exception, bool cancelled, object userState )
            :
                base( exception, cancelled, userState )
        {
            this.results = results;
        }

        /// <remarks/>
        [System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Performance", "CA1819:PropertiesShouldNotReturnArrays" )]
        public byte[] Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ( (byte[])( this.results[ 0 ] ) );
            }
        }

        /// <remarks/>
        public string Encoding
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ( (string)( this.results[ 1 ] ) );
            }
        }

        /// <remarks/>
        public string MimeType
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ( (string)( this.results[ 2 ] ) );
            }
        }
    }

    /// <remarks/>
    [System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Design", "CA1003:UseGenericEventHandlerInstances" )]
    public delegate void GetExecutionInfoCompletedEventHandler( object sender, GetExecutionInfoCompletedEventArgs e );

    /// <remarks/>
    public partial class GetExecutionInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetExecutionInfoCompletedEventArgs( object[] results, System.Exception exception, bool cancelled, object userState )
            :
                base( exception, cancelled, userState )
        {
            this.results = results;
        }

        /// <remarks/>
        public ExecutionInfo Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ( (ExecutionInfo)( this.results[ 0 ] ) );
            }
        }
    }

    /// <remarks/>
    [System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Design", "CA1003:UseGenericEventHandlerInstances" )]
    public delegate void GetDocumentMapCompletedEventHandler( object sender, GetDocumentMapCompletedEventArgs e );

    /// <remarks/>
    public partial class GetDocumentMapCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetDocumentMapCompletedEventArgs( object[] results, System.Exception exception, bool cancelled, object userState )
            :
                base( exception, cancelled, userState )
        {
            this.results = results;
        }

        /// <remarks/>
        public DocumentMapNode Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ( (DocumentMapNode)( this.results[ 0 ] ) );
            }
        }
    }

    /// <remarks/>
    [System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Design", "CA1003:UseGenericEventHandlerInstances" )]
    public delegate void LoadDrillthroughTargetCompletedEventHandler( object sender, LoadDrillthroughTargetCompletedEventArgs e );

    /// <remarks/>
    public partial class LoadDrillthroughTargetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal LoadDrillthroughTargetCompletedEventArgs( object[] results, System.Exception exception, bool cancelled, object userState )
            :
                base( exception, cancelled, userState )
        {
            this.results = results;
        }

        /// <remarks/>
        public ExecutionInfo Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ( (ExecutionInfo)( this.results[ 0 ] ) );
            }
        }
    }

    /// <remarks/>
    [System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Design", "CA1003:UseGenericEventHandlerInstances" )]
    public delegate void ToggleItemCompletedEventHandler( object sender, ToggleItemCompletedEventArgs e );

    /// <remarks/>
    public partial class ToggleItemCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal ToggleItemCompletedEventArgs( object[] results, System.Exception exception, bool cancelled, object userState )
            :
                base( exception, cancelled, userState )
        {
            this.results = results;
        }

        /// <remarks/>
        public bool Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ( (bool)( this.results[ 0 ] ) );
            }
        }
    }

    /// <remarks/>
    [System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Design", "CA1003:UseGenericEventHandlerInstances" )]
    public delegate void NavigateDocumentMapCompletedEventHandler( object sender, NavigateDocumentMapCompletedEventArgs e );

    /// <remarks/>
    public partial class NavigateDocumentMapCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal NavigateDocumentMapCompletedEventArgs( object[] results, System.Exception exception, bool cancelled, object userState )
            :
                base( exception, cancelled, userState )
        {
            this.results = results;
        }

        /// <remarks/>
        public int Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ( (int)( this.results[ 0 ] ) );
            }
        }
    }

    /// <remarks/>
    [System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Design", "CA1003:UseGenericEventHandlerInstances" )]
    public delegate void NavigateBookmarkCompletedEventHandler( object sender, NavigateBookmarkCompletedEventArgs e );

    /// <remarks/>
    public partial class NavigateBookmarkCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal NavigateBookmarkCompletedEventArgs( object[] results, System.Exception exception, bool cancelled, object userState )
            :
                base( exception, cancelled, userState )
        {
            this.results = results;
        }

        /// <remarks/>
        public int Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ( (int)( this.results[ 0 ] ) );
            }
        }

        /// <remarks/>
        public string UniqueName
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ( (string)( this.results[ 1 ] ) );
            }
        }
    }

    /// <remarks/>
    [System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Design", "CA1003:UseGenericEventHandlerInstances" )]
    public delegate void FindStringCompletedEventHandler( object sender, FindStringCompletedEventArgs e );

    /// <remarks/>
    public partial class FindStringCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal FindStringCompletedEventArgs( object[] results, System.Exception exception, bool cancelled, object userState )
            :
                base( exception, cancelled, userState )
        {
            this.results = results;
        }

        /// <remarks/>
        public int Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ( (int)( this.results[ 0 ] ) );
            }
        }
    }

    /// <remarks/>
    [System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Design", "CA1003:UseGenericEventHandlerInstances" )]
    public delegate void SortCompletedEventHandler( object sender, SortCompletedEventArgs e );

    /// <remarks/>
    public partial class SortCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal SortCompletedEventArgs( object[] results, System.Exception exception, bool cancelled, object userState )
            :
                base( exception, cancelled, userState )
        {
            this.results = results;
        }

        /// <remarks/>
        public int Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ( (int)( this.results[ 0 ] ) );
            }
        }

        /// <remarks/>
        public string ReportItem
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ( (string)( this.results[ 1 ] ) );
            }
        }

        /// <remarks/>
        public int NumPages
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ( (int)( this.results[ 2 ] ) );
            }
        }
    }

    /// <remarks/>
    [System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Design", "CA1003:UseGenericEventHandlerInstances" )]
    public delegate void GetRenderResourceCompletedEventHandler( object sender, GetRenderResourceCompletedEventArgs e );

    /// <remarks/>
    public partial class GetRenderResourceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetRenderResourceCompletedEventArgs( object[] results, System.Exception exception, bool cancelled, object userState )
            :
                base( exception, cancelled, userState )
        {
            this.results = results;
        }

        /// <remarks/>
        [System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Performance", "CA1819:PropertiesShouldNotReturnArrays" )]
        public byte[] Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ( (byte[])( this.results[ 0 ] ) );
            }
        }

        /// <remarks/>
        public string MimeType
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ( (string)( this.results[ 1 ] ) );
            }
        }
    }

    /// <remarks/>
    [System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Design", "CA1003:UseGenericEventHandlerInstances" )]
    public delegate void ListRenderingExtensionsCompletedEventHandler( object sender, ListRenderingExtensionsCompletedEventArgs e );

    /// <remarks/>
    public partial class ListRenderingExtensionsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal ListRenderingExtensionsCompletedEventArgs( object[] results, System.Exception exception, bool cancelled, object userState )
            :
                base( exception, cancelled, userState )
        {
            this.results = results;
        }

        /// <remarks/>
        [System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Performance", "CA1819:PropertiesShouldNotReturnArrays" )]
        public Extension[] Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ( (Extension[])( this.results[ 0 ] ) );
            }
        }
    }

    /// <remarks/>
    [System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Design", "CA1003:UseGenericEventHandlerInstances" )]
    public delegate void LogonUserCompletedEventHandler( object sender, System.ComponentModel.AsyncCompletedEventArgs e );

    /// <remarks/>
    [System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Design", "CA1003:UseGenericEventHandlerInstances" )]
    public delegate void LogoffCompletedEventHandler( object sender, System.ComponentModel.AsyncCompletedEventArgs e );
}


